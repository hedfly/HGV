within GreenVillage;
package MicroGrid
  package PV
    package Examples
    end Examples;

    package PVS
      model PVs
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented Warehouse(
          eta_DCAC=0.8,
          V_nominal=240,
          A=120,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745)
          annotation (Placement(transformation(extent={{66,80},{86,100}})));
        basemodel.ReaderTMY3                      weaDat(
            computeWetBulbTemperature=false,
          filNam=
              "C:/Users/dhe/Desktop/HGVModel/greenvillage/GreenVillage/Buildings/Resources/weatherdata/USA_FL_Tampa.Intl.AP.722110_TMY3.mos",

          HSou=GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor)
          "Weather data model"
          annotation (Placement(transformation(extent={{-60,90},{-40,110}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented A(
          eta_DCAC=0.8,
          V_nominal=240,
          A=50,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745)
          annotation (Placement(transformation(extent={{66,56},{86,76}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented C(
          A=50,
          eta_DCAC=0.8,
          V_nominal=240,
          til=0.26179938779915,
          lat=0.48816859178281,
          azi=-0.78539816339745)
          annotation (Placement(transformation(extent={{66,32},{86,52}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented D(
          A=50,
          eta_DCAC=0.8,
          V_nominal=240,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=3.9269908169872)
          annotation (Placement(transformation(extent={{66,8},{86,28}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented NorCarport(
          A=50,
          eta_DCAC=0.8,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745,
          V_nominal=240)
          annotation (Placement(transformation(extent={{66,-16},{86,4}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented SouCarport(
          A=50,
          eta_DCAC=0.8,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745,
          V_nominal=240)
          annotation (Placement(transformation(extent={{66,-42},{86,-22}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented F(
          A=50,
          eta_DCAC=0.8,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745,
          V_nominal=240)
          annotation (Placement(transformation(extent={{66,-66},{86,-46}})));
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented G(
          A=50,
          eta_DCAC=0.8,
          V_nominal=240,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745)
          annotation (Placement(transformation(extent={{66,-90},{86,-70}})));
        Buildings.Electrical.AC.OnePhase.Sources.Grid grid(f=60, V=240)
          "Electrical grid model"
          annotation (Placement(transformation(extent={{-120,-30},{-100,-10}})));
        Buildings.Electrical.AC.OnePhase.Loads.Inductive acLoad(mode=Buildings.Electrical.Types.Load.VariableZ_P_input,
            V_nominal=240)
          annotation (Placement(transformation(extent={{-58,-90},{-78,-70}})));
        Modelica.Blocks.Sources.CombiTimeTable HDifHor(table=[0,0; 1800,0; 3600,
              0; 5400,0; 7200,0; 9000,0; 10800,0; 12600,0; 14400,0; 16200,0;
              18000,0; 19800,0; 21600,0; 23400,0; 25200,0; 27000,0; 28800,2;
              30600,11; 32400,29; 34200,21; 36000,16; 37800,233; 39600,68;
              41400,164; 43200,290; 45000,117; 46800,84; 48600,146; 50400,270;
              52200,116; 54000,203; 55800,102; 57600,92; 59400,92; 61200,52;
              63000,0; 64800,0; 66600,0; 68400,0; 70200,0; 72000,0; 73800,0;
              75600,0; 77400,0; 79200,0; 81000,0; 82800,0; 84600,0; 86400,0;
              88200,0; 90000,0; 91800,0; 93600,0; 95400,0; 97200,0; 99000,0;
              100800,0; 102600,0; 104400,0; 106200,0; 108000,0; 109800,0;
              111600,0; 113400,0; 115200,38; 117000,55; 118800,66; 120600,165;
              122400,81; 124200,204; 126000,89; 127800,187; 129600,281; 131400,
              205; 133200,287; 135000,277; 136800,185; 138600,246; 140400,214;
              142200,107; 144000,135; 145800,6; 147600,3; 149400,0; 151200,0;
              153000,0; 154800,0; 156600,0; 158400,0; 160200,0; 162000,0;
              163800,0; 165600,0; 167400,0; 169200,0; 171000,0; 172800,0;
              174600,0; 176400,0; 178200,0; 180000,0; 181800,0; 183600,0;
              185400,0; 187200,0; 189000,0; 190800,0; 192600,0; 194400,0;
              196200,0; 198000,0; 199800,0; 201600,40; 203400,37; 205200,84;
              207000,99; 208800,85; 210600,90; 212400,93; 214200,96; 216000,98;
              217800,251; 219600,302; 221400,291; 223200,275; 225000,173;
              226800,211; 228600,178; 230400,139; 232200,98; 234000,60; 235800,
              0; 237600,0; 239400,0; 241200,0; 243000,0; 244800,0; 246600,0;
              248400,0; 250200,0; 252000,0; 253800,0; 255600,0; 257400,0;
              259200,0; 261000,0; 262800,0; 264600,0; 266400,0; 268200,0;
              270000,0; 271800,0; 273600,0; 275400,0; 277200,0; 279000,0;
              280800,0; 282600,0; 284400,0; 286200,0; 288000,39; 289800,69;
              291600,47; 293400,139; 295200,122; 297000,221; 298800,266; 300600,
              255; 302400,123; 304200,145; 306000,158; 307800,149; 309600,200;
              311400,190; 313200,96; 315000,77; 316800,66; 318600,62; 320400,34;
              322200,0; 324000,0; 325800,0; 327600,0; 329400,0; 331200,0;
              333000,0; 334800,0; 336600,0; 338400,0; 340200,0; 342000,0;
              343800,0; 345600,0; 347400,0; 349200,0; 351000,0; 352800,0;
              354600,0; 356400,0; 358200,0; 360000,0; 361800,0; 363600,0;
              365400,0; 367200,0; 369000,0; 370800,0; 372600,0; 374400,38;
              376200,55; 378000,66; 379800,75; 381600,81; 383400,86; 385200,90;
              387000,93; 388800,94; 390600,95; 392400,94; 394200,93; 396000,91;
              397800,88; 399600,83; 401400,77; 403200,69; 405000,58; 406800,38;
              408600,0; 410400,0; 412200,0; 414000,0; 415800,0; 417600,0;
              419400,0; 421200,0; 423000,0; 424800,0; 426600,0; 428400,0;
              430200,0; 432000,0; 433800,0; 435600,0; 437400,0; 439200,0;
              441000,0; 442800,0; 444600,0; 446400,0; 448200,0; 450000,0;
              451800,0; 453600,0; 455400,0; 457200,0; 459000,0; 460800,38;
              462600,55; 464400,67; 466200,75; 468000,81; 469800,238; 471600,
              178; 473400,85; 475200,88; 477000,90; 478800,138; 480600,278;
              482400,239; 484200,236; 486000,208; 487800,175; 489600,115;
              491400,70; 493200,40; 495000,0; 496800,0; 498600,0; 500400,0;
              502200,0; 504000,0; 505800,0; 507600,0; 509400,0; 511200,0;
              513000,0; 514800,0; 516600,0; 518400,0; 520200,0; 522000,0;
              523800,0; 525600,0; 527400,0; 529200,0; 531000,0; 532800,0;
              534600,0; 536400,0; 538200,0; 540000,0; 541800,0; 543600,0;
              545400,0; 547200,40; 549000,49; 550800,69; 552600,111; 554400,84;
              556200,89; 558000,93; 559800,96; 561600,97; 563400,98; 565200,301;
              567000,185; 568800,277; 570600,145; 572400,219; 574200,143;
              576000,141; 577800,53; 579600,40; 581400,0; 583200,0; 585000,0;
              586800,0; 588600,0; 590400,0; 592200,0; 594000,0; 595800,0;
              597600,0; 599400,0; 601200,0; 603000,0; 604800,0; 606600,0;
              608400,0; 610200,0; 612000,0; 613800,0; 615600,0; 617400,0;
              619200,0; 621000,0; 622800,0; 624600,0; 626400,0; 628200,0;
              630000,0; 631800,0; 633600,38; 635400,80; 637200,113; 639000,36;
              640800,17; 642600,159; 644400,114; 646200,291; 648000,215; 649800,
              274; 651600,308; 653400,292; 655200,164; 657000,247; 658800,207;
              660600,181; 662400,92; 664200,72; 666000,48; 667800,0; 669600,0;
              671400,0; 673200,0; 675000,0; 676800,0; 678600,0; 680400,0;
              682200,0; 684000,0; 685800,0; 687600,0; 689400,0; 691200,0;
              693000,0; 694800,0; 696600,0; 698400,0; 700200,0; 702000,0;
              703800,0; 705600,0; 707400,0; 709200,0; 711000,0; 712800,0;
              714600,0; 716400,0; 718200,0; 720000,37; 721800,54; 723600,108;
              725400,162; 727200,121; 729000,237; 730800,244; 732600,261;
              734400,229; 736200,228; 738000,254; 739800,229; 741600,221;
              743400,229; 745200,83; 747000,186; 748800,128; 750600,65; 752400,
              37; 754200,0; 756000,0; 757800,0; 759600,0; 761400,0; 763200,0;
              765000,0; 766800,0; 768600,0; 770400,0; 772200,0; 774000,0;
              775800,0; 777600,0; 779400,0; 781200,0; 783000,0; 784800,0;
              786600,0; 788400,0; 790200,0; 792000,0; 793800,0; 795600,0;
              797400,0; 799200,0; 801000,0; 802800,0; 804600,0; 806400,37;
              808200,54; 810000,93; 811800,113; 813600,154; 815400,209; 817200,
              243; 819000,271; 820800,210; 822600,292; 824400,297; 826200,301;
              828000,246; 829800,255; 831600,189; 833400,133; 835200,104;
              837000,84; 838800,42; 840600,66; 842400,0; 844200,0; 846000,0;
              847800,0; 849600,0; 851400,0; 853200,0; 855000,0; 856800,0;
              858600,0; 860400,0; 862200,0; 864000,0; 865800,0; 867600,0;
              869400,0; 871200,0; 873000,0; 874800,0; 876600,0; 878400,0;
              880200,0; 882000,0; 883800,0; 885600,0; 887400,0; 889200,0;
              891000,0; 892800,37; 894600,55; 896400,122; 898200,75; 900000,82;
              901800,87; 903600,265; 905400,93; 907200,95; 909000,95; 910800,95;
              912600,94; 914400,284; 916200,88; 918000,84; 919800,78; 921600,70;
              923400,59; 925200,42; 927000,65; 928800,0; 930600,0; 932400,0;
              934200,0; 936000,0; 937800,0; 939600,0; 941400,0; 943200,0;
              945000,0; 946800,0; 948600,0; 950400,0; 952200,0; 954000,0;
              955800,0; 957600,0; 959400,0; 961200,0; 963000,0; 964800,0;
              966600,0; 968400,0; 970200,0; 972000,0; 973800,0; 975600,0;
              977400,0; 979200,40; 981000,58; 982800,70; 984600,78; 986400,85;
              988200,90; 990000,94; 991800,97; 993600,98; 995400,99; 997200,99;
              999000,98; 1000800,96; 1002600,92; 1004400,88; 1006200,179;
              1008000,74; 1009800,62; 1011600,44; 1013400,44; 1015200,0;
              1017000,0; 1018800,0; 1020600,0; 1022400,0; 1024200,0; 1026000,0;
              1027800,0; 1029600,0; 1031400,0; 1033200,0; 1035000,0; 1036800,0;
              1038600,0; 1040400,0; 1042200,0; 1044000,0; 1045800,0; 1047600,0;
              1049400,0; 1051200,0; 1053000,0; 1054800,0; 1056600,0; 1058400,0;
              1060200,0; 1062000,0; 1063800,0; 1065600,39; 1067400,80; 1069200,
              110; 1071000,142; 1072800,190; 1074600,225; 1076400,92; 1078200,
              266; 1080000,96; 1081800,194; 1083600,292; 1085400,280; 1087200,
              93; 1089000,89; 1090800,184; 1092600,183; 1094400,141; 1096200,
              103; 1098000,61; 1099800,28; 1101600,0; 1103400,0; 1105200,0;
              1107000,0; 1108800,0; 1110600,0; 1112400,0; 1114200,0; 1116000,0;
              1117800,0; 1119600,0; 1121400,0; 1123200,0; 1125000,0; 1126800,0;
              1128600,0; 1130400,0; 1132200,0; 1134000,0; 1135800,0; 1137600,0;
              1139400,0; 1141200,0; 1143000,0; 1144800,0; 1146600,0; 1148400,0;
              1150200,0; 1152000,1; 1153800,58; 1155600,40; 1157400,129;
              1159200,198; 1161000,169; 1162800,174; 1164600,230; 1166400,110;
              1168200,115; 1170000,74; 1171800,212; 1173600,130; 1175400,79;
              1177200,119; 1179000,182; 1180800,11; 1182600,105; 1184400,65;
              1186200,30; 1188000,0; 1189800,0; 1191600,0; 1193400,0; 1195200,0;
              1197000,0; 1198800,0; 1200600,0; 1202400,0; 1204200,0; 1206000,0;
              1207800,0; 1209600,0; 1211400,0; 1213200,0; 1215000,0; 1216800,0;
              1218600,0; 1220400,0; 1222200,0; 1224000,0; 1225800,0; 1227600,0;
              1229400,0; 1231200,0; 1233000,0; 1234800,0; 1236600,0; 1238400,41;
              1240200,48; 1242000,109; 1243800,160; 1245600,201; 1247400,229;
              1249200,275; 1251000,298; 1252800,306; 1254600,276; 1256400,305;
              1258200,283; 1260000,190; 1261800,244; 1263600,199; 1265400,169;
              1267200,113; 1269000,108; 1270800,72; 1272600,48; 1274400,0;
              1276200,0; 1278000,0; 1279800,0; 1281600,0; 1283400,0; 1285200,0;
              1287000,0; 1288800,0; 1290600,0; 1292400,0; 1294200,0; 1296000,0;
              1297800,0; 1299600,0; 1301400,0; 1303200,0; 1305000,0; 1306800,0;
              1308600,0; 1310400,0; 1312200,0; 1314000,0; 1315800,0; 1317600,0;
              1319400,0; 1321200,0; 1323000,0; 1324800,41; 1326600,58; 1328400,
              70; 1330200,79; 1332000,85; 1333800,90; 1335600,94; 1337400,97;
              1339200,98; 1341000,99; 1342800,99; 1344600,98; 1346400,96;
              1348200,93; 1350000,88; 1351800,83; 1353600,75; 1355400,64;
              1357200,47; 1359000,43; 1360800,0; 1362600,0; 1364400,0; 1366200,
              0; 1368000,0; 1369800,0; 1371600,0; 1373400,0; 1375200,0; 1377000,
              0; 1378800,0; 1380600,0; 1382400,0; 1384200,0; 1386000,0; 1387800,
              0; 1389600,0; 1391400,0; 1393200,0; 1395000,0; 1396800,0; 1398600,
              0; 1400400,0; 1402200,0; 1404000,0; 1405800,0; 1407600,0; 1409400,
              0; 1411200,40; 1413000,66; 1414800,80; 1416600,124; 1418400,161;
              1420200,142; 1422000,212; 1423800,237; 1425600,248; 1427400,230;
              1429200,238; 1431000,232; 1432800,96; 1434600,92; 1436400,88;
              1438200,82; 1440000,75; 1441800,64; 1443600,47; 1445400,76;
              1447200,0; 1449000,0; 1450800,0; 1452600,0; 1454400,0; 1456200,0;
              1458000,0; 1459800,0; 1461600,0; 1463400,0; 1465200,0; 1467000,0;
              1468800,0; 1470600,0; 1472400,0; 1474200,0; 1476000,0; 1477800,0;
              1479600,0; 1481400,0; 1483200,0; 1485000,0; 1486800,0; 1488600,0;
              1490400,0; 1492200,0; 1494000,0; 1495800,0; 1497600,41; 1499400,
              58; 1501200,70; 1503000,79; 1504800,85; 1506600,91; 1508400,95;
              1510200,97; 1512000,99; 1513800,100; 1515600,100; 1517400,99;
              1519200,97; 1521000,94; 1522800,89; 1524600,84; 1526400,76;
              1528200,65; 1530000,49; 1531800,43; 1533600,0; 1535400,0; 1537200,
              0; 1539000,0; 1540800,0; 1542600,0; 1544400,0; 1546200,0; 1548000,
              0; 1549800,0; 1551600,0; 1553400,0; 1555200,0; 1557000,0; 1558800,
              0; 1560600,0; 1562400,0; 1564200,0; 1566000,0; 1567800,0; 1569600,
              0; 1571400,0; 1573200,0; 1575000,0; 1576800,0; 1578600,0; 1580400,
              0; 1582200,0; 1584000,41; 1585800,58; 1587600,69; 1589400,78;
              1591200,85; 1593000,90; 1594800,93; 1596600,96; 1598400,319;
              1600200,180; 1602000,311; 1603800,172; 1605600,107; 1607400,170;
              1609200,137; 1611000,158; 1612800,160; 1614600,8; 1616400,48;
              1618200,76; 1620000,0; 1621800,0; 1623600,0; 1625400,0; 1627200,0;
              1629000,0; 1630800,0; 1632600,0; 1634400,0; 1636200,0; 1638000,0;
              1639800,0; 1641600,0; 1643400,0; 1645200,0; 1647000,0; 1648800,0;
              1650600,0; 1652400,0; 1654200,0; 1656000,0; 1657800,0; 1659600,0;
              1661400,0; 1663200,0; 1665000,0; 1666800,0; 1668600,0; 1670400,41;
              1672200,58; 1674000,70; 1675800,78; 1677600,85; 1679400,90;
              1681200,94; 1683000,96; 1684800,98; 1686600,99; 1688400,99;
              1690200,98; 1692000,96; 1693800,93; 1695600,88; 1697400,156;
              1699200,133; 1701000,121; 1702800,45; 1704600,75; 1706400,0;
              1708200,0; 1710000,0; 1711800,0; 1713600,0; 1715400,0; 1717200,0;
              1719000,0; 1720800,0; 1722600,0; 1724400,0; 1726200,0; 1728000,0;
              1729800,0; 1731600,0; 1733400,0; 1735200,0; 1737000,0; 1738800,0;
              1740600,0; 1742400,0; 1744200,0; 1746000,0; 1747800,0; 1749600,0;
              1751400,0; 1753200,0; 1755000,0; 1756800,40; 1758600,57; 1760400,
              68; 1762200,77; 1764000,83; 1765800,88; 1767600,92; 1769400,95;
              1771200,97; 1773000,97; 1774800,173; 1776600,96; 1778400,94;
              1780200,92; 1782000,88; 1783800,82; 1785600,75; 1787400,107;
              1789200,71; 1791000,33; 1792800,0; 1794600,0; 1796400,0; 1798200,
              0; 1800000,0; 1801800,0; 1803600,0; 1805400,0; 1807200,0; 1809000,
              0; 1810800,0; 1812600,0; 1814400,0; 1816200,0; 1818000,0; 1819800,
              0; 1821600,0; 1823400,0; 1825200,0; 1827000,0; 1828800,0; 1830600,
              0; 1832400,0; 1834200,0; 1836000,0; 1837800,0; 1839600,0; 1841400,
              0; 1843200,42; 1845000,59; 1846800,71; 1848600,79; 1850400,86;
              1852200,91; 1854000,95; 1855800,98; 1857600,100; 1859400,101;
              1861200,101; 1863000,100; 1864800,98; 1866600,94; 1868400,90;
              1870200,85; 1872000,77; 1873800,67; 1875600,51; 1877400,44;
              1879200,0; 1881000,0; 1882800,0; 1884600,0; 1886400,0; 1888200,0;
              1890000,0; 1891800,0; 1893600,0; 1895400,0; 1897200,0; 1899000,0;
              1900800,0; 1902600,0; 1904400,0; 1906200,0; 1908000,0; 1909800,0;
              1911600,0; 1913400,0; 1915200,0; 1917000,0; 1918800,0; 1920600,0;
              1922400,0; 1924200,0; 1926000,0; 1927800,7; 1929600,42; 1931400,
              59; 1933200,71; 1935000,80; 1936800,87; 1938600,92; 1940400,96;
              1942200,99; 1944000,100; 1945800,101; 1947600,101; 1949400,100;
              1951200,98; 1953000,95; 1954800,91; 1956600,85; 1958400,78;
              1960200,67; 1962000,52; 1963800,45; 1965600,0; 1967400,0; 1969200,
              0; 1971000,0; 1972800,0; 1974600,0; 1976400,0; 1978200,0; 1980000,
              0; 1981800,0; 1983600,0; 1985400,0; 1987200,0; 1989000,0; 1990800,
              0; 1992600,0; 1994400,0; 1996200,0; 1998000,0; 1999800,0; 2001600,
              0; 2003400,0; 2005200,0; 2007000,0; 2008800,0; 2010600,0; 2012400,
              0; 2014200,4; 2016000,40; 2017800,82; 2019600,80; 2021400,173;
              2023200,211; 2025000,201; 2026800,95; 2028600,300; 2030400,209;
              2032200,228; 2034000,100; 2035800,99; 2037600,97; 2039400,94;
              2041200,90; 2043000,84; 2044800,77; 2046600,124; 2048400,84;
              2050200,44; 2052000,0; 2053800,0; 2055600,0; 2057400,0; 2059200,0;
              2061000,0; 2062800,0; 2064600,0; 2066400,0; 2068200,0; 2070000,0;
              2071800,0; 2073600,0; 2075400,0; 2077200,0; 2079000,0; 2080800,0;
              2082600,0; 2084400,0; 2086200,0; 2088000,0; 2089800,0; 2091600,0;
              2093400,0; 2095200,0; 2097000,0; 2098800,0; 2100600,7; 2102400,41;
              2104200,85; 2106000,132; 2107800,176; 2109600,206; 2111400,217;
              2113200,284; 2115000,311; 2116800,328; 2118600,282; 2120400,100;
              2122200,99; 2124000,97; 2125800,94; 2127600,90; 2129400,84;
              2131200,77; 2133000,67; 2134800,52; 2136600,44; 2138400,0;
              2140200,0; 2142000,0; 2143800,0; 2145600,0; 2147400,0; 2149200,0;
              2151000,0; 2152800,0; 2154600,0; 2156400,0; 2158200,0; 2160000,0;
              2161800,0; 2163600,0; 2165400,0; 2167200,0; 2169000,0; 2170800,0;
              2172600,0; 2174400,0; 2176200,0; 2178000,0; 2179800,0; 2181600,0;
              2183400,0; 2185200,0; 2187000,0; 2188800,5; 2190600,12; 2192400,
              99; 2194200,176; 2196000,146; 2197800,108; 2199600,274; 2201400,
              228; 2203200,235; 2205000,271; 2206800,338; 2208600,328; 2210400,
              266; 2212200,167; 2214000,78; 2215800,63; 2217600,140; 2219400,76;
              2221200,85; 2223000,43; 2224800,0; 2226600,0; 2228400,0; 2230200,
              0; 2232000,0; 2233800,0; 2235600,0; 2237400,0; 2239200,0; 2241000,
              0; 2242800,0; 2244600,0; 2246400,0; 2248200,0; 2250000,0; 2251800,
              0; 2253600,0; 2255400,0; 2257200,0; 2259000,0; 2260800,0; 2262600,
              0; 2264400,0; 2266200,0; 2268000,0; 2269800,0; 2271600,0; 2273400,
              8; 2275200,41; 2277000,58; 2278800,69; 2280600,81; 2282400,85;
              2284200,215; 2286000,291; 2287800,194; 2289600,228; 2291400,171;
              2293200,210; 2295000,184; 2296800,136; 2298600,84; 2300400,138;
              2302200,139; 2304000,97; 2305800,96; 2307600,53; 2309400,45;
              2311200,0; 2313000,0; 2314800,0; 2316600,0; 2318400,0; 2320200,0;
              2322000,0; 2323800,0; 2325600,0; 2327400,0; 2329200,0; 2331000,0;
              2332800,0; 2334600,0; 2336400,0; 2338200,0; 2340000,0; 2341800,0;
              2343600,0; 2345400,0; 2347200,0; 2349000,0; 2350800,0; 2352600,0;
              2354400,0; 2356200,0; 2358000,0; 2359800,8; 2361600,41; 2363400,
              58; 2365200,70; 2367000,78; 2368800,85; 2370600,90; 2372400,94;
              2374200,97; 2376000,99; 2377800,99; 2379600,99; 2381400,98;
              2383200,96; 2385000,94; 2386800,89; 2388600,217; 2390400,171;
              2392200,67; 2394000,84; 2395800,52; 2397600,0; 2399400,0; 2401200,
              0; 2403000,0; 2404800,0; 2406600,0; 2408400,0; 2410200,0; 2412000,
              0; 2413800,0; 2415600,0; 2417400,0; 2419200,0; 2421000,0; 2422800,
              0; 2424600,0; 2426400,0; 2428200,0; 2430000,0; 2431800,0; 2433600,
              0; 2435400,0; 2437200,0; 2439000,0; 2440800,0; 2442600,0; 2444400,
              0; 2446200,2; 2448000,18; 2449800,38; 2451600,59; 2453400,32;
              2455200,161; 2457000,202; 2458800,225; 2460600,170; 2462400,297;
              2464200,246; 2466000,279; 2467800,227; 2469600,167; 2471400,112;
              2473200,153; 2475000,69; 2476800,147; 2478600,5; 2480400,91;
              2482200,51; 2484000,0; 2485800,0; 2487600,0; 2489400,0; 2491200,0;
              2493000,0; 2494800,0; 2496600,0; 2498400,0; 2500200,0; 2502000,0;
              2503800,0; 2505600,0; 2507400,0; 2509200,0; 2511000,0; 2512800,0;
              2514600,0; 2516400,0; 2518200,0; 2520000,0; 2521800,0; 2523600,0;
              2525400,0; 2527200,0; 2529000,0; 2530800,0; 2532600,6; 2534400,45;
              2536200,57; 2538000,119; 2539800,23; 2541600,30; 2543400,63;
              2545200,84; 2547000,103; 2548800,75; 2550600,160; 2552400,218;
              2554200,158; 2556000,182; 2557800,136; 2559600,93; 2561400,48;
              2563200,40; 2565000,30; 2566800,82; 2568600,41; 2570400,0;
              2572200,0; 2574000,0; 2575800,0; 2577600,0; 2579400,0; 2581200,0;
              2583000,0; 2584800,0; 2586600,0; 2588400,0; 2590200,0; 2592000,0;
              2593800,0; 2595600,0; 2597400,0; 2599200,0; 2601000,0; 2602800,0;
              2604600,0; 2606400,0; 2608200,0; 2610000,0; 2611800,0; 2613600,0;
              2615400,0; 2617200,0; 2619000,3; 2620800,28; 2622600,43; 2624400,
              91; 2626200,48; 2628000,86; 2629800,253; 2631600,37; 2633400,18;
              2635200,162; 2637000,42; 2638800,104; 2640600,147; 2642400,306;
              2644200,170; 2646000,140; 2647800,142; 2649600,125; 2651400,125;
              2653200,83; 2655000,42; 2656800,0; 2658600,0; 2660400,0; 2662200,
              0; 2664000,0; 2665800,0; 2667600,0; 2669400,0; 2671200,0; 2673000,
              0; 2674800,0; 2676600,0; 2678400,0])
          annotation (Placement(transformation(extent={{-120,88},{-100,108}})));
        Modelica.Blocks.Sources.CombiTimeTable HDirNor(table=[0,0; 1800,0; 3600,
              0; 5400,0; 7200,0; 9000,0; 10800,0; 12600,0; 14400,0; 16200,0;
              18000,0; 19800,0; 21600,0; 23400,0; 25200,0; 27000,0; 28800,0;
              30600,0; 32400,0; 34200,0; 36000,0; 37800,95; 39600,0; 41400,0;
              43200,84; 45000,0; 46800,0; 48600,0; 50400,126; 52200,0; 54000,60;
              55800,0; 57600,0; 59400,10; 61200,0; 63000,0; 64800,0; 66600,0;
              68400,0; 70200,0; 72000,0; 73800,0; 75600,0; 77400,0; 79200,0;
              81000,0; 82800,0; 84600,0; 86400,0; 88200,0; 90000,0; 91800,0;
              93600,0; 95400,0; 97200,0; 99000,0; 100800,0; 102600,0; 104400,0;
              106200,0; 108000,0; 109800,0; 111600,0; 113400,0; 115200,320;
              117000,525; 118800,644; 120600,152; 122400,771; 124200,398;
              126000,833; 127800,590; 129600,320; 131400,578; 133200,301;
              135000,295; 136800,2; 138600,134; 140400,147; 142200,0; 144000,
              194; 145800,0; 147600,0; 149400,0; 151200,0; 153000,0; 154800,0;
              156600,0; 158400,0; 160200,0; 162000,0; 163800,0; 165600,0;
              167400,0; 169200,0; 171000,0; 172800,0; 174600,0; 176400,0;
              178200,0; 180000,0; 181800,0; 183600,0; 185400,0; 187200,0;
              189000,0; 190800,0; 192600,0; 194400,0; 196200,0; 198000,0;
              199800,0; 201600,79; 203400,0; 205200,517; 207000,597; 208800,852;
              210600,890; 212400,916; 214200,933; 216000,944; 217800,460;
              219600,204; 221400,133; 223200,131; 225000,546; 226800,89; 228600,
              115; 230400,117; 232200,44; 234000,8; 235800,0; 237600,0; 239400,
              0; 241200,0; 243000,0; 244800,0; 246600,0; 248400,0; 250200,0;
              252000,0; 253800,0; 255600,0; 257400,0; 259200,0; 261000,0;
              262800,0; 264600,0; 266400,0; 268200,0; 270000,0; 271800,0;
              273600,0; 275400,0; 277200,0; 279000,0; 280800,0; 282600,0;
              284400,0; 286200,0; 288000,217; 289800,0; 291600,0; 293400,13;
              295200,0; 297000,54; 298800,130; 300600,40; 302400,0; 304200,0;
              306000,0; 307800,0; 309600,8; 311400,8; 313200,0; 315000,0;
              316800,0; 318600,0; 320400,0; 322200,0; 324000,0; 325800,0;
              327600,0; 329400,0; 331200,0; 333000,0; 334800,0; 336600,0;
              338400,0; 340200,0; 342000,0; 343800,0; 345600,0; 347400,0;
              349200,0; 351000,0; 352800,0; 354600,0; 356400,0; 358200,0;
              360000,0; 361800,0; 363600,0; 365400,0; 367200,0; 369000,0;
              370800,0; 372600,0; 374400,316; 376200,526; 378000,647; 379800,
              725; 381600,779; 383400,816; 385200,843; 387000,860; 388800,870;
              390600,874; 392400,873; 394200,866; 396000,853; 397800,833;
              399600,803; 401400,761; 403200,702; 405000,617; 406800,520;
              408600,0; 410400,0; 412200,0; 414000,0; 415800,0; 417600,0;
              419400,0; 421200,0; 423000,0; 424800,0; 426600,0; 428400,0;
              430200,0; 432000,0; 433800,0; 435600,0; 437400,0; 439200,0;
              441000,0; 442800,0; 444600,0; 446400,0; 448200,0; 450000,0;
              451800,0; 453600,0; 455400,0; 457200,0; 459000,0; 460800,323;
              462600,534; 464400,654; 466200,731; 468000,782; 469800,186;
              471600,4; 473400,0; 475200,0; 477000,0; 478800,0; 480600,64;
              482400,31; 484200,58; 486000,54; 487800,55; 489600,0; 491400,0;
              493200,0; 495000,0; 496800,0; 498600,0; 500400,0; 502200,0;
              504000,0; 505800,0; 507600,0; 509400,0; 511200,0; 513000,0;
              514800,0; 516600,0; 518400,0; 520200,0; 522000,0; 523800,0;
              525600,0; 527400,0; 529200,0; 531000,0; 532800,0; 534600,0;
              536400,0; 538200,0; 540000,0; 541800,0; 543600,0; 545400,0;
              547200,351; 549000,0; 550800,700; 552600,544; 554400,833; 556200,
              871; 558000,897; 559800,915; 561600,925; 563400,929; 565200,241;
              567000,613; 568800,167; 570600,642; 572400,113; 574200,448;
              576000,56; 577800,634; 579600,587; 581400,0; 583200,0; 585000,0;
              586800,0; 588600,0; 590400,0; 592200,0; 594000,0; 595800,0;
              597600,0; 599400,0; 601200,0; 603000,0; 604800,0; 606600,0;
              608400,0; 610200,0; 612000,0; 613800,0; 615600,0; 617400,0;
              619200,0; 621000,0; 622800,0; 624600,0; 626400,0; 628200,0;
              630000,0; 631800,0; 633600,40; 635400,125; 637200,27; 639000,0;
              640800,0; 642600,0; 644400,0; 646200,153; 648000,10; 649800,41;
              651600,187; 653400,101; 655200,0; 657000,236; 658800,294; 660600,
              209; 662400,0; 664200,486; 666000,394; 667800,0; 669600,0; 671400,
              0; 673200,0; 675000,0; 676800,0; 678600,0; 680400,0; 682200,0;
              684000,0; 685800,0; 687600,0; 689400,0; 691200,0; 693000,0;
              694800,0; 696600,0; 698400,0; 700200,0; 702000,0; 703800,0;
              705600,0; 707400,0; 709200,0; 711000,0; 712800,0; 714600,0;
              716400,0; 718200,0; 720000,303; 721800,511; 723600,12; 725400,81;
              727200,0; 729000,215; 730800,47; 732600,45; 734400,15; 736200,13;
              738000,25; 739800,15; 741600,16; 743400,39; 745200,786; 747000,
              152; 748800,0; 750600,0; 752400,0; 754200,0; 756000,0; 757800,0;
              759600,0; 761400,0; 763200,0; 765000,0; 766800,0; 768600,0;
              770400,0; 772200,0; 774000,0; 775800,0; 777600,0; 779400,0;
              781200,0; 783000,0; 784800,0; 786600,0; 788400,0; 790200,0;
              792000,0; 793800,0; 795600,0; 797400,0; 799200,0; 801000,0;
              802800,0; 804600,0; 806400,303; 808200,511; 810000,452; 811800,
              538; 813600,493; 815400,390; 817200,359; 819000,329; 820800,567;
              822600,326; 824400,294; 826200,156; 828000,34; 829800,119; 831600,
              404; 833400,515; 835200,499; 837000,0; 838800,502; 840600,0;
              842400,0; 844200,0; 846000,0; 847800,0; 849600,0; 851400,0;
              853200,0; 855000,0; 856800,0; 858600,0; 860400,0; 862200,0;
              864000,0; 865800,0; 867600,0; 869400,0; 871200,0; 873000,0;
              874800,0; 876600,0; 878400,0; 880200,0; 882000,0; 883800,0;
              885600,0; 887400,0; 889200,0; 891000,0; 892800,314; 894600,527;
              896400,195; 898200,728; 900000,782; 901800,819; 903600,241;
              905400,861; 907200,871; 909000,874; 910800,872; 912600,863;
              914400,175; 916200,827; 918000,796; 919800,754; 921600,695;
              923400,612; 925200,507; 927000,0; 928800,0; 930600,0; 932400,0;
              934200,0; 936000,0; 937800,0; 939600,0; 941400,0; 943200,0;
              945000,0; 946800,0; 948600,0; 950400,0; 952200,0; 954000,0;
              955800,0; 957600,0; 959400,0; 961200,0; 963000,0; 964800,0;
              966600,0; 968400,0; 970200,0; 972000,0; 973800,0; 975600,0;
              977400,0; 979200,356; 981000,586; 982800,715; 984600,797; 986400,
              853; 988200,892; 990000,919; 991800,938; 993600,949; 995400,955;
              997200,954; 999000,948; 1000800,935; 1002600,916; 1004400,888;
              1006200,280; 1008000,792; 1009800,714; 1011600,619; 1013400,431;
              1015200,0; 1017000,0; 1018800,0; 1020600,0; 1022400,0; 1024200,0;
              1026000,0; 1027800,0; 1029600,0; 1031400,0; 1033200,0; 1035000,0;
              1036800,0; 1038600,0; 1040400,0; 1042200,0; 1044000,0; 1045800,0;
              1047600,0; 1049400,0; 1051200,0; 1053000,0; 1054800,0; 1056600,0;
              1058400,0; 1060200,0; 1062000,0; 1063800,0; 1065600,340; 1067400,
              157; 1069200,332; 1071000,386; 1072800,320; 1074600,319; 1076400,
              870; 1078200,362; 1080000,894; 1081800,633; 1083600,333; 1085400,
              342; 1087200,866; 1089000,843; 1090800,445; 1092600,54; 1094400,
              280; 1096200,1; 1098000,0; 1099800,0; 1101600,0; 1103400,0;
              1105200,0; 1107000,0; 1108800,0; 1110600,0; 1112400,0; 1114200,0;
              1116000,0; 1117800,0; 1119600,0; 1121400,0; 1123200,0; 1125000,0;
              1126800,0; 1128600,0; 1130400,0; 1132200,0; 1134000,0; 1135800,0;
              1137600,0; 1139400,0; 1141200,0; 1143000,0; 1144800,0; 1146600,0;
              1148400,0; 1150200,0; 1152000,0; 1153800,0; 1155600,0; 1157400,0;
              1159200,62; 1161000,3; 1162800,2; 1164600,18; 1166400,0; 1168200,
              0; 1170000,0; 1171800,8; 1173600,0; 1175400,0; 1177200,0; 1179000,
              277; 1180800,0; 1182600,9; 1184400,0; 1186200,0; 1188000,0;
              1189800,0; 1191600,0; 1193400,0; 1195200,0; 1197000,0; 1198800,0;
              1200600,0; 1202400,0; 1204200,0; 1206000,0; 1207800,0; 1209600,0;
              1211400,0; 1213200,0; 1215000,0; 1216800,0; 1218600,0; 1220400,0;
              1222200,0; 1224000,0; 1225800,0; 1227600,0; 1229400,0; 1231200,0;
              1233000,0; 1234800,0; 1236600,0; 1238400,361; 1240200,581;
              1242000,344; 1243800,266; 1245600,71; 1247400,57; 1249200,151;
              1251000,149; 1252800,256; 1254600,416; 1256400,79; 1258200,341;
              1260000,587; 1261800,324; 1263600,391; 1265400,16; 1267200,0;
              1269000,220; 1270800,165; 1272600,0; 1274400,0; 1276200,0;
              1278000,0; 1279800,0; 1281600,0; 1283400,0; 1285200,0; 1287000,0;
              1288800,0; 1290600,0; 1292400,0; 1294200,0; 1296000,0; 1297800,0;
              1299600,0; 1301400,0; 1303200,0; 1305000,0; 1306800,0; 1308600,0;
              1310400,0; 1312200,0; 1314000,0; 1315800,0; 1317600,0; 1319400,0;
              1321200,0; 1323000,0; 1324800,366; 1326600,593; 1328400,718;
              1330200,797; 1332000,850; 1333800,888; 1335600,914; 1337400,931;
              1339200,942; 1341000,947; 1342800,947; 1344600,941; 1346400,929;
              1348200,910; 1350000,884; 1351800,846; 1353600,794; 1355400,719;
              1357200,624; 1359000,400; 1360800,0; 1362600,0; 1364400,0;
              1366200,0; 1368000,0; 1369800,0; 1371600,0; 1373400,0; 1375200,0;
              1377000,0; 1378800,0; 1380600,0; 1382400,0; 1384200,0; 1386000,0;
              1387800,0; 1389600,0; 1391400,0; 1393200,0; 1395000,0; 1396800,0;
              1398600,0; 1400400,0; 1402200,0; 1404000,0; 1405800,0; 1407600,0;
              1409400,0; 1411200,60; 1413000,395; 1414800,555; 1416600,497;
              1418400,479; 1420200,639; 1422000,495; 1423800,479; 1425600,483;
              1427400,543; 1429200,521; 1431000,517; 1432800,916; 1434600,897;
              1436400,870; 1438200,832; 1440000,778; 1441800,703; 1443600,605;
              1445400,0; 1447200,0; 1449000,0; 1450800,0; 1452600,0; 1454400,0;
              1456200,0; 1458000,0; 1459800,0; 1461600,0; 1463400,0; 1465200,0;
              1467000,0; 1468800,0; 1470600,0; 1472400,0; 1474200,0; 1476000,0;
              1477800,0; 1479600,0; 1481400,0; 1483200,0; 1485000,0; 1486800,0;
              1488600,0; 1490400,0; 1492200,0; 1494000,0; 1495800,0; 1497600,
              361; 1499400,585; 1501200,712; 1503000,793; 1504800,849; 1506600,
              889; 1508400,917; 1510200,937; 1512000,949; 1513800,956; 1515600,
              956; 1517400,951; 1519200,940; 1521000,921; 1522800,895; 1524600,
              857; 1526400,805; 1528200,732; 1530000,637; 1531800,412; 1533600,
              0; 1535400,0; 1537200,0; 1539000,0; 1540800,0; 1542600,0; 1544400,
              0; 1546200,0; 1548000,0; 1549800,0; 1551600,0; 1553400,0; 1555200,
              0; 1557000,0; 1558800,0; 1560600,0; 1562400,0; 1564200,0; 1566000,
              0; 1567800,0; 1569600,0; 1571400,0; 1573200,0; 1575000,0; 1576800,
              0; 1578600,0; 1580400,0; 1582200,0; 1584000,359; 1585800,577;
              1587600,698; 1589400,775; 1591200,826; 1593000,863; 1594800,888;
              1596600,905; 1598400,161; 1600200,2; 1602000,79; 1603800,0;
              1605600,0; 1607400,0; 1609200,0; 1611000,0; 1612800,160; 1614600,
              0; 1616400,583; 1618200,0; 1620000,0; 1621800,0; 1623600,0;
              1625400,0; 1627200,0; 1629000,0; 1630800,0; 1632600,0; 1634400,0;
              1636200,0; 1638000,0; 1639800,0; 1641600,0; 1643400,0; 1645200,0;
              1647000,0; 1648800,0; 1650600,0; 1652400,0; 1654200,0; 1656000,0;
              1657800,0; 1659600,0; 1661400,0; 1663200,0; 1665000,0; 1666800,0;
              1668600,0; 1670400,358; 1672200,577; 1674000,701; 1675800,780;
              1677600,834; 1679400,871; 1681200,896; 1683000,913; 1684800,923;
              1686600,927; 1688400,926; 1690200,920; 1692000,907; 1693800,888;
              1695600,861; 1697400,470; 1699200,405; 1701000,90; 1702800,567;
              1704600,0; 1706400,0; 1708200,0; 1710000,0; 1711800,0; 1713600,0;
              1715400,0; 1717200,0; 1719000,0; 1720800,0; 1722600,0; 1724400,0;
              1726200,0; 1728000,0; 1729800,0; 1731600,0; 1733400,0; 1735200,0;
              1737000,0; 1738800,0; 1740600,0; 1742400,0; 1744200,0; 1746000,0;
              1747800,0; 1749600,0; 1751400,0; 1753200,0; 1755000,0; 1756800,
              343; 1758600,552; 1760400,671; 1762200,747; 1764000,798; 1765800,
              835; 1767600,861; 1769400,879; 1771200,890; 1773000,895; 1774800,
              0; 1776600,890; 1778400,879; 1780200,863; 1782000,838; 1783800,
              803; 1785600,753; 1787400,322; 1789200,0; 1791000,0; 1792800,0;
              1794600,0; 1796400,0; 1798200,0; 1800000,0; 1801800,0; 1803600,0;
              1805400,0; 1807200,0; 1809000,0; 1810800,0; 1812600,0; 1814400,0;
              1816200,0; 1818000,0; 1819800,0; 1821600,0; 1823400,0; 1825200,0;
              1827000,0; 1828800,0; 1830600,0; 1832400,0; 1834200,0; 1836000,0;
              1837800,0; 1839600,0; 1841400,0; 1843200,378; 1845000,597;
              1846800,720; 1848600,799; 1850400,852; 1852200,890; 1854000,917;
              1855800,936; 1857600,948; 1859400,954; 1861200,954; 1863000,949;
              1864800,937; 1866600,919; 1868400,893; 1870200,856; 1872000,804;
              1873800,732; 1875600,637; 1877400,414; 1879200,0; 1881000,0;
              1882800,0; 1884600,0; 1886400,0; 1888200,0; 1890000,0; 1891800,0;
              1893600,0; 1895400,0; 1897200,0; 1899000,0; 1900800,0; 1902600,0;
              1904400,0; 1906200,0; 1908000,0; 1909800,0; 1911600,0; 1913400,0;
              1915200,0; 1917000,0; 1918800,0; 1920600,0; 1922400,0; 1924200,0;
              1926000,0; 1927800,52; 1929600,380; 1931400,598; 1933200,721;
              1935000,800; 1936800,854; 1938600,892; 1940400,919; 1942200,937;
              1944000,949; 1945800,954; 1947600,954; 1949400,948; 1951200,936;
              1953000,918; 1954800,891; 1956600,854; 1958400,803; 1960200,732;
              1962000,637; 1963800,416; 1965600,0; 1967400,0; 1969200,0;
              1971000,0; 1972800,0; 1974600,0; 1976400,0; 1978200,0; 1980000,0;
              1981800,0; 1983600,0; 1985400,0; 1987200,0; 1989000,0; 1990800,0;
              1992600,0; 1994400,0; 1996200,0; 1998000,0; 1999800,0; 2001600,0;
              2003400,0; 2005200,0; 2007000,0; 2008800,0; 2010600,0; 2012400,0;
              2014200,0; 2016000,17; 2017800,235; 2019600,0; 2021400,93;
              2023200,238; 2025000,472; 2026800,889; 2028600,265; 2030400,610;
              2032200,571; 2034000,920; 2035800,914; 2037600,902; 2039400,884;
              2041200,858; 2043000,821; 2044800,771; 2046600,49; 2048400,47;
              2050200,386; 2052000,0; 2053800,0; 2055600,0; 2057400,0; 2059200,
              0; 2061000,0; 2062800,0; 2064600,0; 2066400,0; 2068200,0; 2070000,
              0; 2071800,0; 2073600,0; 2075400,0; 2077200,0; 2079000,0; 2080800,
              0; 2082600,0; 2084400,0; 2086200,0; 2088000,0; 2089800,0; 2091600,
              0; 2093400,0; 2095200,0; 2097000,0; 2098800,0; 2100600,58;
              2102400,361; 2104200,50; 2106000,96; 2107800,182; 2109600,58;
              2111400,28; 2113200,227; 2115000,194; 2116800,189; 2118600,444;
              2120400,917; 2122200,911; 2124000,900; 2125800,883; 2127600,857;
              2129400,821; 2131200,770; 2133000,699; 2134800,602; 2136600,387;
              2138400,0; 2140200,0; 2142000,0; 2143800,0; 2145600,0; 2147400,0;
              2149200,0; 2151000,0; 2152800,0; 2154600,0; 2156400,0; 2158200,0;
              2160000,0; 2161800,0; 2163600,0; 2165400,0; 2167200,0; 2169000,0;
              2170800,0; 2172600,0; 2174400,0; 2176200,0; 2178000,0; 2179800,0;
              2181600,0; 2183400,0; 2185200,0; 2187000,0; 2188800,0; 2190600,0;
              2192400,0; 2194200,91; 2196000,0; 2197800,0; 2199600,70; 2201400,
              13; 2203200,13; 2205000,24; 2206800,169; 2208600,168; 2210400,34;
              2212200,0; 2214000,0; 2215800,0; 2217600,0; 2219400,0; 2221200,17;
              2223000,0; 2224800,0; 2226600,0; 2228400,0; 2230200,0; 2232000,0;
              2233800,0; 2235600,0; 2237400,0; 2239200,0; 2241000,0; 2242800,0;
              2244600,0; 2246400,0; 2248200,0; 2250000,0; 2251800,0; 2253600,0;
              2255400,0; 2257200,0; 2259000,0; 2260800,0; 2262600,0; 2264400,0;
              2266200,0; 2268000,0; 2269800,0; 2271600,0; 2273400,66; 2275200,
              352; 2277000,551; 2278800,666; 2280600,0; 2282400,792; 2284200,24;
              2286000,161; 2287800,5; 2289600,11; 2291400,1; 2293200,6; 2295000,
              2; 2296800,0; 2298600,0; 2300400,0; 2302200,0; 2304000,0; 2305800,
              0; 2307600,580; 2309400,371; 2311200,0; 2313000,0; 2314800,0;
              2316600,0; 2318400,0; 2320200,0; 2322000,0; 2323800,0; 2325600,0;
              2327400,0; 2329200,0; 2331000,0; 2332800,0; 2334600,0; 2336400,0;
              2338200,0; 2340000,0; 2341800,0; 2343600,0; 2345400,0; 2347200,0;
              2349000,0; 2350800,0; 2352600,0; 2354400,0; 2356200,0; 2358000,0;
              2359800,73; 2361600,357; 2363400,555; 2365200,670; 2367000,745;
              2368800,797; 2370600,833; 2372400,858; 2374200,875; 2376000,885;
              2377800,890; 2379600,889; 2381400,882; 2383200,870; 2385000,851;
              2386800,825; 2388600,163; 2390400,222; 2392200,667; 2394000,226;
              2395800,112; 2397600,0; 2399400,0; 2401200,0; 2403000,0; 2404800,
              0; 2406600,0; 2408400,0; 2410200,0; 2412000,0; 2413800,0; 2415600,
              0; 2417400,0; 2419200,0; 2421000,0; 2422800,0; 2424600,0; 2426400,
              0; 2428200,0; 2430000,0; 2431800,0; 2433600,0; 2435400,0; 2437200,
              0; 2439000,0; 2440800,0; 2442600,0; 2444400,0; 2446200,0; 2448000,
              0; 2449800,0; 2451600,0; 2453400,0; 2455200,4; 2457000,14;
              2458800,17; 2460600,1; 2462400,45; 2464200,14; 2466000,27;
              2467800,10; 2469600,0; 2471400,0; 2473200,0; 2475000,0; 2476800,1;
              2478600,0; 2480400,57; 2482200,0; 2484000,0; 2485800,0; 2487600,0;
              2489400,0; 2491200,0; 2493000,0; 2494800,0; 2496600,0; 2498400,0;
              2500200,0; 2502000,0; 2503800,0; 2505600,0; 2507400,0; 2509200,0;
              2511000,0; 2512800,0; 2514600,0; 2516400,0; 2518200,0; 2520000,0;
              2521800,0; 2523600,0; 2525400,0; 2527200,0; 2529000,0; 2530800,0;
              2532600,0; 2534400,30; 2536200,0; 2538000,13; 2539800,0; 2541600,
              0; 2543400,0; 2545200,0; 2547000,0; 2548800,0; 2550600,0; 2552400,
              7; 2554200,0; 2556000,1; 2557800,0; 2559600,0; 2561400,0; 2563200,
              0; 2565000,0; 2566800,0; 2568600,0; 2570400,0; 2572200,0; 2574000,
              0; 2575800,0; 2577600,0; 2579400,0; 2581200,0; 2583000,0; 2584800,
              0; 2586600,0; 2588400,0; 2590200,0; 2592000,0; 2593800,0; 2595600,
              0; 2597400,0; 2599200,0; 2601000,0; 2602800,0; 2604600,0; 2606400,
              0; 2608200,0; 2610000,0; 2611800,0; 2613600,0; 2615400,0; 2617200,
              0; 2619000,0; 2620800,0; 2622600,0; 2624400,0; 2626200,0; 2628000,
              0; 2629800,70; 2631600,0; 2633400,0; 2635200,0; 2637000,0;
              2638800,0; 2640600,0; 2642400,78; 2644200,0; 2646000,0; 2647800,0;
              2649600,0; 2651400,9; 2653200,0; 2655000,0; 2656800,0; 2658600,0;
              2660400,0; 2662200,0; 2664000,0; 2665800,0; 2667600,0; 2669400,0;
              2671200,0; 2673000,0; 2674800,0; 2676600,0; 2678400,0])
          "Direct normall radiation"
          annotation (Placement(transformation(extent={{-120,34},{-100,54}})));
        Modelica.Blocks.Sources.CombiTimeTable
                                         HGloHor(table=[0,0; 1800,0; 3600,0;
              5400,0; 7200,0; 9000,0; 10800,0; 12600,0; 14400,0; 16200,0; 18000,
              0; 19800,0; 21600,0; 23400,0; 25200,0; 27000,0; 28800,2; 30600,11;
              32400,29; 34200,21; 36000,16; 37800,283; 39600,68; 41400,164;
              43200,343; 45000,117; 46800,84; 48600,146; 50400,343; 52200,116;
              54000,232; 55800,102; 57600,92; 59400,95; 61200,52; 63000,0;
              64800,0; 66600,0; 68400,0; 70200,0; 72000,0; 73800,0; 75600,0;
              77400,0; 79200,0; 81000,0; 82800,0; 84600,0; 86400,0; 88200,0;
              90000,0; 91800,0; 93600,0; 95400,0; 97200,0; 99000,0; 100800,0;
              102600,0; 104400,0; 106200,0; 108000,0; 109800,0; 111600,0;
              113400,0; 115200,75; 117000,167; 118800,262; 120600,224; 122400,
              434; 124200,411; 126000,563; 127800,544; 129600,483; 131400,574;
              133200,478; 135000,458; 136800,187; 138600,318; 140400,285;
              142200,107; 144000,200; 145800,6; 147600,3; 149400,0; 151200,0;
              153000,0; 154800,0; 156600,0; 158400,0; 160200,0; 162000,0;
              163800,0; 165600,0; 167400,0; 169200,0; 171000,0; 172800,0;
              174600,0; 176400,0; 178200,0; 180000,0; 181800,0; 183600,0;
              185400,0; 187200,0; 189000,0; 190800,0; 192600,0; 194400,0;
              196200,0; 198000,0; 199800,0; 201600,49; 203400,37; 205200,241;
              207000,330; 208800,475; 210600,552; 212400,615; 214200,662;
              216000,691; 217800,545; 219600,431; 221400,374; 223200,351;
              225000,468; 226800,254; 228600,226; 230400,179; 232200,109;
              234000,61; 235800,0; 237600,0; 239400,0; 241200,0; 243000,0;
              244800,0; 246600,0; 248400,0; 250200,0; 252000,0; 253800,0;
              255600,0; 257400,0; 259200,0; 261000,0; 262800,0; 264600,0;
              266400,0; 268200,0; 270000,0; 271800,0; 273600,0; 275400,0;
              277200,0; 279000,0; 280800,0; 282600,0; 284400,0; 286200,0;
              288000,64; 289800,69; 291600,47; 293400,145; 295200,122; 297000,
              250; 298800,340; 300600,280; 302400,123; 304200,145; 306000,158;
              307800,149; 309600,205; 311400,194; 313200,96; 315000,77; 316800,
              66; 318600,62; 320400,34; 322200,0; 324000,0; 325800,0; 327600,0;
              329400,0; 331200,0; 333000,0; 334800,0; 336600,0; 338400,0;
              340200,0; 342000,0; 343800,0; 345600,0; 347400,0; 349200,0;
              351000,0; 352800,0; 354600,0; 356400,0; 358200,0; 360000,0;
              361800,0; 363600,0; 365400,0; 367200,0; 369000,0; 370800,0;
              372600,0; 374400,74; 376200,167; 378000,263; 379800,355; 381600,
              439; 383400,511; 385200,571; 387000,615; 388800,644; 390600,656;
              392400,651; 394200,630; 396000,593; 397800,540; 399600,474;
              401400,395; 403200,307; 405000,213; 406800,120; 408600,0; 410400,
              0; 412200,0; 414000,0; 415800,0; 417600,0; 419400,0; 421200,0;
              423000,0; 424800,0; 426600,0; 428400,0; 430200,0; 432000,0;
              433800,0; 435600,0; 437400,0; 439200,0; 441000,0; 442800,0;
              444600,0; 446400,0; 448200,0; 450000,0; 451800,0; 453600,0;
              455400,0; 457200,0; 459000,0; 460800,75; 462600,168; 464400,265;
              466200,357; 468000,440; 469800,335; 471600,181; 473400,85; 475200,
              88; 477000,90; 478800,138; 480600,318; 482400,257; 484200,267;
              486000,235; 487800,198; 489600,115; 491400,70; 493200,40; 495000,
              0; 496800,0; 498600,0; 500400,0; 502200,0; 504000,0; 505800,0;
              507600,0; 509400,0; 511200,0; 513000,0; 514800,0; 516600,0;
              518400,0; 520200,0; 522000,0; 523800,0; 525600,0; 527400,0;
              529200,0; 531000,0; 532800,0; 534600,0; 536400,0; 538200,0;
              540000,0; 541800,0; 543600,0; 545400,0; 547200,80; 549000,49;
              550800,281; 552600,321; 554400,467; 556200,544; 558000,607;
              559800,654; 561600,684; 563400,697; 565200,456; 567000,567;
              568800,377; 570600,496; 572400,274; 574200,332; 576000,160;
              577800,216; 579600,136; 581400,0; 583200,0; 585000,0; 586800,0;
              588600,0; 590400,0; 592200,0; 594000,0; 595800,0; 597600,0;
              599400,0; 601200,0; 603000,0; 604800,0; 606600,0; 608400,0;
              610200,0; 612000,0; 613800,0; 615600,0; 617400,0; 619200,0;
              621000,0; 622800,0; 624600,0; 626400,0; 628200,0; 630000,0;
              631800,0; 633600,43; 635400,107; 637200,122; 639000,36; 640800,17;
              642600,159; 644400,114; 646200,384; 648000,222; 649800,300;
              651600,428; 653400,356; 655200,164; 657000,377; 658800,352;
              660600,270; 662400,92; 664200,198; 666000,114; 667800,0; 669600,0;
              671400,0; 673200,0; 675000,0; 676800,0; 678600,0; 680400,0;
              682200,0; 684000,0; 685800,0; 687600,0; 689400,0; 691200,0;
              693000,0; 694800,0; 696600,0; 698400,0; 700200,0; 702000,0;
              703800,0; 705600,0; 707400,0; 709200,0; 711000,0; 712800,0;
              714600,0; 716400,0; 718200,0; 720000,71; 721800,163; 723600,112;
              725400,194; 727200,121; 729000,350; 730800,271; 732600,289;
              734400,238; 736200,237; 738000,270; 739800,239; 741600,231;
              743400,250; 745200,473; 747000,251; 748800,128; 750600,65; 752400,
              37; 754200,0; 756000,0; 757800,0; 759600,0; 761400,0; 763200,0;
              765000,0; 766800,0; 768600,0; 770400,0; 772200,0; 774000,0;
              775800,0; 777600,0; 779400,0; 781200,0; 783000,0; 784800,0;
              786600,0; 788400,0; 790200,0; 792000,0; 793800,0; 795600,0;
              797400,0; 799200,0; 801000,0; 802800,0; 804600,0; 806400,71;
              808200,163; 810000,231; 811800,322; 813600,382; 815400,414;
              817200,450; 819000,473; 820800,572; 822600,504; 824400,487;
              826200,399; 828000,267; 829800,321; 831600,391; 833400,355;
              835200,280; 837000,84; 838800,127; 840600,66; 842400,0; 844200,0;
              846000,0; 847800,0; 849600,0; 851400,0; 853200,0; 855000,0;
              856800,0; 858600,0; 860400,0; 862200,0; 864000,0; 865800,0;
              867600,0; 869400,0; 871200,0; 873000,0; 874800,0; 876600,0;
              878400,0; 880200,0; 882000,0; 883800,0; 885600,0; 887400,0;
              889200,0; 891000,0; 892800,74; 894600,167; 896400,181; 898200,358;
              900000,444; 901800,518; 903600,405; 905400,624; 907200,653;
              909000,666; 910800,661; 912600,640; 914400,389; 916200,550;
              918000,483; 919800,405; 921600,317; 923400,224; 925200,130;
              927000,65; 928800,0; 930600,0; 932400,0; 934200,0; 936000,0;
              937800,0; 939600,0; 941400,0; 943200,0; 945000,0; 946800,0;
              948600,0; 950400,0; 952200,0; 954000,0; 955800,0; 957600,0;
              959400,0; 961200,0; 963000,0; 964800,0; 966600,0; 968400,0;
              970200,0; 972000,0; 973800,0; 975600,0; 977400,0; 979200,81;
              981000,183; 982800,288; 984600,389; 986400,481; 988200,560;
              990000,626; 991800,676; 993600,709; 995400,724; 997200,721;
              999000,700; 1000800,661; 1002600,606; 1004400,536; 1006200,301;
              1008000,358; 1009800,256; 1011600,154; 1013400,76; 1015200,0;
              1017000,0; 1018800,0; 1020600,0; 1022400,0; 1024200,0; 1026000,0;
              1027800,0; 1029600,0; 1031400,0; 1033200,0; 1035000,0; 1036800,0;
              1038600,0; 1040400,0; 1042200,0; 1044000,0; 1045800,0; 1047600,0;
              1049400,0; 1051200,0; 1053000,0; 1054800,0; 1056600,0; 1058400,0;
              1060200,0; 1062000,0; 1063800,0; 1065600,78; 1067400,114; 1069200,
              211; 1071000,292; 1072800,339; 1074600,394; 1076400,597; 1078200,
              491; 1080000,672; 1081800,610; 1083600,510; 1085400,498; 1087200,
              619; 1089000,564; 1090800,410; 1092600,207; 1094400,242; 1096200,
              103; 1098000,61; 1099800,28; 1101600,0; 1103400,0; 1105200,0;
              1107000,0; 1108800,0; 1110600,0; 1112400,0; 1114200,0; 1116000,0;
              1117800,0; 1119600,0; 1121400,0; 1123200,0; 1125000,0; 1126800,0;
              1128600,0; 1130400,0; 1132200,0; 1134000,0; 1135800,0; 1137600,0;
              1139400,0; 1141200,0; 1143000,0; 1144800,0; 1146600,0; 1148400,0;
              1150200,0; 1152000,1; 1153800,58; 1155600,40; 1157400,129;
              1159200,227; 1161000,171; 1162800,176; 1164600,241; 1166400,110;
              1168200,115; 1170000,74; 1171800,218; 1173600,130; 1175400,79;
              1177200,119; 1179000,305; 1180800,11; 1182600,108; 1184400,65;
              1186200,30; 1188000,0; 1189800,0; 1191600,0; 1193400,0; 1195200,0;
              1197000,0; 1198800,0; 1200600,0; 1202400,0; 1204200,0; 1206000,0;
              1207800,0; 1209600,0; 1211400,0; 1213200,0; 1215000,0; 1216800,0;
              1218600,0; 1220400,0; 1222200,0; 1224000,0; 1225800,0; 1227600,0;
              1229400,0; 1231200,0; 1233000,0; 1234800,0; 1236600,0; 1238400,83;
              1240200,173; 1242000,215; 1243800,264; 1245600,235; 1247400,259;
              1249200,364; 1251000,391; 1252800,472; 1254600,551; 1256400,358;
              1258200,503; 1260000,549; 1261800,429; 1263600,400; 1265400,176;
              1267200,113; 1269000,170; 1270800,103; 1272600,48; 1274400,0;
              1276200,0; 1278000,0; 1279800,0; 1281600,0; 1283400,0; 1285200,0;
              1287000,0; 1288800,0; 1290600,0; 1292400,0; 1294200,0; 1296000,0;
              1297800,0; 1299600,0; 1301400,0; 1303200,0; 1305000,0; 1306800,0;
              1308600,0; 1310400,0; 1312200,0; 1314000,0; 1315800,0; 1317600,0;
              1319400,0; 1321200,0; 1323000,0; 1324800,84; 1326600,186; 1328400,
              292; 1330200,392; 1332000,484; 1333800,564; 1335600,629; 1337400,
              679; 1339200,712; 1341000,728; 1342800,725; 1344600,705; 1346400,
              668; 1348200,614; 1350000,545; 1351800,462; 1353600,369; 1355400,
              268; 1357200,165; 1359000,78; 1360800,0; 1362600,0; 1364400,0;
              1366200,0; 1368000,0; 1369800,0; 1371600,0; 1373400,0; 1375200,0;
              1377000,0; 1378800,0; 1380600,0; 1382400,0; 1384200,0; 1386000,0;
              1387800,0; 1389600,0; 1391400,0; 1393200,0; 1395000,0; 1396800,0;
              1398600,0; 1400400,0; 1402200,0; 1404000,0; 1405800,0; 1407600,0;
              1409400,0; 1411200,47; 1413000,152; 1414800,252; 1416600,320;
              1418400,387; 1420200,484; 1422000,503; 1423800,538; 1425600,564;
              1427400,592; 1429200,584; 1431000,567; 1432800,662; 1434600,609;
              1436400,540; 1438200,458; 1440000,365; 1441800,265; 1443600,163;
              1445400,76; 1447200,0; 1449000,0; 1450800,0; 1452600,0; 1454400,0;
              1456200,0; 1458000,0; 1459800,0; 1461600,0; 1463400,0; 1465200,0;
              1467000,0; 1468800,0; 1470600,0; 1472400,0; 1474200,0; 1476000,0;
              1477800,0; 1479600,0; 1481400,0; 1483200,0; 1485000,0; 1486800,0;
              1488600,0; 1490400,0; 1492200,0; 1494000,0; 1495800,0; 1497600,83;
              1499400,186; 1501200,292; 1503000,393; 1504800,486; 1506600,568;
              1508400,635; 1510200,687; 1512000,722; 1513800,739; 1515600,738;
              1517400,718; 1519200,681; 1521000,626; 1522800,557; 1524600,473;
              1526400,379; 1528200,277; 1530000,172; 1531800,82; 1533600,0;
              1535400,0; 1537200,0; 1539000,0; 1540800,0; 1542600,0; 1544400,0;
              1546200,0; 1548000,0; 1549800,0; 1551600,0; 1553400,0; 1555200,0;
              1557000,0; 1558800,0; 1560600,0; 1562400,0; 1564200,0; 1566000,0;
              1567800,0; 1569600,0; 1571400,0; 1573200,0; 1575000,0; 1576800,0;
              1578600,0; 1580400,0; 1582200,0; 1584000,83; 1585800,184; 1587600,
              288; 1589400,386; 1591200,476; 1593000,554; 1594800,619; 1596600,
              668; 1598400,426; 1600200,182; 1602000,364; 1603800,172; 1605600,
              107; 1607400,170; 1609200,137; 1611000,158; 1612800,221; 1614600,
              8; 1616400,164; 1618200,76; 1620000,0; 1621800,0; 1623600,0;
              1625400,0; 1627200,0; 1629000,0; 1630800,0; 1632600,0; 1634400,0;
              1636200,0; 1638000,0; 1639800,0; 1641600,0; 1643400,0; 1645200,0;
              1647000,0; 1648800,0; 1650600,0; 1652400,0; 1654200,0; 1656000,0;
              1657800,0; 1659600,0; 1661400,0; 1663200,0; 1665000,0; 1666800,0;
              1668600,0; 1670400,84; 1672200,185; 1674000,290; 1675800,390;
              1677600,482; 1679400,561; 1681200,626; 1683000,676; 1684800,709;
              1686600,724; 1688400,722; 1690200,702; 1692000,665; 1693800,612;
              1695600,544; 1697400,373; 1699200,288; 1701000,147; 1702800,159;
              1704600,75; 1706400,0; 1708200,0; 1710000,0; 1711800,0; 1713600,0;
              1715400,0; 1717200,0; 1719000,0; 1720800,0; 1722600,0; 1724400,0;
              1726200,0; 1728000,0; 1729800,0; 1731600,0; 1733400,0; 1735200,0;
              1737000,0; 1738800,0; 1740600,0; 1742400,0; 1744200,0; 1746000,0;
              1747800,0; 1749600,0; 1751400,0; 1753200,0; 1755000,0; 1756800,81;
              1758600,179; 1760400,280; 1762200,377; 1764000,465; 1765800,542;
              1767600,606; 1769400,655; 1771200,687; 1773000,703; 1774800,174;
              1776600,684; 1778400,649; 1780200,599; 1782000,533; 1783800,455;
              1785600,366; 1787400,203; 1789200,71; 1791000,33; 1792800,0;
              1794600,0; 1796400,0; 1798200,0; 1800000,0; 1801800,0; 1803600,0;
              1805400,0; 1807200,0; 1809000,0; 1810800,0; 1812600,0; 1814400,0;
              1816200,0; 1818000,0; 1819800,0; 1821600,0; 1823400,0; 1825200,0;
              1827000,0; 1828800,0; 1830600,0; 1832400,0; 1834200,0; 1836000,0;
              1837800,0; 1839600,0; 1841400,0; 1843200,88; 1845000,192; 1846800,
              299; 1848600,402; 1850400,495; 1852200,577; 1854000,645; 1855800,
              697; 1857600,732; 1859400,749; 1861200,748; 1863000,729; 1864800,
              692; 1866600,638; 1868400,568; 1870200,485; 1872000,390; 1873800,
              288; 1875600,183; 1877400,88; 1879200,0; 1881000,0; 1882800,0;
              1884600,0; 1886400,0; 1888200,0; 1890000,0; 1891800,0; 1893600,0;
              1895400,0; 1897200,0; 1899000,0; 1900800,0; 1902600,0; 1904400,0;
              1906200,0; 1908000,0; 1909800,0; 1911600,0; 1913400,0; 1915200,0;
              1917000,0; 1918800,0; 1920600,0; 1922400,0; 1924200,0; 1926000,0;
              1927800,8; 1929600,89; 1931400,194; 1933200,301; 1935000,404;
              1936800,498; 1938600,580; 1940400,648; 1942200,700; 1944000,735;
              1945800,753; 1947600,752; 1949400,732; 1951200,694; 1953000,640;
              1954800,571; 1956600,487; 1958400,393; 1960200,291; 1962000,186;
              1963800,90; 1965600,0; 1967400,0; 1969200,0; 1971000,0; 1972800,0;
              1974600,0; 1976400,0; 1978200,0; 1980000,0; 1981800,0; 1983600,0;
              1985400,0; 1987200,0; 1989000,0; 1990800,0; 1992600,0; 1994400,0;
              1996200,0; 1998000,0; 1999800,0; 2001600,0; 2003400,0; 2005200,0;
              2007000,0; 2008800,0; 2010600,0; 2012400,0; 2014200,4; 2016000,42;
              2017800,135; 2019600,80; 2021400,211; 2023200,327; 2025000,460;
              2026800,631; 2028600,472; 2030400,619; 2032200,620; 2034000,730;
              2035800,711; 2037600,674; 2039400,622; 2041200,555; 2043000,474;
              2044800,382; 2046600,139; 2048400,94; 2050200,87; 2052000,0;
              2053800,0; 2055600,0; 2057400,0; 2059200,0; 2061000,0; 2062800,0;
              2064600,0; 2066400,0; 2068200,0; 2070000,0; 2071800,0; 2073600,0;
              2075400,0; 2077200,0; 2079000,0; 2080800,0; 2082600,0; 2084400,0;
              2086200,0; 2088000,0; 2089800,0; 2091600,0; 2093400,0; 2095200,0;
              2097000,0; 2098800,0; 2100600,8; 2102400,87; 2104200,96; 2106000,
              163; 2107800,250; 2109600,235; 2111400,233; 2113200,422; 2115000,
              437; 2116800,456; 2118600,588; 2120400,730; 2122200,712; 2124000,
              676; 2125800,624; 2127600,557; 2129400,476; 2131200,385; 2133000,
              285; 2134800,183; 2136600,89; 2138400,0; 2140200,0; 2142000,0;
              2143800,0; 2145600,0; 2147400,0; 2149200,0; 2151000,0; 2152800,0;
              2154600,0; 2156400,0; 2158200,0; 2160000,0; 2161800,0; 2163600,0;
              2165400,0; 2167200,0; 2169000,0; 2170800,0; 2172600,0; 2174400,0;
              2176200,0; 2178000,0; 2179800,0; 2181600,0; 2183400,0; 2185200,0;
              2187000,0; 2188800,5; 2190600,12; 2192400,99; 2194200,213;
              2196000,146; 2197800,108; 2199600,317; 2201400,236; 2203200,244;
              2205000,288; 2206800,455; 2208600,442; 2210400,288; 2212200,167;
              2214000,78; 2215800,63; 2217600,140; 2219400,76; 2221200,89;
              2223000,43; 2224800,0; 2226600,0; 2228400,0; 2230200,0; 2232000,0;
              2233800,0; 2235600,0; 2237400,0; 2239200,0; 2241000,0; 2242800,0;
              2244600,0; 2246400,0; 2248200,0; 2250000,0; 2251800,0; 2253600,0;
              2255400,0; 2257200,0; 2259000,0; 2260800,0; 2262600,0; 2264400,0;
              2266200,0; 2268000,0; 2269800,0; 2271600,0; 2273400,9; 2275200,87;
              2277000,185; 2278800,287; 2280600,81; 2282400,473; 2284200,229;
              2286000,390; 2287800,197; 2289600,235; 2291400,171; 2293200,215;
              2295000,185; 2296800,136; 2298600,84; 2300400,138; 2302200,139;
              2304000,97; 2305800,96; 2307600,182; 2309400,89; 2311200,0;
              2313000,0; 2314800,0; 2316600,0; 2318400,0; 2320200,0; 2322000,0;
              2323800,0; 2325600,0; 2327400,0; 2329200,0; 2331000,0; 2332800,0;
              2334600,0; 2336400,0; 2338200,0; 2340000,0; 2341800,0; 2343600,0;
              2345400,0; 2347200,0; 2349000,0; 2350800,0; 2352600,0; 2354400,0;
              2356200,0; 2358000,0; 2359800,10; 2361600,88; 2363400,188;
              2365200,290; 2367000,388; 2368800,478; 2370600,557; 2372400,622;
              2374200,671; 2376000,705; 2377800,721; 2379600,719; 2381400,701;
              2383200,665; 2385000,614; 2386800,548; 2388600,297; 2390400,262;
              2392200,282; 2394000,135; 2395800,66; 2397600,0; 2399400,0;
              2401200,0; 2403000,0; 2404800,0; 2406600,0; 2408400,0; 2410200,0;
              2412000,0; 2413800,0; 2415600,0; 2417400,0; 2419200,0; 2421000,0;
              2422800,0; 2424600,0; 2426400,0; 2428200,0; 2430000,0; 2431800,0;
              2433600,0; 2435400,0; 2437200,0; 2439000,0; 2440800,0; 2442600,0;
              2444400,0; 2446200,2; 2448000,18; 2449800,38; 2451600,59; 2453400,
              32; 2455200,163; 2457000,211; 2458800,235; 2460600,171; 2462400,
              328; 2464200,257; 2466000,298; 2467800,234; 2469600,167; 2471400,
              112; 2473200,153; 2475000,69; 2476800,148; 2478600,5; 2480400,104;
              2482200,51; 2484000,0; 2485800,0; 2487600,0; 2489400,0; 2491200,0;
              2493000,0; 2494800,0; 2496600,0; 2498400,0; 2500200,0; 2502000,0;
              2503800,0; 2505600,0; 2507400,0; 2509200,0; 2511000,0; 2512800,0;
              2514600,0; 2516400,0; 2518200,0; 2520000,0; 2521800,0; 2523600,0;
              2525400,0; 2527200,0; 2529000,0; 2530800,0; 2532600,6; 2534400,49;
              2536200,57; 2538000,123; 2539800,23; 2541600,30; 2543400,63;
              2545200,84; 2547000,103; 2548800,75; 2550600,160; 2552400,223;
              2554200,158; 2556000,183; 2557800,136; 2559600,93; 2561400,48;
              2563200,40; 2565000,30; 2566800,82; 2568600,41; 2570400,0;
              2572200,0; 2574000,0; 2575800,0; 2577600,0; 2579400,0; 2581200,0;
              2583000,0; 2584800,0; 2586600,0; 2588400,0; 2590200,0; 2592000,0;
              2593800,0; 2595600,0; 2597400,0; 2599200,0; 2601000,0; 2602800,0;
              2604600,0; 2606400,0; 2608200,0; 2610000,0; 2611800,0; 2613600,0;
              2615400,0; 2617200,0; 2619000,3; 2620800,28; 2622600,43; 2624400,
              91; 2626200,48; 2628000,86; 2629800,293; 2631600,37; 2633400,18;
              2635200,162; 2637000,42; 2638800,104; 2640600,147; 2642400,359;
              2644200,170; 2646000,140; 2647800,142; 2649600,125; 2651400,128;
              2653200,83; 2655000,42; 2656800,0; 2658600,0; 2660400,0; 2662200,
              0; 2664000,0; 2665800,0; 2667600,0; 2669400,0; 2671200,0; 2673000,
              0; 2674800,0; 2676600,0; 2678400,0])
          "Horizontal global radiation"
          annotation (Placement(transformation(extent={{-120,60},{-100,80}})));
        Modelica.Blocks.Math.MultiSum PSol(nu=8, y(unit="W"))
          "Total produced solar power"
          annotation (Placement(transformation(extent={{128,-6},{140,6}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line0(
          l=100,
          P_nominal=5000,
          V_nominal=240)
          annotation (Placement(transformation(extent={{-88,-52},{-68,-32}})));
        Buildings.Electrical.AC.ThreePhasesBalanced.Sensors.Probe
                                             sen1(                     perUnit=true,
            V_nominal=240) "Voltage probe"
          annotation (Placement(transformation(extent={{-78,-46},{-58,-66}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line1(
          P_nominal=5000,
          l=80,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,80},{20,100}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line2(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,56},{20,76}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line3(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,32},{20,52}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line4(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,8},{20,28}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line5(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,-16},{20,4}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line6(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,-42},{20,-22}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line7(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,-66},{20,-46}})));
        Buildings.Electrical.AC.OnePhase.Lines.Line line8(
          P_nominal=5000,
          l=50,
          V_nominal=240)
          annotation (Placement(transformation(extent={{40,-90},{20,-70}})));
        Modelica.Blocks.Sources.RealExpression Pload(y=pload)
          "Power consumed by load" annotation (Placement(transformation(extent=
                  {{-10,-10},{10,10}}, origin={-110,-80})));
      equation
        connect(weaDat.weaBus, Warehouse.weaBus) annotation (Line(
            points={{-40,100},{76,100},{76,99}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, A.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,75},{76,75}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, C.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,51},{76,51}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, D.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,27},{76,27}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, NorCarport.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,3},{76,3}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, SouCarport.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,-23},{76,-23}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, F.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,-47},{76,-47}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDat.weaBus, G.weaBus) annotation (Line(
            points={{-40,100},{46,100},{46,-71},{76,-71}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(HDifHor.y[1], weaDat.HDifHor_in) annotation (Line(
            points={{-99,98},{-76,98},{-76,90.4},{-61,90.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HGloHor.y[1], weaDat.HGloHor_in) annotation (Line(
            points={{-99,70},{-80,70},{-80,88},{-61,88}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HDirNor.y[1], weaDat.HDirNor_in) annotation (Line(
            points={{-99,44},{-76,44},{-76,86.6},{-61,86.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Warehouse.P, PSol.u[1]) annotation (Line(
            points={{87,97},{108,97},{108,3.675},{128,3.675}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(A.P, PSol.u[2]) annotation (Line(
            points={{87,73},{108,73},{108,2.625},{128,2.625}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(C.P, PSol.u[3]) annotation (Line(
            points={{87,49},{108,49},{108,2.1},{128,2.1},{128,1.575}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(D.P, PSol.u[4]) annotation (Line(
            points={{87,25},{108,25},{108,2.8},{128,2.8},{128,0.525}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NorCarport.P, PSol.u[5]) annotation (Line(
            points={{87,1},{103.5,1},{103.5,-0.525},{128,-0.525}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SouCarport.P, PSol.u[6]) annotation (Line(
            points={{87,-25},{108,-25},{108,-1.575},{128,-1.575}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(F.P, PSol.u[7]) annotation (Line(
            points={{87,-49},{108,-49},{108,-3.5},{128,-3.5},{128,-2.625}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(G.P, PSol.u[8]) annotation (Line(
            points={{87,-73},{108,-73},{108,-3.5},{128,-3.5},{128,-3.675}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(grid.terminal, line0.terminal_n) annotation (Line(
            points={{-110,-30},{-110,-42},{-88,-42}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line0.terminal_p, acLoad.terminal) annotation (Line(
            points={{-68,-42},{-36,-42},{-36,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line0.terminal_p, sen1.term) annotation (Line(
            points={{-68,-42},{-68,-47}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(Warehouse.terminal, line1.terminal_n) annotation (Line(
            points={{66,90},{40,90}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line1.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,90},{-20,90},{-20,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(A.terminal, line2.terminal_n) annotation (Line(
            points={{66,66},{40,66}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line2.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,66},{-14,66},{-14,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(C.terminal, line3.terminal_n) annotation (Line(
            points={{66,42},{40,42}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line3.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,42},{-8,42},{-8,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(D.terminal, line4.terminal_n) annotation (Line(
            points={{66,18},{40,18}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line4.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,18},{-2,18},{-2,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(NorCarport.terminal, line5.terminal_n) annotation (Line(
            points={{66,-6},{40,-6}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line5.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,-6},{4,-6},{4,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(SouCarport.terminal, line6.terminal_n) annotation (Line(
            points={{66,-32},{40,-32}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line6.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,-32},{10,-32},{10,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(F.terminal, line7.terminal_n) annotation (Line(
            points={{66,-56},{40,-56}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line7.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,-56},{16,-56},{16,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(G.terminal, line8.terminal_n) annotation (Line(
            points={{66,-80},{40,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(line8.terminal_p, acLoad.terminal) annotation (Line(
            points={{20,-80},{-58,-80}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(Pload.y, acLoad.Pow) annotation (Line(
            points={{-99,-80},{-78,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(extent={{-140,-140},{160,140}},
                preserveAspectRatio=false), graphics), Icon(coordinateSystem(
                extent={{-140,-140},{160,140}})));
      end PVs;

      model PV1
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented Warehouse(
          V_nominal=240,
          eta_DCAC=0.9,
          A=130,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745)
          annotation (Placement(transformation(extent={{58,-86},{78,-66}})));
        Modelica.Blocks.Sources.Constant  load(k=0.5) "Load consumption"
          annotation (Placement(transformation(extent={{-90,-86},{-70,-66}})));
        Buildings.Electrical.AC.OnePhase.Sources.Grid grid(f=60, V=240)
          "Electrical grid model"
          annotation (Placement(transformation(extent={{-72,-52},{-52,-32}})));
        Buildings.Electrical.AC.OnePhase.Loads.Inductive acLoad(mode=Buildings.Electrical.Types.Load.VariableZ_P_input,
            V_nominal=480)
          annotation (Placement(transformation(extent={{-26,-86},{-46,-66}})));
        basemodel.ReaderTMY3                                weaDatInpCon(filNam=
              "C:/Users/dhe/Desktop/HGVModel/greenvillage/GreenVillage/Buildings/Resources/weatherdata/USA_FL_Tampa.Intl.AP.722110_TMY3.mos",
            HSou=GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor)
          "Weather data reader with radiation data obtained from input connector"
          annotation (Placement(transformation(extent={{40,12},{60,32}})));
        Modelica.Blocks.Sources.CombiTimeTable HDifHor(table=[0,0; 1800,0; 3600,
              0; 5400,0; 7200,0; 9000,0; 10800,0; 12600,0; 14400,0; 16200,0;
              18000,0; 19800,0; 21600,0; 23400,0; 25200,0; 27000,0; 28800,2;
              30600,11; 32400,29; 34200,21; 36000,16; 37800,233; 39600,68;
              41400,164; 43200,290; 45000,117; 46800,84; 48600,146; 50400,270;
              52200,116; 54000,203; 55800,102; 57600,92; 59400,92; 61200,52;
              63000,0; 64800,0; 66600,0; 68400,0; 70200,0; 72000,0; 73800,0;
              75600,0; 77400,0; 79200,0; 81000,0; 82800,0; 84600,0; 86400,0;
              88200,0; 90000,0; 91800,0; 93600,0; 95400,0; 97200,0; 99000,0;
              100800,0; 102600,0; 104400,0; 106200,0; 108000,0; 109800,0;
              111600,0; 113400,0; 115200,38; 117000,55; 118800,66; 120600,165;
              122400,81; 124200,204; 126000,89; 127800,187; 129600,281; 131400,
              205; 133200,287; 135000,277; 136800,185; 138600,246; 140400,214;
              142200,107; 144000,135; 145800,6; 147600,3; 149400,0; 151200,0;
              153000,0; 154800,0; 156600,0; 158400,0; 160200,0; 162000,0;
              163800,0; 165600,0; 167400,0; 169200,0; 171000,0; 172800,0;
              174600,0; 176400,0; 178200,0; 180000,0; 181800,0; 183600,0;
              185400,0; 187200,0; 189000,0; 190800,0; 192600,0; 194400,0;
              196200,0; 198000,0; 199800,0; 201600,40; 203400,37; 205200,84;
              207000,99; 208800,85; 210600,90; 212400,93; 214200,96; 216000,98;
              217800,251; 219600,302; 221400,291; 223200,275; 225000,173;
              226800,211; 228600,178; 230400,139; 232200,98; 234000,60; 235800,
              0; 237600,0; 239400,0; 241200,0; 243000,0; 244800,0; 246600,0;
              248400,0; 250200,0; 252000,0; 253800,0; 255600,0; 257400,0;
              259200,0; 261000,0; 262800,0; 264600,0; 266400,0; 268200,0;
              270000,0; 271800,0; 273600,0; 275400,0; 277200,0; 279000,0;
              280800,0; 282600,0; 284400,0; 286200,0; 288000,39; 289800,69;
              291600,47; 293400,139; 295200,122; 297000,221; 298800,266; 300600,
              255; 302400,123; 304200,145; 306000,158; 307800,149; 309600,200;
              311400,190; 313200,96; 315000,77; 316800,66; 318600,62; 320400,34;
              322200,0; 324000,0; 325800,0; 327600,0; 329400,0; 331200,0;
              333000,0; 334800,0; 336600,0; 338400,0; 340200,0; 342000,0;
              343800,0; 345600,0; 347400,0; 349200,0; 351000,0; 352800,0;
              354600,0; 356400,0; 358200,0; 360000,0; 361800,0; 363600,0;
              365400,0; 367200,0; 369000,0; 370800,0; 372600,0; 374400,38;
              376200,55; 378000,66; 379800,75; 381600,81; 383400,86; 385200,90;
              387000,93; 388800,94; 390600,95; 392400,94; 394200,93; 396000,91;
              397800,88; 399600,83; 401400,77; 403200,69; 405000,58; 406800,38;
              408600,0; 410400,0; 412200,0; 414000,0; 415800,0; 417600,0;
              419400,0; 421200,0; 423000,0; 424800,0; 426600,0; 428400,0;
              430200,0; 432000,0; 433800,0; 435600,0; 437400,0; 439200,0;
              441000,0; 442800,0; 444600,0; 446400,0; 448200,0; 450000,0;
              451800,0; 453600,0; 455400,0; 457200,0; 459000,0; 460800,38;
              462600,55; 464400,67; 466200,75; 468000,81; 469800,238; 471600,
              178; 473400,85; 475200,88; 477000,90; 478800,138; 480600,278;
              482400,239; 484200,236; 486000,208; 487800,175; 489600,115;
              491400,70; 493200,40; 495000,0; 496800,0; 498600,0; 500400,0;
              502200,0; 504000,0; 505800,0; 507600,0; 509400,0; 511200,0;
              513000,0; 514800,0; 516600,0; 518400,0; 520200,0; 522000,0;
              523800,0; 525600,0; 527400,0; 529200,0; 531000,0; 532800,0;
              534600,0; 536400,0; 538200,0; 540000,0; 541800,0; 543600,0;
              545400,0; 547200,40; 549000,49; 550800,69; 552600,111; 554400,84;
              556200,89; 558000,93; 559800,96; 561600,97; 563400,98; 565200,301;
              567000,185; 568800,277; 570600,145; 572400,219; 574200,143;
              576000,141; 577800,53; 579600,40; 581400,0; 583200,0; 585000,0;
              586800,0; 588600,0; 590400,0; 592200,0; 594000,0; 595800,0;
              597600,0; 599400,0; 601200,0; 603000,0; 604800,0; 606600,0;
              608400,0; 610200,0; 612000,0; 613800,0; 615600,0; 617400,0;
              619200,0; 621000,0; 622800,0; 624600,0; 626400,0; 628200,0;
              630000,0; 631800,0; 633600,38; 635400,80; 637200,113; 639000,36;
              640800,17; 642600,159; 644400,114; 646200,291; 648000,215; 649800,
              274; 651600,308; 653400,292; 655200,164; 657000,247; 658800,207;
              660600,181; 662400,92; 664200,72; 666000,48; 667800,0; 669600,0;
              671400,0; 673200,0; 675000,0; 676800,0; 678600,0; 680400,0;
              682200,0; 684000,0; 685800,0; 687600,0; 689400,0; 691200,0;
              693000,0; 694800,0; 696600,0; 698400,0; 700200,0; 702000,0;
              703800,0; 705600,0; 707400,0; 709200,0; 711000,0; 712800,0;
              714600,0; 716400,0; 718200,0; 720000,37; 721800,54; 723600,108;
              725400,162; 727200,121; 729000,237; 730800,244; 732600,261;
              734400,229; 736200,228; 738000,254; 739800,229; 741600,221;
              743400,229; 745200,83; 747000,186; 748800,128; 750600,65; 752400,
              37; 754200,0; 756000,0; 757800,0; 759600,0; 761400,0; 763200,0;
              765000,0; 766800,0; 768600,0; 770400,0; 772200,0; 774000,0;
              775800,0; 777600,0; 779400,0; 781200,0; 783000,0; 784800,0;
              786600,0; 788400,0; 790200,0; 792000,0; 793800,0; 795600,0;
              797400,0; 799200,0; 801000,0; 802800,0; 804600,0; 806400,37;
              808200,54; 810000,93; 811800,113; 813600,154; 815400,209; 817200,
              243; 819000,271; 820800,210; 822600,292; 824400,297; 826200,301;
              828000,246; 829800,255; 831600,189; 833400,133; 835200,104;
              837000,84; 838800,42; 840600,66; 842400,0; 844200,0; 846000,0;
              847800,0; 849600,0; 851400,0; 853200,0; 855000,0; 856800,0;
              858600,0; 860400,0; 862200,0; 864000,0; 865800,0; 867600,0;
              869400,0; 871200,0; 873000,0; 874800,0; 876600,0; 878400,0;
              880200,0; 882000,0; 883800,0; 885600,0; 887400,0; 889200,0;
              891000,0; 892800,37; 894600,55; 896400,122; 898200,75; 900000,82;
              901800,87; 903600,265; 905400,93; 907200,95; 909000,95; 910800,95;
              912600,94; 914400,284; 916200,88; 918000,84; 919800,78; 921600,70;
              923400,59; 925200,42; 927000,65; 928800,0; 930600,0; 932400,0;
              934200,0; 936000,0; 937800,0; 939600,0; 941400,0; 943200,0;
              945000,0; 946800,0; 948600,0; 950400,0; 952200,0; 954000,0;
              955800,0; 957600,0; 959400,0; 961200,0; 963000,0; 964800,0;
              966600,0; 968400,0; 970200,0; 972000,0; 973800,0; 975600,0;
              977400,0; 979200,40; 981000,58; 982800,70; 984600,78; 986400,85;
              988200,90; 990000,94; 991800,97; 993600,98; 995400,99; 997200,99;
              999000,98; 1000800,96; 1002600,92; 1004400,88; 1006200,179;
              1008000,74; 1009800,62; 1011600,44; 1013400,44; 1015200,0;
              1017000,0; 1018800,0; 1020600,0; 1022400,0; 1024200,0; 1026000,0;
              1027800,0; 1029600,0; 1031400,0; 1033200,0; 1035000,0; 1036800,0;
              1038600,0; 1040400,0; 1042200,0; 1044000,0; 1045800,0; 1047600,0;
              1049400,0; 1051200,0; 1053000,0; 1054800,0; 1056600,0; 1058400,0;
              1060200,0; 1062000,0; 1063800,0; 1065600,39; 1067400,80; 1069200,
              110; 1071000,142; 1072800,190; 1074600,225; 1076400,92; 1078200,
              266; 1080000,96; 1081800,194; 1083600,292; 1085400,280; 1087200,
              93; 1089000,89; 1090800,184; 1092600,183; 1094400,141; 1096200,
              103; 1098000,61; 1099800,28; 1101600,0; 1103400,0; 1105200,0;
              1107000,0; 1108800,0; 1110600,0; 1112400,0; 1114200,0; 1116000,0;
              1117800,0; 1119600,0; 1121400,0; 1123200,0; 1125000,0; 1126800,0;
              1128600,0; 1130400,0; 1132200,0; 1134000,0; 1135800,0; 1137600,0;
              1139400,0; 1141200,0; 1143000,0; 1144800,0; 1146600,0; 1148400,0;
              1150200,0; 1152000,1; 1153800,58; 1155600,40; 1157400,129;
              1159200,198; 1161000,169; 1162800,174; 1164600,230; 1166400,110;
              1168200,115; 1170000,74; 1171800,212; 1173600,130; 1175400,79;
              1177200,119; 1179000,182; 1180800,11; 1182600,105; 1184400,65;
              1186200,30; 1188000,0; 1189800,0; 1191600,0; 1193400,0; 1195200,0;
              1197000,0; 1198800,0; 1200600,0; 1202400,0; 1204200,0; 1206000,0;
              1207800,0; 1209600,0; 1211400,0; 1213200,0; 1215000,0; 1216800,0;
              1218600,0; 1220400,0; 1222200,0; 1224000,0; 1225800,0; 1227600,0;
              1229400,0; 1231200,0; 1233000,0; 1234800,0; 1236600,0; 1238400,41;
              1240200,48; 1242000,109; 1243800,160; 1245600,201; 1247400,229;
              1249200,275; 1251000,298; 1252800,306; 1254600,276; 1256400,305;
              1258200,283; 1260000,190; 1261800,244; 1263600,199; 1265400,169;
              1267200,113; 1269000,108; 1270800,72; 1272600,48; 1274400,0;
              1276200,0; 1278000,0; 1279800,0; 1281600,0; 1283400,0; 1285200,0;
              1287000,0; 1288800,0; 1290600,0; 1292400,0; 1294200,0; 1296000,0;
              1297800,0; 1299600,0; 1301400,0; 1303200,0; 1305000,0; 1306800,0;
              1308600,0; 1310400,0; 1312200,0; 1314000,0; 1315800,0; 1317600,0;
              1319400,0; 1321200,0; 1323000,0; 1324800,41; 1326600,58; 1328400,
              70; 1330200,79; 1332000,85; 1333800,90; 1335600,94; 1337400,97;
              1339200,98; 1341000,99; 1342800,99; 1344600,98; 1346400,96;
              1348200,93; 1350000,88; 1351800,83; 1353600,75; 1355400,64;
              1357200,47; 1359000,43; 1360800,0; 1362600,0; 1364400,0; 1366200,
              0; 1368000,0; 1369800,0; 1371600,0; 1373400,0; 1375200,0; 1377000,
              0; 1378800,0; 1380600,0; 1382400,0; 1384200,0; 1386000,0; 1387800,
              0; 1389600,0; 1391400,0; 1393200,0; 1395000,0; 1396800,0; 1398600,
              0; 1400400,0; 1402200,0; 1404000,0; 1405800,0; 1407600,0; 1409400,
              0; 1411200,40; 1413000,66; 1414800,80; 1416600,124; 1418400,161;
              1420200,142; 1422000,212; 1423800,237; 1425600,248; 1427400,230;
              1429200,238; 1431000,232; 1432800,96; 1434600,92; 1436400,88;
              1438200,82; 1440000,75; 1441800,64; 1443600,47; 1445400,76;
              1447200,0; 1449000,0; 1450800,0; 1452600,0; 1454400,0; 1456200,0;
              1458000,0; 1459800,0; 1461600,0; 1463400,0; 1465200,0; 1467000,0;
              1468800,0; 1470600,0; 1472400,0; 1474200,0; 1476000,0; 1477800,0;
              1479600,0; 1481400,0; 1483200,0; 1485000,0; 1486800,0; 1488600,0;
              1490400,0; 1492200,0; 1494000,0; 1495800,0; 1497600,41; 1499400,
              58; 1501200,70; 1503000,79; 1504800,85; 1506600,91; 1508400,95;
              1510200,97; 1512000,99; 1513800,100; 1515600,100; 1517400,99;
              1519200,97; 1521000,94; 1522800,89; 1524600,84; 1526400,76;
              1528200,65; 1530000,49; 1531800,43; 1533600,0; 1535400,0; 1537200,
              0; 1539000,0; 1540800,0; 1542600,0; 1544400,0; 1546200,0; 1548000,
              0; 1549800,0; 1551600,0; 1553400,0; 1555200,0; 1557000,0; 1558800,
              0; 1560600,0; 1562400,0; 1564200,0; 1566000,0; 1567800,0; 1569600,
              0; 1571400,0; 1573200,0; 1575000,0; 1576800,0; 1578600,0; 1580400,
              0; 1582200,0; 1584000,41; 1585800,58; 1587600,69; 1589400,78;
              1591200,85; 1593000,90; 1594800,93; 1596600,96; 1598400,319;
              1600200,180; 1602000,311; 1603800,172; 1605600,107; 1607400,170;
              1609200,137; 1611000,158; 1612800,160; 1614600,8; 1616400,48;
              1618200,76; 1620000,0; 1621800,0; 1623600,0; 1625400,0; 1627200,0;
              1629000,0; 1630800,0; 1632600,0; 1634400,0; 1636200,0; 1638000,0;
              1639800,0; 1641600,0; 1643400,0; 1645200,0; 1647000,0; 1648800,0;
              1650600,0; 1652400,0; 1654200,0; 1656000,0; 1657800,0; 1659600,0;
              1661400,0; 1663200,0; 1665000,0; 1666800,0; 1668600,0; 1670400,41;
              1672200,58; 1674000,70; 1675800,78; 1677600,85; 1679400,90;
              1681200,94; 1683000,96; 1684800,98; 1686600,99; 1688400,99;
              1690200,98; 1692000,96; 1693800,93; 1695600,88; 1697400,156;
              1699200,133; 1701000,121; 1702800,45; 1704600,75; 1706400,0;
              1708200,0; 1710000,0; 1711800,0; 1713600,0; 1715400,0; 1717200,0;
              1719000,0; 1720800,0; 1722600,0; 1724400,0; 1726200,0; 1728000,0;
              1729800,0; 1731600,0; 1733400,0; 1735200,0; 1737000,0; 1738800,0;
              1740600,0; 1742400,0; 1744200,0; 1746000,0; 1747800,0; 1749600,0;
              1751400,0; 1753200,0; 1755000,0; 1756800,40; 1758600,57; 1760400,
              68; 1762200,77; 1764000,83; 1765800,88; 1767600,92; 1769400,95;
              1771200,97; 1773000,97; 1774800,173; 1776600,96; 1778400,94;
              1780200,92; 1782000,88; 1783800,82; 1785600,75; 1787400,107;
              1789200,71; 1791000,33; 1792800,0; 1794600,0; 1796400,0; 1798200,
              0; 1800000,0; 1801800,0; 1803600,0; 1805400,0; 1807200,0; 1809000,
              0; 1810800,0; 1812600,0; 1814400,0; 1816200,0; 1818000,0; 1819800,
              0; 1821600,0; 1823400,0; 1825200,0; 1827000,0; 1828800,0; 1830600,
              0; 1832400,0; 1834200,0; 1836000,0; 1837800,0; 1839600,0; 1841400,
              0; 1843200,42; 1845000,59; 1846800,71; 1848600,79; 1850400,86;
              1852200,91; 1854000,95; 1855800,98; 1857600,100; 1859400,101;
              1861200,101; 1863000,100; 1864800,98; 1866600,94; 1868400,90;
              1870200,85; 1872000,77; 1873800,67; 1875600,51; 1877400,44;
              1879200,0; 1881000,0; 1882800,0; 1884600,0; 1886400,0; 1888200,0;
              1890000,0; 1891800,0; 1893600,0; 1895400,0; 1897200,0; 1899000,0;
              1900800,0; 1902600,0; 1904400,0; 1906200,0; 1908000,0; 1909800,0;
              1911600,0; 1913400,0; 1915200,0; 1917000,0; 1918800,0; 1920600,0;
              1922400,0; 1924200,0; 1926000,0; 1927800,7; 1929600,42; 1931400,
              59; 1933200,71; 1935000,80; 1936800,87; 1938600,92; 1940400,96;
              1942200,99; 1944000,100; 1945800,101; 1947600,101; 1949400,100;
              1951200,98; 1953000,95; 1954800,91; 1956600,85; 1958400,78;
              1960200,67; 1962000,52; 1963800,45; 1965600,0; 1967400,0; 1969200,
              0; 1971000,0; 1972800,0; 1974600,0; 1976400,0; 1978200,0; 1980000,
              0; 1981800,0; 1983600,0; 1985400,0; 1987200,0; 1989000,0; 1990800,
              0; 1992600,0; 1994400,0; 1996200,0; 1998000,0; 1999800,0; 2001600,
              0; 2003400,0; 2005200,0; 2007000,0; 2008800,0; 2010600,0; 2012400,
              0; 2014200,4; 2016000,40; 2017800,82; 2019600,80; 2021400,173;
              2023200,211; 2025000,201; 2026800,95; 2028600,300; 2030400,209;
              2032200,228; 2034000,100; 2035800,99; 2037600,97; 2039400,94;
              2041200,90; 2043000,84; 2044800,77; 2046600,124; 2048400,84;
              2050200,44; 2052000,0; 2053800,0; 2055600,0; 2057400,0; 2059200,0;
              2061000,0; 2062800,0; 2064600,0; 2066400,0; 2068200,0; 2070000,0;
              2071800,0; 2073600,0; 2075400,0; 2077200,0; 2079000,0; 2080800,0;
              2082600,0; 2084400,0; 2086200,0; 2088000,0; 2089800,0; 2091600,0;
              2093400,0; 2095200,0; 2097000,0; 2098800,0; 2100600,7; 2102400,41;
              2104200,85; 2106000,132; 2107800,176; 2109600,206; 2111400,217;
              2113200,284; 2115000,311; 2116800,328; 2118600,282; 2120400,100;
              2122200,99; 2124000,97; 2125800,94; 2127600,90; 2129400,84;
              2131200,77; 2133000,67; 2134800,52; 2136600,44; 2138400,0;
              2140200,0; 2142000,0; 2143800,0; 2145600,0; 2147400,0; 2149200,0;
              2151000,0; 2152800,0; 2154600,0; 2156400,0; 2158200,0; 2160000,0;
              2161800,0; 2163600,0; 2165400,0; 2167200,0; 2169000,0; 2170800,0;
              2172600,0; 2174400,0; 2176200,0; 2178000,0; 2179800,0; 2181600,0;
              2183400,0; 2185200,0; 2187000,0; 2188800,5; 2190600,12; 2192400,
              99; 2194200,176; 2196000,146; 2197800,108; 2199600,274; 2201400,
              228; 2203200,235; 2205000,271; 2206800,338; 2208600,328; 2210400,
              266; 2212200,167; 2214000,78; 2215800,63; 2217600,140; 2219400,76;
              2221200,85; 2223000,43; 2224800,0; 2226600,0; 2228400,0; 2230200,
              0; 2232000,0; 2233800,0; 2235600,0; 2237400,0; 2239200,0; 2241000,
              0; 2242800,0; 2244600,0; 2246400,0; 2248200,0; 2250000,0; 2251800,
              0; 2253600,0; 2255400,0; 2257200,0; 2259000,0; 2260800,0; 2262600,
              0; 2264400,0; 2266200,0; 2268000,0; 2269800,0; 2271600,0; 2273400,
              8; 2275200,41; 2277000,58; 2278800,69; 2280600,81; 2282400,85;
              2284200,215; 2286000,291; 2287800,194; 2289600,228; 2291400,171;
              2293200,210; 2295000,184; 2296800,136; 2298600,84; 2300400,138;
              2302200,139; 2304000,97; 2305800,96; 2307600,53; 2309400,45;
              2311200,0; 2313000,0; 2314800,0; 2316600,0; 2318400,0; 2320200,0;
              2322000,0; 2323800,0; 2325600,0; 2327400,0; 2329200,0; 2331000,0;
              2332800,0; 2334600,0; 2336400,0; 2338200,0; 2340000,0; 2341800,0;
              2343600,0; 2345400,0; 2347200,0; 2349000,0; 2350800,0; 2352600,0;
              2354400,0; 2356200,0; 2358000,0; 2359800,8; 2361600,41; 2363400,
              58; 2365200,70; 2367000,78; 2368800,85; 2370600,90; 2372400,94;
              2374200,97; 2376000,99; 2377800,99; 2379600,99; 2381400,98;
              2383200,96; 2385000,94; 2386800,89; 2388600,217; 2390400,171;
              2392200,67; 2394000,84; 2395800,52; 2397600,0; 2399400,0; 2401200,
              0; 2403000,0; 2404800,0; 2406600,0; 2408400,0; 2410200,0; 2412000,
              0; 2413800,0; 2415600,0; 2417400,0; 2419200,0; 2421000,0; 2422800,
              0; 2424600,0; 2426400,0; 2428200,0; 2430000,0; 2431800,0; 2433600,
              0; 2435400,0; 2437200,0; 2439000,0; 2440800,0; 2442600,0; 2444400,
              0; 2446200,2; 2448000,18; 2449800,38; 2451600,59; 2453400,32;
              2455200,161; 2457000,202; 2458800,225; 2460600,170; 2462400,297;
              2464200,246; 2466000,279; 2467800,227; 2469600,167; 2471400,112;
              2473200,153; 2475000,69; 2476800,147; 2478600,5; 2480400,91;
              2482200,51; 2484000,0; 2485800,0; 2487600,0; 2489400,0; 2491200,0;
              2493000,0; 2494800,0; 2496600,0; 2498400,0; 2500200,0; 2502000,0;
              2503800,0; 2505600,0; 2507400,0; 2509200,0; 2511000,0; 2512800,0;
              2514600,0; 2516400,0; 2518200,0; 2520000,0; 2521800,0; 2523600,0;
              2525400,0; 2527200,0; 2529000,0; 2530800,0; 2532600,6; 2534400,45;
              2536200,57; 2538000,119; 2539800,23; 2541600,30; 2543400,63;
              2545200,84; 2547000,103; 2548800,75; 2550600,160; 2552400,218;
              2554200,158; 2556000,182; 2557800,136; 2559600,93; 2561400,48;
              2563200,40; 2565000,30; 2566800,82; 2568600,41; 2570400,0;
              2572200,0; 2574000,0; 2575800,0; 2577600,0; 2579400,0; 2581200,0;
              2583000,0; 2584800,0; 2586600,0; 2588400,0; 2590200,0; 2592000,0;
              2593800,0; 2595600,0; 2597400,0; 2599200,0; 2601000,0; 2602800,0;
              2604600,0; 2606400,0; 2608200,0; 2610000,0; 2611800,0; 2613600,0;
              2615400,0; 2617200,0; 2619000,3; 2620800,28; 2622600,43; 2624400,
              91; 2626200,48; 2628000,86; 2629800,253; 2631600,37; 2633400,18;
              2635200,162; 2637000,42; 2638800,104; 2640600,147; 2642400,306;
              2644200,170; 2646000,140; 2647800,142; 2649600,125; 2651400,125;
              2653200,83; 2655000,42; 2656800,0; 2658600,0; 2660400,0; 2662200,
              0; 2664000,0; 2665800,0; 2667600,0; 2669400,0; 2671200,0; 2673000,
              0; 2674800,0; 2676600,0; 2678400,0])
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Modelica.Blocks.Sources.CombiTimeTable HDirNor(table=[0,0; 1800,0; 3600,
              0; 5400,0; 7200,0; 9000,0; 10800,0; 12600,0; 14400,0; 16200,0;
              18000,0; 19800,0; 21600,0; 23400,0; 25200,0; 27000,0; 28800,0;
              30600,0; 32400,0; 34200,0; 36000,0; 37800,95; 39600,0; 41400,0;
              43200,84; 45000,0; 46800,0; 48600,0; 50400,126; 52200,0; 54000,60;
              55800,0; 57600,0; 59400,10; 61200,0; 63000,0; 64800,0; 66600,0;
              68400,0; 70200,0; 72000,0; 73800,0; 75600,0; 77400,0; 79200,0;
              81000,0; 82800,0; 84600,0; 86400,0; 88200,0; 90000,0; 91800,0;
              93600,0; 95400,0; 97200,0; 99000,0; 100800,0; 102600,0; 104400,0;
              106200,0; 108000,0; 109800,0; 111600,0; 113400,0; 115200,320;
              117000,525; 118800,644; 120600,152; 122400,771; 124200,398;
              126000,833; 127800,590; 129600,320; 131400,578; 133200,301;
              135000,295; 136800,2; 138600,134; 140400,147; 142200,0; 144000,
              194; 145800,0; 147600,0; 149400,0; 151200,0; 153000,0; 154800,0;
              156600,0; 158400,0; 160200,0; 162000,0; 163800,0; 165600,0;
              167400,0; 169200,0; 171000,0; 172800,0; 174600,0; 176400,0;
              178200,0; 180000,0; 181800,0; 183600,0; 185400,0; 187200,0;
              189000,0; 190800,0; 192600,0; 194400,0; 196200,0; 198000,0;
              199800,0; 201600,79; 203400,0; 205200,517; 207000,597; 208800,852;
              210600,890; 212400,916; 214200,933; 216000,944; 217800,460;
              219600,204; 221400,133; 223200,131; 225000,546; 226800,89; 228600,
              115; 230400,117; 232200,44; 234000,8; 235800,0; 237600,0; 239400,
              0; 241200,0; 243000,0; 244800,0; 246600,0; 248400,0; 250200,0;
              252000,0; 253800,0; 255600,0; 257400,0; 259200,0; 261000,0;
              262800,0; 264600,0; 266400,0; 268200,0; 270000,0; 271800,0;
              273600,0; 275400,0; 277200,0; 279000,0; 280800,0; 282600,0;
              284400,0; 286200,0; 288000,217; 289800,0; 291600,0; 293400,13;
              295200,0; 297000,54; 298800,130; 300600,40; 302400,0; 304200,0;
              306000,0; 307800,0; 309600,8; 311400,8; 313200,0; 315000,0;
              316800,0; 318600,0; 320400,0; 322200,0; 324000,0; 325800,0;
              327600,0; 329400,0; 331200,0; 333000,0; 334800,0; 336600,0;
              338400,0; 340200,0; 342000,0; 343800,0; 345600,0; 347400,0;
              349200,0; 351000,0; 352800,0; 354600,0; 356400,0; 358200,0;
              360000,0; 361800,0; 363600,0; 365400,0; 367200,0; 369000,0;
              370800,0; 372600,0; 374400,316; 376200,526; 378000,647; 379800,
              725; 381600,779; 383400,816; 385200,843; 387000,860; 388800,870;
              390600,874; 392400,873; 394200,866; 396000,853; 397800,833;
              399600,803; 401400,761; 403200,702; 405000,617; 406800,520;
              408600,0; 410400,0; 412200,0; 414000,0; 415800,0; 417600,0;
              419400,0; 421200,0; 423000,0; 424800,0; 426600,0; 428400,0;
              430200,0; 432000,0; 433800,0; 435600,0; 437400,0; 439200,0;
              441000,0; 442800,0; 444600,0; 446400,0; 448200,0; 450000,0;
              451800,0; 453600,0; 455400,0; 457200,0; 459000,0; 460800,323;
              462600,534; 464400,654; 466200,731; 468000,782; 469800,186;
              471600,4; 473400,0; 475200,0; 477000,0; 478800,0; 480600,64;
              482400,31; 484200,58; 486000,54; 487800,55; 489600,0; 491400,0;
              493200,0; 495000,0; 496800,0; 498600,0; 500400,0; 502200,0;
              504000,0; 505800,0; 507600,0; 509400,0; 511200,0; 513000,0;
              514800,0; 516600,0; 518400,0; 520200,0; 522000,0; 523800,0;
              525600,0; 527400,0; 529200,0; 531000,0; 532800,0; 534600,0;
              536400,0; 538200,0; 540000,0; 541800,0; 543600,0; 545400,0;
              547200,351; 549000,0; 550800,700; 552600,544; 554400,833; 556200,
              871; 558000,897; 559800,915; 561600,925; 563400,929; 565200,241;
              567000,613; 568800,167; 570600,642; 572400,113; 574200,448;
              576000,56; 577800,634; 579600,587; 581400,0; 583200,0; 585000,0;
              586800,0; 588600,0; 590400,0; 592200,0; 594000,0; 595800,0;
              597600,0; 599400,0; 601200,0; 603000,0; 604800,0; 606600,0;
              608400,0; 610200,0; 612000,0; 613800,0; 615600,0; 617400,0;
              619200,0; 621000,0; 622800,0; 624600,0; 626400,0; 628200,0;
              630000,0; 631800,0; 633600,40; 635400,125; 637200,27; 639000,0;
              640800,0; 642600,0; 644400,0; 646200,153; 648000,10; 649800,41;
              651600,187; 653400,101; 655200,0; 657000,236; 658800,294; 660600,
              209; 662400,0; 664200,486; 666000,394; 667800,0; 669600,0; 671400,
              0; 673200,0; 675000,0; 676800,0; 678600,0; 680400,0; 682200,0;
              684000,0; 685800,0; 687600,0; 689400,0; 691200,0; 693000,0;
              694800,0; 696600,0; 698400,0; 700200,0; 702000,0; 703800,0;
              705600,0; 707400,0; 709200,0; 711000,0; 712800,0; 714600,0;
              716400,0; 718200,0; 720000,303; 721800,511; 723600,12; 725400,81;
              727200,0; 729000,215; 730800,47; 732600,45; 734400,15; 736200,13;
              738000,25; 739800,15; 741600,16; 743400,39; 745200,786; 747000,
              152; 748800,0; 750600,0; 752400,0; 754200,0; 756000,0; 757800,0;
              759600,0; 761400,0; 763200,0; 765000,0; 766800,0; 768600,0;
              770400,0; 772200,0; 774000,0; 775800,0; 777600,0; 779400,0;
              781200,0; 783000,0; 784800,0; 786600,0; 788400,0; 790200,0;
              792000,0; 793800,0; 795600,0; 797400,0; 799200,0; 801000,0;
              802800,0; 804600,0; 806400,303; 808200,511; 810000,452; 811800,
              538; 813600,493; 815400,390; 817200,359; 819000,329; 820800,567;
              822600,326; 824400,294; 826200,156; 828000,34; 829800,119; 831600,
              404; 833400,515; 835200,499; 837000,0; 838800,502; 840600,0;
              842400,0; 844200,0; 846000,0; 847800,0; 849600,0; 851400,0;
              853200,0; 855000,0; 856800,0; 858600,0; 860400,0; 862200,0;
              864000,0; 865800,0; 867600,0; 869400,0; 871200,0; 873000,0;
              874800,0; 876600,0; 878400,0; 880200,0; 882000,0; 883800,0;
              885600,0; 887400,0; 889200,0; 891000,0; 892800,314; 894600,527;
              896400,195; 898200,728; 900000,782; 901800,819; 903600,241;
              905400,861; 907200,871; 909000,874; 910800,872; 912600,863;
              914400,175; 916200,827; 918000,796; 919800,754; 921600,695;
              923400,612; 925200,507; 927000,0; 928800,0; 930600,0; 932400,0;
              934200,0; 936000,0; 937800,0; 939600,0; 941400,0; 943200,0;
              945000,0; 946800,0; 948600,0; 950400,0; 952200,0; 954000,0;
              955800,0; 957600,0; 959400,0; 961200,0; 963000,0; 964800,0;
              966600,0; 968400,0; 970200,0; 972000,0; 973800,0; 975600,0;
              977400,0; 979200,356; 981000,586; 982800,715; 984600,797; 986400,
              853; 988200,892; 990000,919; 991800,938; 993600,949; 995400,955;
              997200,954; 999000,948; 1000800,935; 1002600,916; 1004400,888;
              1006200,280; 1008000,792; 1009800,714; 1011600,619; 1013400,431;
              1015200,0; 1017000,0; 1018800,0; 1020600,0; 1022400,0; 1024200,0;
              1026000,0; 1027800,0; 1029600,0; 1031400,0; 1033200,0; 1035000,0;
              1036800,0; 1038600,0; 1040400,0; 1042200,0; 1044000,0; 1045800,0;
              1047600,0; 1049400,0; 1051200,0; 1053000,0; 1054800,0; 1056600,0;
              1058400,0; 1060200,0; 1062000,0; 1063800,0; 1065600,340; 1067400,
              157; 1069200,332; 1071000,386; 1072800,320; 1074600,319; 1076400,
              870; 1078200,362; 1080000,894; 1081800,633; 1083600,333; 1085400,
              342; 1087200,866; 1089000,843; 1090800,445; 1092600,54; 1094400,
              280; 1096200,1; 1098000,0; 1099800,0; 1101600,0; 1103400,0;
              1105200,0; 1107000,0; 1108800,0; 1110600,0; 1112400,0; 1114200,0;
              1116000,0; 1117800,0; 1119600,0; 1121400,0; 1123200,0; 1125000,0;
              1126800,0; 1128600,0; 1130400,0; 1132200,0; 1134000,0; 1135800,0;
              1137600,0; 1139400,0; 1141200,0; 1143000,0; 1144800,0; 1146600,0;
              1148400,0; 1150200,0; 1152000,0; 1153800,0; 1155600,0; 1157400,0;
              1159200,62; 1161000,3; 1162800,2; 1164600,18; 1166400,0; 1168200,
              0; 1170000,0; 1171800,8; 1173600,0; 1175400,0; 1177200,0; 1179000,
              277; 1180800,0; 1182600,9; 1184400,0; 1186200,0; 1188000,0;
              1189800,0; 1191600,0; 1193400,0; 1195200,0; 1197000,0; 1198800,0;
              1200600,0; 1202400,0; 1204200,0; 1206000,0; 1207800,0; 1209600,0;
              1211400,0; 1213200,0; 1215000,0; 1216800,0; 1218600,0; 1220400,0;
              1222200,0; 1224000,0; 1225800,0; 1227600,0; 1229400,0; 1231200,0;
              1233000,0; 1234800,0; 1236600,0; 1238400,361; 1240200,581;
              1242000,344; 1243800,266; 1245600,71; 1247400,57; 1249200,151;
              1251000,149; 1252800,256; 1254600,416; 1256400,79; 1258200,341;
              1260000,587; 1261800,324; 1263600,391; 1265400,16; 1267200,0;
              1269000,220; 1270800,165; 1272600,0; 1274400,0; 1276200,0;
              1278000,0; 1279800,0; 1281600,0; 1283400,0; 1285200,0; 1287000,0;
              1288800,0; 1290600,0; 1292400,0; 1294200,0; 1296000,0; 1297800,0;
              1299600,0; 1301400,0; 1303200,0; 1305000,0; 1306800,0; 1308600,0;
              1310400,0; 1312200,0; 1314000,0; 1315800,0; 1317600,0; 1319400,0;
              1321200,0; 1323000,0; 1324800,366; 1326600,593; 1328400,718;
              1330200,797; 1332000,850; 1333800,888; 1335600,914; 1337400,931;
              1339200,942; 1341000,947; 1342800,947; 1344600,941; 1346400,929;
              1348200,910; 1350000,884; 1351800,846; 1353600,794; 1355400,719;
              1357200,624; 1359000,400; 1360800,0; 1362600,0; 1364400,0;
              1366200,0; 1368000,0; 1369800,0; 1371600,0; 1373400,0; 1375200,0;
              1377000,0; 1378800,0; 1380600,0; 1382400,0; 1384200,0; 1386000,0;
              1387800,0; 1389600,0; 1391400,0; 1393200,0; 1395000,0; 1396800,0;
              1398600,0; 1400400,0; 1402200,0; 1404000,0; 1405800,0; 1407600,0;
              1409400,0; 1411200,60; 1413000,395; 1414800,555; 1416600,497;
              1418400,479; 1420200,639; 1422000,495; 1423800,479; 1425600,483;
              1427400,543; 1429200,521; 1431000,517; 1432800,916; 1434600,897;
              1436400,870; 1438200,832; 1440000,778; 1441800,703; 1443600,605;
              1445400,0; 1447200,0; 1449000,0; 1450800,0; 1452600,0; 1454400,0;
              1456200,0; 1458000,0; 1459800,0; 1461600,0; 1463400,0; 1465200,0;
              1467000,0; 1468800,0; 1470600,0; 1472400,0; 1474200,0; 1476000,0;
              1477800,0; 1479600,0; 1481400,0; 1483200,0; 1485000,0; 1486800,0;
              1488600,0; 1490400,0; 1492200,0; 1494000,0; 1495800,0; 1497600,
              361; 1499400,585; 1501200,712; 1503000,793; 1504800,849; 1506600,
              889; 1508400,917; 1510200,937; 1512000,949; 1513800,956; 1515600,
              956; 1517400,951; 1519200,940; 1521000,921; 1522800,895; 1524600,
              857; 1526400,805; 1528200,732; 1530000,637; 1531800,412; 1533600,
              0; 1535400,0; 1537200,0; 1539000,0; 1540800,0; 1542600,0; 1544400,
              0; 1546200,0; 1548000,0; 1549800,0; 1551600,0; 1553400,0; 1555200,
              0; 1557000,0; 1558800,0; 1560600,0; 1562400,0; 1564200,0; 1566000,
              0; 1567800,0; 1569600,0; 1571400,0; 1573200,0; 1575000,0; 1576800,
              0; 1578600,0; 1580400,0; 1582200,0; 1584000,359; 1585800,577;
              1587600,698; 1589400,775; 1591200,826; 1593000,863; 1594800,888;
              1596600,905; 1598400,161; 1600200,2; 1602000,79; 1603800,0;
              1605600,0; 1607400,0; 1609200,0; 1611000,0; 1612800,160; 1614600,
              0; 1616400,583; 1618200,0; 1620000,0; 1621800,0; 1623600,0;
              1625400,0; 1627200,0; 1629000,0; 1630800,0; 1632600,0; 1634400,0;
              1636200,0; 1638000,0; 1639800,0; 1641600,0; 1643400,0; 1645200,0;
              1647000,0; 1648800,0; 1650600,0; 1652400,0; 1654200,0; 1656000,0;
              1657800,0; 1659600,0; 1661400,0; 1663200,0; 1665000,0; 1666800,0;
              1668600,0; 1670400,358; 1672200,577; 1674000,701; 1675800,780;
              1677600,834; 1679400,871; 1681200,896; 1683000,913; 1684800,923;
              1686600,927; 1688400,926; 1690200,920; 1692000,907; 1693800,888;
              1695600,861; 1697400,470; 1699200,405; 1701000,90; 1702800,567;
              1704600,0; 1706400,0; 1708200,0; 1710000,0; 1711800,0; 1713600,0;
              1715400,0; 1717200,0; 1719000,0; 1720800,0; 1722600,0; 1724400,0;
              1726200,0; 1728000,0; 1729800,0; 1731600,0; 1733400,0; 1735200,0;
              1737000,0; 1738800,0; 1740600,0; 1742400,0; 1744200,0; 1746000,0;
              1747800,0; 1749600,0; 1751400,0; 1753200,0; 1755000,0; 1756800,
              343; 1758600,552; 1760400,671; 1762200,747; 1764000,798; 1765800,
              835; 1767600,861; 1769400,879; 1771200,890; 1773000,895; 1774800,
              0; 1776600,890; 1778400,879; 1780200,863; 1782000,838; 1783800,
              803; 1785600,753; 1787400,322; 1789200,0; 1791000,0; 1792800,0;
              1794600,0; 1796400,0; 1798200,0; 1800000,0; 1801800,0; 1803600,0;
              1805400,0; 1807200,0; 1809000,0; 1810800,0; 1812600,0; 1814400,0;
              1816200,0; 1818000,0; 1819800,0; 1821600,0; 1823400,0; 1825200,0;
              1827000,0; 1828800,0; 1830600,0; 1832400,0; 1834200,0; 1836000,0;
              1837800,0; 1839600,0; 1841400,0; 1843200,378; 1845000,597;
              1846800,720; 1848600,799; 1850400,852; 1852200,890; 1854000,917;
              1855800,936; 1857600,948; 1859400,954; 1861200,954; 1863000,949;
              1864800,937; 1866600,919; 1868400,893; 1870200,856; 1872000,804;
              1873800,732; 1875600,637; 1877400,414; 1879200,0; 1881000,0;
              1882800,0; 1884600,0; 1886400,0; 1888200,0; 1890000,0; 1891800,0;
              1893600,0; 1895400,0; 1897200,0; 1899000,0; 1900800,0; 1902600,0;
              1904400,0; 1906200,0; 1908000,0; 1909800,0; 1911600,0; 1913400,0;
              1915200,0; 1917000,0; 1918800,0; 1920600,0; 1922400,0; 1924200,0;
              1926000,0; 1927800,52; 1929600,380; 1931400,598; 1933200,721;
              1935000,800; 1936800,854; 1938600,892; 1940400,919; 1942200,937;
              1944000,949; 1945800,954; 1947600,954; 1949400,948; 1951200,936;
              1953000,918; 1954800,891; 1956600,854; 1958400,803; 1960200,732;
              1962000,637; 1963800,416; 1965600,0; 1967400,0; 1969200,0;
              1971000,0; 1972800,0; 1974600,0; 1976400,0; 1978200,0; 1980000,0;
              1981800,0; 1983600,0; 1985400,0; 1987200,0; 1989000,0; 1990800,0;
              1992600,0; 1994400,0; 1996200,0; 1998000,0; 1999800,0; 2001600,0;
              2003400,0; 2005200,0; 2007000,0; 2008800,0; 2010600,0; 2012400,0;
              2014200,0; 2016000,17; 2017800,235; 2019600,0; 2021400,93;
              2023200,238; 2025000,472; 2026800,889; 2028600,265; 2030400,610;
              2032200,571; 2034000,920; 2035800,914; 2037600,902; 2039400,884;
              2041200,858; 2043000,821; 2044800,771; 2046600,49; 2048400,47;
              2050200,386; 2052000,0; 2053800,0; 2055600,0; 2057400,0; 2059200,
              0; 2061000,0; 2062800,0; 2064600,0; 2066400,0; 2068200,0; 2070000,
              0; 2071800,0; 2073600,0; 2075400,0; 2077200,0; 2079000,0; 2080800,
              0; 2082600,0; 2084400,0; 2086200,0; 2088000,0; 2089800,0; 2091600,
              0; 2093400,0; 2095200,0; 2097000,0; 2098800,0; 2100600,58;
              2102400,361; 2104200,50; 2106000,96; 2107800,182; 2109600,58;
              2111400,28; 2113200,227; 2115000,194; 2116800,189; 2118600,444;
              2120400,917; 2122200,911; 2124000,900; 2125800,883; 2127600,857;
              2129400,821; 2131200,770; 2133000,699; 2134800,602; 2136600,387;
              2138400,0; 2140200,0; 2142000,0; 2143800,0; 2145600,0; 2147400,0;
              2149200,0; 2151000,0; 2152800,0; 2154600,0; 2156400,0; 2158200,0;
              2160000,0; 2161800,0; 2163600,0; 2165400,0; 2167200,0; 2169000,0;
              2170800,0; 2172600,0; 2174400,0; 2176200,0; 2178000,0; 2179800,0;
              2181600,0; 2183400,0; 2185200,0; 2187000,0; 2188800,0; 2190600,0;
              2192400,0; 2194200,91; 2196000,0; 2197800,0; 2199600,70; 2201400,
              13; 2203200,13; 2205000,24; 2206800,169; 2208600,168; 2210400,34;
              2212200,0; 2214000,0; 2215800,0; 2217600,0; 2219400,0; 2221200,17;
              2223000,0; 2224800,0; 2226600,0; 2228400,0; 2230200,0; 2232000,0;
              2233800,0; 2235600,0; 2237400,0; 2239200,0; 2241000,0; 2242800,0;
              2244600,0; 2246400,0; 2248200,0; 2250000,0; 2251800,0; 2253600,0;
              2255400,0; 2257200,0; 2259000,0; 2260800,0; 2262600,0; 2264400,0;
              2266200,0; 2268000,0; 2269800,0; 2271600,0; 2273400,66; 2275200,
              352; 2277000,551; 2278800,666; 2280600,0; 2282400,792; 2284200,24;
              2286000,161; 2287800,5; 2289600,11; 2291400,1; 2293200,6; 2295000,
              2; 2296800,0; 2298600,0; 2300400,0; 2302200,0; 2304000,0; 2305800,
              0; 2307600,580; 2309400,371; 2311200,0; 2313000,0; 2314800,0;
              2316600,0; 2318400,0; 2320200,0; 2322000,0; 2323800,0; 2325600,0;
              2327400,0; 2329200,0; 2331000,0; 2332800,0; 2334600,0; 2336400,0;
              2338200,0; 2340000,0; 2341800,0; 2343600,0; 2345400,0; 2347200,0;
              2349000,0; 2350800,0; 2352600,0; 2354400,0; 2356200,0; 2358000,0;
              2359800,73; 2361600,357; 2363400,555; 2365200,670; 2367000,745;
              2368800,797; 2370600,833; 2372400,858; 2374200,875; 2376000,885;
              2377800,890; 2379600,889; 2381400,882; 2383200,870; 2385000,851;
              2386800,825; 2388600,163; 2390400,222; 2392200,667; 2394000,226;
              2395800,112; 2397600,0; 2399400,0; 2401200,0; 2403000,0; 2404800,
              0; 2406600,0; 2408400,0; 2410200,0; 2412000,0; 2413800,0; 2415600,
              0; 2417400,0; 2419200,0; 2421000,0; 2422800,0; 2424600,0; 2426400,
              0; 2428200,0; 2430000,0; 2431800,0; 2433600,0; 2435400,0; 2437200,
              0; 2439000,0; 2440800,0; 2442600,0; 2444400,0; 2446200,0; 2448000,
              0; 2449800,0; 2451600,0; 2453400,0; 2455200,4; 2457000,14;
              2458800,17; 2460600,1; 2462400,45; 2464200,14; 2466000,27;
              2467800,10; 2469600,0; 2471400,0; 2473200,0; 2475000,0; 2476800,1;
              2478600,0; 2480400,57; 2482200,0; 2484000,0; 2485800,0; 2487600,0;
              2489400,0; 2491200,0; 2493000,0; 2494800,0; 2496600,0; 2498400,0;
              2500200,0; 2502000,0; 2503800,0; 2505600,0; 2507400,0; 2509200,0;
              2511000,0; 2512800,0; 2514600,0; 2516400,0; 2518200,0; 2520000,0;
              2521800,0; 2523600,0; 2525400,0; 2527200,0; 2529000,0; 2530800,0;
              2532600,0; 2534400,30; 2536200,0; 2538000,13; 2539800,0; 2541600,
              0; 2543400,0; 2545200,0; 2547000,0; 2548800,0; 2550600,0; 2552400,
              7; 2554200,0; 2556000,1; 2557800,0; 2559600,0; 2561400,0; 2563200,
              0; 2565000,0; 2566800,0; 2568600,0; 2570400,0; 2572200,0; 2574000,
              0; 2575800,0; 2577600,0; 2579400,0; 2581200,0; 2583000,0; 2584800,
              0; 2586600,0; 2588400,0; 2590200,0; 2592000,0; 2593800,0; 2595600,
              0; 2597400,0; 2599200,0; 2601000,0; 2602800,0; 2604600,0; 2606400,
              0; 2608200,0; 2610000,0; 2611800,0; 2613600,0; 2615400,0; 2617200,
              0; 2619000,0; 2620800,0; 2622600,0; 2624400,0; 2626200,0; 2628000,
              0; 2629800,70; 2631600,0; 2633400,0; 2635200,0; 2637000,0;
              2638800,0; 2640600,0; 2642400,78; 2644200,0; 2646000,0; 2647800,0;
              2649600,0; 2651400,9; 2653200,0; 2655000,0; 2656800,0; 2658600,0;
              2660400,0; 2662200,0; 2664000,0; 2665800,0; 2667600,0; 2669400,0;
              2671200,0; 2673000,0; 2674800,0; 2676600,0; 2678400,0])
          "Direct normall radiation"
          annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
        Modelica.Blocks.Sources.CombiTimeTable
                                         HGloHor(table=[0,0; 1800,0; 3600,0;
              5400,0; 7200,0; 9000,0; 10800,0; 12600,0; 14400,0; 16200,0; 18000,
              0; 19800,0; 21600,0; 23400,0; 25200,0; 27000,0; 28800,2; 30600,11;
              32400,29; 34200,21; 36000,16; 37800,283; 39600,68; 41400,164;
              43200,343; 45000,117; 46800,84; 48600,146; 50400,343; 52200,116;
              54000,232; 55800,102; 57600,92; 59400,95; 61200,52; 63000,0;
              64800,0; 66600,0; 68400,0; 70200,0; 72000,0; 73800,0; 75600,0;
              77400,0; 79200,0; 81000,0; 82800,0; 84600,0; 86400,0; 88200,0;
              90000,0; 91800,0; 93600,0; 95400,0; 97200,0; 99000,0; 100800,0;
              102600,0; 104400,0; 106200,0; 108000,0; 109800,0; 111600,0;
              113400,0; 115200,75; 117000,167; 118800,262; 120600,224; 122400,
              434; 124200,411; 126000,563; 127800,544; 129600,483; 131400,574;
              133200,478; 135000,458; 136800,187; 138600,318; 140400,285;
              142200,107; 144000,200; 145800,6; 147600,3; 149400,0; 151200,0;
              153000,0; 154800,0; 156600,0; 158400,0; 160200,0; 162000,0;
              163800,0; 165600,0; 167400,0; 169200,0; 171000,0; 172800,0;
              174600,0; 176400,0; 178200,0; 180000,0; 181800,0; 183600,0;
              185400,0; 187200,0; 189000,0; 190800,0; 192600,0; 194400,0;
              196200,0; 198000,0; 199800,0; 201600,49; 203400,37; 205200,241;
              207000,330; 208800,475; 210600,552; 212400,615; 214200,662;
              216000,691; 217800,545; 219600,431; 221400,374; 223200,351;
              225000,468; 226800,254; 228600,226; 230400,179; 232200,109;
              234000,61; 235800,0; 237600,0; 239400,0; 241200,0; 243000,0;
              244800,0; 246600,0; 248400,0; 250200,0; 252000,0; 253800,0;
              255600,0; 257400,0; 259200,0; 261000,0; 262800,0; 264600,0;
              266400,0; 268200,0; 270000,0; 271800,0; 273600,0; 275400,0;
              277200,0; 279000,0; 280800,0; 282600,0; 284400,0; 286200,0;
              288000,64; 289800,69; 291600,47; 293400,145; 295200,122; 297000,
              250; 298800,340; 300600,280; 302400,123; 304200,145; 306000,158;
              307800,149; 309600,205; 311400,194; 313200,96; 315000,77; 316800,
              66; 318600,62; 320400,34; 322200,0; 324000,0; 325800,0; 327600,0;
              329400,0; 331200,0; 333000,0; 334800,0; 336600,0; 338400,0;
              340200,0; 342000,0; 343800,0; 345600,0; 347400,0; 349200,0;
              351000,0; 352800,0; 354600,0; 356400,0; 358200,0; 360000,0;
              361800,0; 363600,0; 365400,0; 367200,0; 369000,0; 370800,0;
              372600,0; 374400,74; 376200,167; 378000,263; 379800,355; 381600,
              439; 383400,511; 385200,571; 387000,615; 388800,644; 390600,656;
              392400,651; 394200,630; 396000,593; 397800,540; 399600,474;
              401400,395; 403200,307; 405000,213; 406800,120; 408600,0; 410400,
              0; 412200,0; 414000,0; 415800,0; 417600,0; 419400,0; 421200,0;
              423000,0; 424800,0; 426600,0; 428400,0; 430200,0; 432000,0;
              433800,0; 435600,0; 437400,0; 439200,0; 441000,0; 442800,0;
              444600,0; 446400,0; 448200,0; 450000,0; 451800,0; 453600,0;
              455400,0; 457200,0; 459000,0; 460800,75; 462600,168; 464400,265;
              466200,357; 468000,440; 469800,335; 471600,181; 473400,85; 475200,
              88; 477000,90; 478800,138; 480600,318; 482400,257; 484200,267;
              486000,235; 487800,198; 489600,115; 491400,70; 493200,40; 495000,
              0; 496800,0; 498600,0; 500400,0; 502200,0; 504000,0; 505800,0;
              507600,0; 509400,0; 511200,0; 513000,0; 514800,0; 516600,0;
              518400,0; 520200,0; 522000,0; 523800,0; 525600,0; 527400,0;
              529200,0; 531000,0; 532800,0; 534600,0; 536400,0; 538200,0;
              540000,0; 541800,0; 543600,0; 545400,0; 547200,80; 549000,49;
              550800,281; 552600,321; 554400,467; 556200,544; 558000,607;
              559800,654; 561600,684; 563400,697; 565200,456; 567000,567;
              568800,377; 570600,496; 572400,274; 574200,332; 576000,160;
              577800,216; 579600,136; 581400,0; 583200,0; 585000,0; 586800,0;
              588600,0; 590400,0; 592200,0; 594000,0; 595800,0; 597600,0;
              599400,0; 601200,0; 603000,0; 604800,0; 606600,0; 608400,0;
              610200,0; 612000,0; 613800,0; 615600,0; 617400,0; 619200,0;
              621000,0; 622800,0; 624600,0; 626400,0; 628200,0; 630000,0;
              631800,0; 633600,43; 635400,107; 637200,122; 639000,36; 640800,17;
              642600,159; 644400,114; 646200,384; 648000,222; 649800,300;
              651600,428; 653400,356; 655200,164; 657000,377; 658800,352;
              660600,270; 662400,92; 664200,198; 666000,114; 667800,0; 669600,0;
              671400,0; 673200,0; 675000,0; 676800,0; 678600,0; 680400,0;
              682200,0; 684000,0; 685800,0; 687600,0; 689400,0; 691200,0;
              693000,0; 694800,0; 696600,0; 698400,0; 700200,0; 702000,0;
              703800,0; 705600,0; 707400,0; 709200,0; 711000,0; 712800,0;
              714600,0; 716400,0; 718200,0; 720000,71; 721800,163; 723600,112;
              725400,194; 727200,121; 729000,350; 730800,271; 732600,289;
              734400,238; 736200,237; 738000,270; 739800,239; 741600,231;
              743400,250; 745200,473; 747000,251; 748800,128; 750600,65; 752400,
              37; 754200,0; 756000,0; 757800,0; 759600,0; 761400,0; 763200,0;
              765000,0; 766800,0; 768600,0; 770400,0; 772200,0; 774000,0;
              775800,0; 777600,0; 779400,0; 781200,0; 783000,0; 784800,0;
              786600,0; 788400,0; 790200,0; 792000,0; 793800,0; 795600,0;
              797400,0; 799200,0; 801000,0; 802800,0; 804600,0; 806400,71;
              808200,163; 810000,231; 811800,322; 813600,382; 815400,414;
              817200,450; 819000,473; 820800,572; 822600,504; 824400,487;
              826200,399; 828000,267; 829800,321; 831600,391; 833400,355;
              835200,280; 837000,84; 838800,127; 840600,66; 842400,0; 844200,0;
              846000,0; 847800,0; 849600,0; 851400,0; 853200,0; 855000,0;
              856800,0; 858600,0; 860400,0; 862200,0; 864000,0; 865800,0;
              867600,0; 869400,0; 871200,0; 873000,0; 874800,0; 876600,0;
              878400,0; 880200,0; 882000,0; 883800,0; 885600,0; 887400,0;
              889200,0; 891000,0; 892800,74; 894600,167; 896400,181; 898200,358;
              900000,444; 901800,518; 903600,405; 905400,624; 907200,653;
              909000,666; 910800,661; 912600,640; 914400,389; 916200,550;
              918000,483; 919800,405; 921600,317; 923400,224; 925200,130;
              927000,65; 928800,0; 930600,0; 932400,0; 934200,0; 936000,0;
              937800,0; 939600,0; 941400,0; 943200,0; 945000,0; 946800,0;
              948600,0; 950400,0; 952200,0; 954000,0; 955800,0; 957600,0;
              959400,0; 961200,0; 963000,0; 964800,0; 966600,0; 968400,0;
              970200,0; 972000,0; 973800,0; 975600,0; 977400,0; 979200,81;
              981000,183; 982800,288; 984600,389; 986400,481; 988200,560;
              990000,626; 991800,676; 993600,709; 995400,724; 997200,721;
              999000,700; 1000800,661; 1002600,606; 1004400,536; 1006200,301;
              1008000,358; 1009800,256; 1011600,154; 1013400,76; 1015200,0;
              1017000,0; 1018800,0; 1020600,0; 1022400,0; 1024200,0; 1026000,0;
              1027800,0; 1029600,0; 1031400,0; 1033200,0; 1035000,0; 1036800,0;
              1038600,0; 1040400,0; 1042200,0; 1044000,0; 1045800,0; 1047600,0;
              1049400,0; 1051200,0; 1053000,0; 1054800,0; 1056600,0; 1058400,0;
              1060200,0; 1062000,0; 1063800,0; 1065600,78; 1067400,114; 1069200,
              211; 1071000,292; 1072800,339; 1074600,394; 1076400,597; 1078200,
              491; 1080000,672; 1081800,610; 1083600,510; 1085400,498; 1087200,
              619; 1089000,564; 1090800,410; 1092600,207; 1094400,242; 1096200,
              103; 1098000,61; 1099800,28; 1101600,0; 1103400,0; 1105200,0;
              1107000,0; 1108800,0; 1110600,0; 1112400,0; 1114200,0; 1116000,0;
              1117800,0; 1119600,0; 1121400,0; 1123200,0; 1125000,0; 1126800,0;
              1128600,0; 1130400,0; 1132200,0; 1134000,0; 1135800,0; 1137600,0;
              1139400,0; 1141200,0; 1143000,0; 1144800,0; 1146600,0; 1148400,0;
              1150200,0; 1152000,1; 1153800,58; 1155600,40; 1157400,129;
              1159200,227; 1161000,171; 1162800,176; 1164600,241; 1166400,110;
              1168200,115; 1170000,74; 1171800,218; 1173600,130; 1175400,79;
              1177200,119; 1179000,305; 1180800,11; 1182600,108; 1184400,65;
              1186200,30; 1188000,0; 1189800,0; 1191600,0; 1193400,0; 1195200,0;
              1197000,0; 1198800,0; 1200600,0; 1202400,0; 1204200,0; 1206000,0;
              1207800,0; 1209600,0; 1211400,0; 1213200,0; 1215000,0; 1216800,0;
              1218600,0; 1220400,0; 1222200,0; 1224000,0; 1225800,0; 1227600,0;
              1229400,0; 1231200,0; 1233000,0; 1234800,0; 1236600,0; 1238400,83;
              1240200,173; 1242000,215; 1243800,264; 1245600,235; 1247400,259;
              1249200,364; 1251000,391; 1252800,472; 1254600,551; 1256400,358;
              1258200,503; 1260000,549; 1261800,429; 1263600,400; 1265400,176;
              1267200,113; 1269000,170; 1270800,103; 1272600,48; 1274400,0;
              1276200,0; 1278000,0; 1279800,0; 1281600,0; 1283400,0; 1285200,0;
              1287000,0; 1288800,0; 1290600,0; 1292400,0; 1294200,0; 1296000,0;
              1297800,0; 1299600,0; 1301400,0; 1303200,0; 1305000,0; 1306800,0;
              1308600,0; 1310400,0; 1312200,0; 1314000,0; 1315800,0; 1317600,0;
              1319400,0; 1321200,0; 1323000,0; 1324800,84; 1326600,186; 1328400,
              292; 1330200,392; 1332000,484; 1333800,564; 1335600,629; 1337400,
              679; 1339200,712; 1341000,728; 1342800,725; 1344600,705; 1346400,
              668; 1348200,614; 1350000,545; 1351800,462; 1353600,369; 1355400,
              268; 1357200,165; 1359000,78; 1360800,0; 1362600,0; 1364400,0;
              1366200,0; 1368000,0; 1369800,0; 1371600,0; 1373400,0; 1375200,0;
              1377000,0; 1378800,0; 1380600,0; 1382400,0; 1384200,0; 1386000,0;
              1387800,0; 1389600,0; 1391400,0; 1393200,0; 1395000,0; 1396800,0;
              1398600,0; 1400400,0; 1402200,0; 1404000,0; 1405800,0; 1407600,0;
              1409400,0; 1411200,47; 1413000,152; 1414800,252; 1416600,320;
              1418400,387; 1420200,484; 1422000,503; 1423800,538; 1425600,564;
              1427400,592; 1429200,584; 1431000,567; 1432800,662; 1434600,609;
              1436400,540; 1438200,458; 1440000,365; 1441800,265; 1443600,163;
              1445400,76; 1447200,0; 1449000,0; 1450800,0; 1452600,0; 1454400,0;
              1456200,0; 1458000,0; 1459800,0; 1461600,0; 1463400,0; 1465200,0;
              1467000,0; 1468800,0; 1470600,0; 1472400,0; 1474200,0; 1476000,0;
              1477800,0; 1479600,0; 1481400,0; 1483200,0; 1485000,0; 1486800,0;
              1488600,0; 1490400,0; 1492200,0; 1494000,0; 1495800,0; 1497600,83;
              1499400,186; 1501200,292; 1503000,393; 1504800,486; 1506600,568;
              1508400,635; 1510200,687; 1512000,722; 1513800,739; 1515600,738;
              1517400,718; 1519200,681; 1521000,626; 1522800,557; 1524600,473;
              1526400,379; 1528200,277; 1530000,172; 1531800,82; 1533600,0;
              1535400,0; 1537200,0; 1539000,0; 1540800,0; 1542600,0; 1544400,0;
              1546200,0; 1548000,0; 1549800,0; 1551600,0; 1553400,0; 1555200,0;
              1557000,0; 1558800,0; 1560600,0; 1562400,0; 1564200,0; 1566000,0;
              1567800,0; 1569600,0; 1571400,0; 1573200,0; 1575000,0; 1576800,0;
              1578600,0; 1580400,0; 1582200,0; 1584000,83; 1585800,184; 1587600,
              288; 1589400,386; 1591200,476; 1593000,554; 1594800,619; 1596600,
              668; 1598400,426; 1600200,182; 1602000,364; 1603800,172; 1605600,
              107; 1607400,170; 1609200,137; 1611000,158; 1612800,221; 1614600,
              8; 1616400,164; 1618200,76; 1620000,0; 1621800,0; 1623600,0;
              1625400,0; 1627200,0; 1629000,0; 1630800,0; 1632600,0; 1634400,0;
              1636200,0; 1638000,0; 1639800,0; 1641600,0; 1643400,0; 1645200,0;
              1647000,0; 1648800,0; 1650600,0; 1652400,0; 1654200,0; 1656000,0;
              1657800,0; 1659600,0; 1661400,0; 1663200,0; 1665000,0; 1666800,0;
              1668600,0; 1670400,84; 1672200,185; 1674000,290; 1675800,390;
              1677600,482; 1679400,561; 1681200,626; 1683000,676; 1684800,709;
              1686600,724; 1688400,722; 1690200,702; 1692000,665; 1693800,612;
              1695600,544; 1697400,373; 1699200,288; 1701000,147; 1702800,159;
              1704600,75; 1706400,0; 1708200,0; 1710000,0; 1711800,0; 1713600,0;
              1715400,0; 1717200,0; 1719000,0; 1720800,0; 1722600,0; 1724400,0;
              1726200,0; 1728000,0; 1729800,0; 1731600,0; 1733400,0; 1735200,0;
              1737000,0; 1738800,0; 1740600,0; 1742400,0; 1744200,0; 1746000,0;
              1747800,0; 1749600,0; 1751400,0; 1753200,0; 1755000,0; 1756800,81;
              1758600,179; 1760400,280; 1762200,377; 1764000,465; 1765800,542;
              1767600,606; 1769400,655; 1771200,687; 1773000,703; 1774800,174;
              1776600,684; 1778400,649; 1780200,599; 1782000,533; 1783800,455;
              1785600,366; 1787400,203; 1789200,71; 1791000,33; 1792800,0;
              1794600,0; 1796400,0; 1798200,0; 1800000,0; 1801800,0; 1803600,0;
              1805400,0; 1807200,0; 1809000,0; 1810800,0; 1812600,0; 1814400,0;
              1816200,0; 1818000,0; 1819800,0; 1821600,0; 1823400,0; 1825200,0;
              1827000,0; 1828800,0; 1830600,0; 1832400,0; 1834200,0; 1836000,0;
              1837800,0; 1839600,0; 1841400,0; 1843200,88; 1845000,192; 1846800,
              299; 1848600,402; 1850400,495; 1852200,577; 1854000,645; 1855800,
              697; 1857600,732; 1859400,749; 1861200,748; 1863000,729; 1864800,
              692; 1866600,638; 1868400,568; 1870200,485; 1872000,390; 1873800,
              288; 1875600,183; 1877400,88; 1879200,0; 1881000,0; 1882800,0;
              1884600,0; 1886400,0; 1888200,0; 1890000,0; 1891800,0; 1893600,0;
              1895400,0; 1897200,0; 1899000,0; 1900800,0; 1902600,0; 1904400,0;
              1906200,0; 1908000,0; 1909800,0; 1911600,0; 1913400,0; 1915200,0;
              1917000,0; 1918800,0; 1920600,0; 1922400,0; 1924200,0; 1926000,0;
              1927800,8; 1929600,89; 1931400,194; 1933200,301; 1935000,404;
              1936800,498; 1938600,580; 1940400,648; 1942200,700; 1944000,735;
              1945800,753; 1947600,752; 1949400,732; 1951200,694; 1953000,640;
              1954800,571; 1956600,487; 1958400,393; 1960200,291; 1962000,186;
              1963800,90; 1965600,0; 1967400,0; 1969200,0; 1971000,0; 1972800,0;
              1974600,0; 1976400,0; 1978200,0; 1980000,0; 1981800,0; 1983600,0;
              1985400,0; 1987200,0; 1989000,0; 1990800,0; 1992600,0; 1994400,0;
              1996200,0; 1998000,0; 1999800,0; 2001600,0; 2003400,0; 2005200,0;
              2007000,0; 2008800,0; 2010600,0; 2012400,0; 2014200,4; 2016000,42;
              2017800,135; 2019600,80; 2021400,211; 2023200,327; 2025000,460;
              2026800,631; 2028600,472; 2030400,619; 2032200,620; 2034000,730;
              2035800,711; 2037600,674; 2039400,622; 2041200,555; 2043000,474;
              2044800,382; 2046600,139; 2048400,94; 2050200,87; 2052000,0;
              2053800,0; 2055600,0; 2057400,0; 2059200,0; 2061000,0; 2062800,0;
              2064600,0; 2066400,0; 2068200,0; 2070000,0; 2071800,0; 2073600,0;
              2075400,0; 2077200,0; 2079000,0; 2080800,0; 2082600,0; 2084400,0;
              2086200,0; 2088000,0; 2089800,0; 2091600,0; 2093400,0; 2095200,0;
              2097000,0; 2098800,0; 2100600,8; 2102400,87; 2104200,96; 2106000,
              163; 2107800,250; 2109600,235; 2111400,233; 2113200,422; 2115000,
              437; 2116800,456; 2118600,588; 2120400,730; 2122200,712; 2124000,
              676; 2125800,624; 2127600,557; 2129400,476; 2131200,385; 2133000,
              285; 2134800,183; 2136600,89; 2138400,0; 2140200,0; 2142000,0;
              2143800,0; 2145600,0; 2147400,0; 2149200,0; 2151000,0; 2152800,0;
              2154600,0; 2156400,0; 2158200,0; 2160000,0; 2161800,0; 2163600,0;
              2165400,0; 2167200,0; 2169000,0; 2170800,0; 2172600,0; 2174400,0;
              2176200,0; 2178000,0; 2179800,0; 2181600,0; 2183400,0; 2185200,0;
              2187000,0; 2188800,5; 2190600,12; 2192400,99; 2194200,213;
              2196000,146; 2197800,108; 2199600,317; 2201400,236; 2203200,244;
              2205000,288; 2206800,455; 2208600,442; 2210400,288; 2212200,167;
              2214000,78; 2215800,63; 2217600,140; 2219400,76; 2221200,89;
              2223000,43; 2224800,0; 2226600,0; 2228400,0; 2230200,0; 2232000,0;
              2233800,0; 2235600,0; 2237400,0; 2239200,0; 2241000,0; 2242800,0;
              2244600,0; 2246400,0; 2248200,0; 2250000,0; 2251800,0; 2253600,0;
              2255400,0; 2257200,0; 2259000,0; 2260800,0; 2262600,0; 2264400,0;
              2266200,0; 2268000,0; 2269800,0; 2271600,0; 2273400,9; 2275200,87;
              2277000,185; 2278800,287; 2280600,81; 2282400,473; 2284200,229;
              2286000,390; 2287800,197; 2289600,235; 2291400,171; 2293200,215;
              2295000,185; 2296800,136; 2298600,84; 2300400,138; 2302200,139;
              2304000,97; 2305800,96; 2307600,182; 2309400,89; 2311200,0;
              2313000,0; 2314800,0; 2316600,0; 2318400,0; 2320200,0; 2322000,0;
              2323800,0; 2325600,0; 2327400,0; 2329200,0; 2331000,0; 2332800,0;
              2334600,0; 2336400,0; 2338200,0; 2340000,0; 2341800,0; 2343600,0;
              2345400,0; 2347200,0; 2349000,0; 2350800,0; 2352600,0; 2354400,0;
              2356200,0; 2358000,0; 2359800,10; 2361600,88; 2363400,188;
              2365200,290; 2367000,388; 2368800,478; 2370600,557; 2372400,622;
              2374200,671; 2376000,705; 2377800,721; 2379600,719; 2381400,701;
              2383200,665; 2385000,614; 2386800,548; 2388600,297; 2390400,262;
              2392200,282; 2394000,135; 2395800,66; 2397600,0; 2399400,0;
              2401200,0; 2403000,0; 2404800,0; 2406600,0; 2408400,0; 2410200,0;
              2412000,0; 2413800,0; 2415600,0; 2417400,0; 2419200,0; 2421000,0;
              2422800,0; 2424600,0; 2426400,0; 2428200,0; 2430000,0; 2431800,0;
              2433600,0; 2435400,0; 2437200,0; 2439000,0; 2440800,0; 2442600,0;
              2444400,0; 2446200,2; 2448000,18; 2449800,38; 2451600,59; 2453400,
              32; 2455200,163; 2457000,211; 2458800,235; 2460600,171; 2462400,
              328; 2464200,257; 2466000,298; 2467800,234; 2469600,167; 2471400,
              112; 2473200,153; 2475000,69; 2476800,148; 2478600,5; 2480400,104;
              2482200,51; 2484000,0; 2485800,0; 2487600,0; 2489400,0; 2491200,0;
              2493000,0; 2494800,0; 2496600,0; 2498400,0; 2500200,0; 2502000,0;
              2503800,0; 2505600,0; 2507400,0; 2509200,0; 2511000,0; 2512800,0;
              2514600,0; 2516400,0; 2518200,0; 2520000,0; 2521800,0; 2523600,0;
              2525400,0; 2527200,0; 2529000,0; 2530800,0; 2532600,6; 2534400,49;
              2536200,57; 2538000,123; 2539800,23; 2541600,30; 2543400,63;
              2545200,84; 2547000,103; 2548800,75; 2550600,160; 2552400,223;
              2554200,158; 2556000,183; 2557800,136; 2559600,93; 2561400,48;
              2563200,40; 2565000,30; 2566800,82; 2568600,41; 2570400,0;
              2572200,0; 2574000,0; 2575800,0; 2577600,0; 2579400,0; 2581200,0;
              2583000,0; 2584800,0; 2586600,0; 2588400,0; 2590200,0; 2592000,0;
              2593800,0; 2595600,0; 2597400,0; 2599200,0; 2601000,0; 2602800,0;
              2604600,0; 2606400,0; 2608200,0; 2610000,0; 2611800,0; 2613600,0;
              2615400,0; 2617200,0; 2619000,3; 2620800,28; 2622600,43; 2624400,
              91; 2626200,48; 2628000,86; 2629800,293; 2631600,37; 2633400,18;
              2635200,162; 2637000,42; 2638800,104; 2640600,147; 2642400,359;
              2644200,170; 2646000,140; 2647800,142; 2649600,125; 2651400,128;
              2653200,83; 2655000,42; 2656800,0; 2658600,0; 2660400,0; 2662200,
              0; 2664000,0; 2665800,0; 2667600,0; 2669400,0; 2671200,0; 2673000,
              0; 2674800,0; 2676600,0; 2678400,0])
          "Horizontal global radiation"
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
      equation
        connect(grid.terminal, acLoad.terminal) annotation (Line(
            points={{-62,-52},{-62,-64},{-8,-64},{-8,-76},{-26,-76}},
            color={0,120,120},
            smooth=Smooth.None));

        connect(Warehouse.terminal, acLoad.terminal) annotation (Line(
            points={{58,-76},{-26,-76}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(acLoad.Pow, load.y) annotation (Line(
            points={{-46,-76},{-69,-76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(weaDatInpCon.weaBus, Warehouse.weaBus) annotation (Line(
            points={{60,22},{68,22},{68,-67}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
        connect(weaDatInpCon.HDifHor_in, HDifHor.y[1]) annotation (Line(
            points={{39,12.4},{18,12.4},{18,50},{1,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HGloHor.y[1], weaDatInpCon.HGloHor_in) annotation (Line(
            points={{1,10},{39,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HDirNor.y[1], weaDatInpCon.HDirNor_in) annotation (Line(
            points={{1,-20},{18,-20},{18,8.6},{39,8.6}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),        graphics));
      end PV1;

      model ComEneTran
        Buildings.Electrical.AC.OnePhase.Loads.Resistive loa
          annotation (Placement(transformation(extent={{-130,20},{-110,40}})));
        Buildings.Electrical.AC.OnePhase.Loads.Capacitive loa1
          annotation (Placement(transformation(extent={{-132,48},{-112,68}})));
        Buildings.Electrical.AC.OnePhase.Loads.Inductive loa2
          annotation (Placement(transformation(extent={{-118,4},{-98,24}})));
        Buildings.Electrical.AC.OnePhase.Loads.Impedance imp
          annotation (Placement(transformation(extent={{-132,70},{-112,90}})));
        Buildings.Fluid.FixedResistances.Pipe pip
          annotation (Placement(transformation(extent={{-110,92},{-90,112}})));
        Buildings.Fluid.FixedResistances.LosslessPipe pip1
          annotation (Placement(transformation(extent={{-60,94},{-40,114}})));
        Buildings.Fluid.FixedResistances.FixedResistanceDpM res
          annotation (Placement(transformation(extent={{-22,94},{-2,114}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -140,-120},{220,120}}), graphics={
              Rectangle(extent={{-22,64},{20,36}}, lineColor={0,0,255}),
              Ellipse(extent={{-26,54},{-20,48}}, lineColor={0,0,255}),
              Rectangle(extent={{-4,40},{2,34}}, lineColor={0,0,255}),
              Rectangle(extent={{8,50},{12,46}}, lineColor={0,0,255}),
              Line(
                points={{20,54},{16,50}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{24,50},{20,54}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{20,46},{16,50}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{24,50},{20,46}},
                color={0,0,255},
                smooth=Smooth.None),
              Rectangle(
                extent={{-70,12},{-52,-8}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-68,10},{-54,-6}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-140,-120},{220,120}}),
              graphics={
              Rectangle(
                extent={{-80,74},{-20,26}},
                lineColor={0,0,0},
                lineThickness=1),
              Rectangle(
                extent={{-58,34},{-42,18}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-56,32},{-44,20}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-88,56},{-74,42}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-86,44},{-76,54}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{20,74},{80,26}},
                lineColor={0,0,0},
                lineThickness=1),
              Rectangle(
                extent={{42,34},{58,18}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{44,32},{56,20}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12,56},{26,42}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{14,44},{24,54}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-80,-20},{80,-90}},
                lineColor={0,0,0},
                lineThickness=1),
              Rectangle(
                extent={{-8,-82},{8,-98}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-84},{6,-96}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-88,-54},{-74,-68}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-86,-66},{-76,-56}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{150,80},{210,32}},
                lineColor={0,0,0},
                lineThickness=1),
              Rectangle(
                extent={{172,40},{188,24}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{174,38},{186,26}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{142,62},{156,48}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{144,50},{154,60}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-72,56},{-58,48}},
                lineColor={0,0,255},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PC_1"),
              Text(
                extent={{28,58},{42,50}},
                lineColor={0,0,255},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PC_2"),
              Line(
                points={{19,-50},{-7,-50},{-7,50},{21,50}},
                color={0,0,255},
                smooth=Smooth.None,
                thickness=0.5,
                origin={-32,75},
                rotation=-90),
              Text(
                extent={{-72,-52},{-58,-60}},
                lineColor={0,0,255},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PC_3"),
              Text(
                extent={{158,64},{172,56}},
                lineColor={0,0,255},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PC_4"),
              Text(
                extent={{-56,42},{-42,34}},
                lineColor={0,255,128},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P1_2"),
              Text(
                extent={{-42,56},{-28,48}},
                lineColor={255,0,0},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PT_1"),
              Text(
                extent={{42,44},{56,36}},
                lineColor={0,255,128},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P2_2"),
              Text(
                extent={{-8,-72},{6,-80}},
                lineColor={0,255,128},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P3_2"),
              Text(
                extent={{172,50},{186,42}},
                lineColor={0,255,128},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P4_2"),
              Line(
                points={{-44,24},{44,24}},
                color={0,255,0},
                thickness=0.5,
                smooth=Smooth.None),
              Text(
                extent={{58,58},{72,50}},
                lineColor={255,0,0},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PT_2"),
              Text(
                extent={{56,-52},{70,-60}},
                lineColor={255,0,0},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PT_3"),
              Text(
                extent={{186,62},{200,54}},
                lineColor={255,0,0},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="PT_4"),
              Text(
                extent={{-78,76},{-56,62}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Group 1"),
              Text(
                extent={{22,76},{44,62}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Group 2"),
              Text(
                extent={{152,82},{174,68}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Group 4"),
              Text(
                extent={{-76,-20},{-54,-34}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Group 3"),
              Ellipse(
                extent={{144,-48},{158,-62}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{146,-60},{156,-50}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{144,-68},{160,-84}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{146,-70},{158,-82}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{80,56},{88,50},{80,44},{80,56}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{164,-50},{210,-64}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Port for communication"),
              Text(
                extent={{164,-72},{192,-82}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Port for energy"),
              Text(
                extent={{164,-90},{206,-102}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                textString="Port for transportation"),
              Polygon(
                points={{80,56},{72,50},{80,44},{80,56}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,58},{-12,52},{-20,46},{-20,58}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,58},{-28,52},{-20,46},{-20,58}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{80,-54},{88,-60},{80,-66},{80,-54}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{80,-54},{72,-60},{80,-66},{80,-54}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{210,62},{218,56},{210,50},{210,62}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{210,62},{202,56},{210,50},{210,62}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{152,-88},{160,-94},{152,-100},{152,-88}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{152,-88},{144,-94},{152,-100},{152,-88}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-16,54},{-16,88},{84,88},{84,52}},
                color={255,0,0},
                thickness=0.5,
                smooth=Smooth.None)}));
      end ComEneTran;

      model module
        annotation (Diagram(coordinateSystem(extent={{-140,-80},{140,80}},
                preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,60},{80,-60}},
                lineColor={0,0,0},
                lineThickness=1),
              Rectangle(
                extent={{-16,-52},{0,-68}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-14,-54},{-2,-66}},
                lineColor={0,0,255},
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{80,6},{92,0},{80,-6},{80,6}},
                lineColor={175,175,175},
                lineThickness=1,
                smooth=Smooth.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-108,8},{-94,-6}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-106,-4},{-96,6}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-90,2},{-82,-4}},
                lineColor={0,0,255},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P_1"),
              Text(
                extent={{-26,-54},{-18,-60}},
                lineColor={0,255,128},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P_2"),
              Text(
                extent={{68,2},{76,-4}},
                lineColor={255,0,0},
                lineThickness=0.5,
                fillColor={0,255,128},
                fillPattern=FillPattern.Solid,
                textString="P_3"),
              Text(
                extent={{-98,58},{-60,48}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                fontSize=24,
                textString="Group module"),
              Rectangle(
                extent={{14,44},{60,14}},
                lineColor={255,0,0},
                lineThickness=1),
              Rectangle(
                extent={{-36,-16},{18,-48}},
                lineColor={0,255,0},
                lineThickness=1),
              Rectangle(
                extent={{-74,44},{-26,14}},
                lineColor={0,0,255},
                lineThickness=1),
              Text(
                extent={{-72,46},{-40,34}},
                lineColor={0,0,255},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fontSize=18,
                textString="Communication"),
              Text(
                extent={{22,46},{52,36}},
                lineColor={255,0,0},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fontSize=18,
                textString="Transportation"),
              Text(
                extent={{-34,-16},{-20,-26}},
                lineColor={0,255,0},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fontSize=18,
                textString="Energy"),
              Line(
                points={{-74,14},{-96,4}},
                color={0,0,255},
                thickness=1,
                smooth=Smooth.None),
              Line(
                points={{-8,-48},{-8,-56}},
                color={0,255,0},
                thickness=1,
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.Filled}),
              Line(
                points={{60,14},{82,0}},
                color={255,0,0},
                thickness=1,
                smooth=Smooth.None),
              Line(
                points={{-48,14},{-36,-16}},
                color={0,0,0},
                thickness=0.5,
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.Filled}),
              Line(
                points={{-26,30},{14,30}},
                color={0,0,0},
                thickness=0.5,
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.Filled}),
              Line(
                points={{34,14},{18,-16}},
                color={0,0,0},
                thickness=0.5,
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.Filled})}), Icon(coordinateSystem(
                extent={{-140,-80},{140,80}})));
      end module;

      model PV_tampa
        Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented Warehouse(
          A=50,
          eta_DCAC=0.8,
          V_nominal=240,
          til=0.087266462599716,
          lat=0.48816859178281,
          azi=-0.78539816339745)
          annotation (Placement(transformation(extent={{68,-76},{88,-56}})));
        Modelica.Blocks.Sources.Constant  load(k=0.5) "Load consumption"
          annotation (Placement(transformation(extent={{-80,-76},{-60,-56}})));
        Buildings.Electrical.AC.OnePhase.Sources.Grid grid(f=60, V=240)
          "Electrical grid model"
          annotation (Placement(transformation(extent={{-38,-26},{-18,-6}})));
        Buildings.Electrical.AC.OnePhase.Loads.Inductive acLoad(mode=Buildings.Electrical.Types.Load.VariableZ_P_input,
            V_nominal=480)
          annotation (Placement(transformation(extent={{-16,-76},{-36,-56}})));
        basemodel.ReaderTMY3                                weaDatInpCon(filNam=
              "C:/Users/dhe/Desktop/HGVModel/greenvillage/GreenVillage/Buildings/Resources/weatherdata/USA_FL_Tampa.Intl.AP.722110_TMY3.mos",
            HSou=GreenVillage.Buildings.BoundaryConditions.Types.RadiationDataSource.File)
          "Weather data reader with radiation data obtained from input connector"
          annotation (Placement(transformation(extent={{50,22},{70,42}})));
      equation
        connect(grid.terminal,acLoad. terminal) annotation (Line(
            points={{-28,-26},{-26,-26},{-26,-42},{0,-42},{0,-66},{-16,-66}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(Warehouse.terminal,acLoad. terminal) annotation (Line(
            points={{68,-66},{-16,-66}},
            color={0,120,120},
            smooth=Smooth.None));
        connect(acLoad.Pow,load. y) annotation (Line(
            points={{-36,-66},{-59,-66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(weaDatInpCon.weaBus,Warehouse. weaBus) annotation (Line(
            points={{70,32},{78,32},{78,-57}},
            color={255,204,51},
            thickness=0.5,
            smooth=Smooth.None));
      end PV_tampa;
    end PVS;

    package basemodel
      block ReaderTMY3 "Reader for TMY3 weather data"

        parameter Boolean computeWetBulbTemperature = true
          "If true, then this model computes the wet bulb temperature"
          annotation(Evaluate=true);
        //--------------------------------------------------------------
        // Atmospheric pressure
        parameter Buildings.BoundaryConditions.Types.DataSource pAtmSou=Buildings.BoundaryConditions.Types.DataSource.Parameter
          "Atmospheric pressure"
          annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.Pressure pAtm=101325
          "Atmospheric pressure (used if pAtmSou=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput pAtm_in(
          final quantity="Pressure",
          final unit="Pa",
          displayUnit="Pa") if (pAtmSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input pressure"
          annotation (Placement(transformation(extent={{-240,254},{-200,294}}),
              iconTransformation(extent={{-240,254},{-200,294}})));
        //--------------------------------------------------------------
        // Ceiling height
        parameter Buildings.BoundaryConditions.Types.DataSource ceiHeiSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Ceiling height" annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Real ceiHei(
          final quantity="Height",
          final unit="m",
          displayUnit="m") = 20000 "Ceiling height (used if ceiHei=Parameter)"
          annotation (Dialog(group="Data source"));
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput ceiHei_in(
          final quantity="Height",
          final unit="m",
          displayUnit="m") if (ceiHeiSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input ceiling height"
          annotation (Placement(transformation(extent={{-242,-14},{-202,26}}),
              iconTransformation(extent={{-242,-14},{-202,26}})));
        //--------------------------------------------------------------
        // Total sky cover
        parameter Buildings.BoundaryConditions.Types.DataSource totSkyCovSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Total sky cover" annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Real totSkyCov(
          min=0,
          max=1,
          unit="1") = 0.5
          "Total sky cover (used if totSkyCov=Parameter). Use 0 <= totSkyCov <= 1"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput totSkyCov_in(
          min=0,
          max=1,
          unit="1") if (totSkyCovSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input total sky cover"
          annotation (Placement(transformation(extent={{-240,-58},{-200,-18}}),
              iconTransformation(extent={{-240,-58},{-200,-18}})));
        // Opaque sky cover
        parameter Buildings.BoundaryConditions.Types.DataSource opaSkyCovSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Opaque sky cover" annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Real opaSkyCov(
          min=0,
          max=1,
          unit="1") = 0.5
          "Opaque sky cover (used if opaSkyCov=Parameter). Use 0 <= opaSkyCov <= 1"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput opaSkyCov_in(
          min=0,
          max=1,
          unit="1") if (opaSkyCovSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input opaque sky cover"
          annotation (Placement(transformation(extent={{-240,32},{-200,72}}),
              iconTransformation(extent={{-240,32},{-200,72}})));
        //--------------------------------------------------------------
        // Dry bulb temperature
        parameter Buildings.BoundaryConditions.Types.DataSource TDryBulSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Dry bulb temperature"
          annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.Temperature TDryBul(displayUnit="degC") = 293.15
          "Dry bulb temperature (used if TDryBul=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput TDryBul_in(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") if (TDryBulSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input dry bulb temperature"
          annotation (Placement(transformation(extent={{-240,160},{-200,200}})));

        //--------------------------------------------------------------
        // Dew point temperature
        parameter Buildings.BoundaryConditions.Types.DataSource TDewPoiSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Dew point temperature"
          annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.Temperature TDewPoi(displayUnit="degC") = 283.15
          "Dew point temperature (used if TDewPoi=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput TDewPoi_in(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") if (TDewPoiSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input dew point temperature"
          annotation (Placement(transformation(extent={{-240,204},{-200,244}})));

        //--------------------------------------------------------------
        // Black body sky temperature
        parameter Buildings.BoundaryConditions.Types.DataSource TBlaSkySou=Buildings.BoundaryConditions.Types.DataSource.File
          "Black-body sky temperature"
          annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.Temperature TBlaSky=273.15
          "Black-body sky temperature (used if TBlaSkySou=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput TBlaSky_in(
          final quantity="ThermodynamicTemperature",
          displayUnit="degC",
          final unit="K") if (TBlaSkySou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Black-body sky temperature"
          annotation (Placement(transformation(extent={{-240,120},{-200,160}}),
              iconTransformation(extent={{-240,120},{-200,160}})));

        //--------------------------------------------------------------
        // Relative humidity
        parameter Buildings.BoundaryConditions.Types.DataSource relHumSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Relative humidity" annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Real relHum(
          min=0,
          max=1,
          unit="1") = 0.5 "Relative humidity (used if relHum=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput relHum_in(
          min=0,
          max=1,
          unit="1") if (relHumSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input relative humidity"
          annotation (Placement(transformation(extent={{-240,80},{-200,120}}),
              iconTransformation(extent={{-240,80},{-200,120}})));
        //--------------------------------------------------------------
        // Wind speed
        parameter Buildings.BoundaryConditions.Types.DataSource winSpeSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Wind speed" annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.Velocity winSpe(min=0) = 1
          "Wind speed (used if winSpe=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput winSpe_in(
          final quantity="Velocity",
          final unit="m/s",
          min=0) if (winSpeSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input wind speed"
          annotation (Placement(transformation(extent={{-240,-98},{-200,-58}}),
              iconTransformation(extent={{-240,-98},{-200,-58}})));
        //--------------------------------------------------------------
        // Wind direction
        parameter Buildings.BoundaryConditions.Types.DataSource winDirSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Wind direction" annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.Angle winDir=1.0
          "Wind direction (used if winDir=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput winDir_in(
          final quantity="Angle",
          final unit="rad",
          displayUnit="deg") if (winDirSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input wind direction"
          annotation (Placement(transformation(extent={{-240,-136},{-200,-96}}),
              iconTransformation(extent={{-240,-136},{-200,-96}})));
        //--------------------------------------------------------------
        // Infrared horizontal radiation
        parameter Buildings.BoundaryConditions.Types.DataSource HInfHorSou=Buildings.BoundaryConditions.Types.DataSource.File
          "Infrared horizontal radiation"
          annotation (Evaluate=true, Dialog(group="Data source"));
        parameter Modelica.SIunits.HeatFlux HInfHor=0.0
          "Infrared horizontal radiation (used if HInfHorSou=Parameter)"
          annotation (Dialog(group="Data source"));
        Modelica.Blocks.Interfaces.RealInput HInfHor_in(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") if (HInfHorSou == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Input infrared horizontal radiation"
          annotation (Placement(transformation(extent={{-240,-174},{-200,-134}}),
              iconTransformation(extent={{-240,-174},{-200,-134}})));

         parameter GreenVillage.MicroGrid.Types.RadiationDataSource HSou=GreenVillage.MicroGrid.Types.RadiationDataSource.File
          "Global, diffuse, and direct normal radiation"
          annotation (Evaluate=true, Dialog(group="Data source"));
        //--------------------------------------------------------------
        // Global horizontal radiation
        Modelica.Blocks.Interfaces.RealInput HGloHor_in(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") if (HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HGloHor_HDifHor
           or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor
           or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HGloHor)
          "Input global horizontal radiation"
          annotation (Placement(transformation(extent={{-240,-260},{-200,-220}}),
              iconTransformation(extent={{-240,-260},{-200,-220}})));
        //--------------------------------------------------------------
        // Diffuse horizontal radiation
        Modelica.Blocks.Interfaces.RealInput HDifHor_in(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") if (HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HGloHor_HDifHor
           or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor
           or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor)
          "Input diffuse horizontal radiation"
          annotation (Placement(transformation(extent={{-240,-220},{-200,-180}}),
              iconTransformation(extent={{-240,-212},{-200,-172}})));
        //--------------------------------------------------------------
        // Direct normal radiation
        Modelica.Blocks.Interfaces.RealInput HDirNor_in(final quantity="RadiantEnergyFluenceRate",
            final unit="W/m2") if (HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor
           or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor
           or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HGloHor)
          "Input direct normal radiation"
          annotation (Placement(transformation(extent={{-240,-320},{-200,-280}}),
              iconTransformation(extent={{-240,-288},{-200,-248}})));

        //--------------------------------------------------------------
        parameter String filNam="" "Name of weather data file" annotation (Dialog(
              __Dymola_loadSelector(filter="Weather files (*.mos)", caption=
                  "Select weather file")));
        final parameter Modelica.SIunits.Angle lon(displayUnit="deg")=
          Buildings.BoundaryConditions.WeatherData.BaseClasses.getLongitudeTMY3(
          filNam) "Longitude";
        final parameter Modelica.SIunits.Angle lat(displayUnit="deg")=
          Buildings.BoundaryConditions.WeatherData.BaseClasses.getLatitudeTMY3(
          filNam) "Latitude";
        final parameter Modelica.SIunits.Time timZon(displayUnit="h")=
          Buildings.BoundaryConditions.WeatherData.BaseClasses.getTimeZoneTMY3(filNam)
          "Time zone";
        Buildings.BoundaryConditions.WeatherData.Bus
            weaBus "Weather data bus" annotation (Placement(transformation(extent={{
                  290,-10},{310,10}}), iconTransformation(extent={{190,-10},{210,10}})));

        parameter Buildings.BoundaryConditions.Types.SkyTemperatureCalculation calTSky=Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.
             TemperaturesAndSkyCover
          "Computation of black-body sky temperature"
          annotation (
          choicesAllMatching=true,
          Evaluate=true,
          Dialog(group="Sky temperature"));

        constant Real epsCos = 1e-6 "Small value to avoid division by 0";

      protected
        Modelica.Blocks.Tables.CombiTable1Ds datRea(
          final tableOnFile=true,
          final tableName="tab1",
          final fileName=Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath(filNam),
          final smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
          final columns={2,3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
              28,29,30}) "Data reader"
          annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckTemperature cheTemDryBul
          "Check dry bulb temperature "
          annotation (Placement(transformation(extent={{160,-200},{180,-180}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckTemperature cheTemDewPoi
          "Check dew point temperature"
          annotation (Placement(transformation(extent={{160,-240},{180,-220}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertRelativeHumidity
                                                                                     conRelHum
          "Convert the relative humidity from percentage to [0, 1] "
          annotation (Placement(transformation(extent={{120,20},{140,40}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckPressure
                                  chePre "Check the air pressure"
          annotation (Placement(transformation(extent={{160,60},{180,80}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckSkyCover
                                  cheTotSkyCov "Check the total sky cover"
          annotation (Placement(transformation(extent={{160,-40},{180,-20}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckSkyCover
                                  cheOpaSkyCov "Check the opaque sky cover"
          annotation (Placement(transformation(extent={{162,-160},{182,-140}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckRadiation
                                   cheGloHorRad
          "Check the global horizontal radiation"
          annotation (Placement(transformation(extent={{160,160},{180,180}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckRadiation
                                   cheDifHorRad
          "Check the diffuse horizontal radiation"
          annotation (Placement(transformation(extent={{160,120},{180,140}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckRadiation
                                   cheDirNorRad
          "Check the direct normal radiation"
          annotation (Placement(transformation(extent={{160,200},{180,220}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckCeilingHeight
                                       cheCeiHei "Check the ceiling height"
          annotation (Placement(transformation(extent={{160,-120},{180,-100}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckWindSpeed
                                   cheWinSpe "Check the wind speed"
          annotation (Placement(transformation(extent={{160,-80},{180,-60}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckRadiation
                                   cheHorRad "Check the horizontal radiation"
          annotation (Placement(transformation(extent={{160,240},{180,260}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckWindDirection
                                       cheWinDir "Check the wind direction"
          annotation (Placement(transformation(extent={{160,-280},{180,-260}})));
        Buildings.BoundaryConditions.SkyTemperature.BlackBody
                                 TBlaSkyCom(final calTSky=calTSky) if not (TBlaSkySou
           == Buildings.BoundaryConditions.Types.DataSource.Parameter or TBlaSkySou
           == Buildings.BoundaryConditions.Types.DataSource.Input)
          "Computation of the sky black-body temperature"
          annotation (Placement(transformation(extent={{240,-220},{260,-200}})));
        Buildings.Utilities.Time.ModelTime
                                 modTim "Model time"
          annotation (Placement(transformation(extent={{-180,-10},{-160,10}})));
        Modelica.Blocks.Math.Add add
          "Add 30 minutes to time to shift weather data reader"
          annotation (Placement(transformation(extent={{-140,160},{-120,180}})));
        Modelica.Blocks.Sources.Constant con30mins(final k=1800)
          "Constant used to shift weather data reader"
          annotation (Placement(transformation(extent={{-180,192},{-160,212}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.LocalCivilTime locTim(final lon=
             lon, final timZon=timZon) "Local civil time"
          annotation (Placement(transformation(extent={{-120,-160},{-100,-140}})));
        Modelica.Blocks.Tables.CombiTable1Ds datRea1(
          final tableOnFile=true,
          final tableName="tab1",
          final fileName=Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath(filNam),
          final smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
          final columns=8:11) "Data reader"
          annotation (Placement(transformation(extent={{-80,160},{-60,180}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertTime conTim1
          "Convert simulation time to calendar time"
          annotation (Placement(transformation(extent={{-110,160},{-90,180}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertTime
                                conTim
          "Convert simulation time to calendar time"
          annotation (Placement(transformation(extent={{-120,-40},{-100,-20}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.EquationOfTime
                                   eqnTim "Equation of time"
          annotation (Placement(transformation(extent={{-120,-120},{-100,-100}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.SolarTime
                              solTim "Solar time"
          annotation (Placement(transformation(extent={{-80,-140},{-60,-120}})));
        // Conditional connectors
        Modelica.Blocks.Interfaces.RealInput pAtm_in_internal(
          final quantity="Pressure",
          final unit="Pa",
          displayUnit="bar") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput ceiHei_in_internal(
          final quantity="Height",
          final unit="m",
          displayUnit="m") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput totSkyCov_in_internal(
          final quantity="1",
          min=0,
          max=1) "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput opaSkyCov_in_internal(
          final quantity="1",
          min=0,
          max=1) "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput TDryBul_in_internal(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput TDewPoi_in_internal(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput TBlaSky_in_internal(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput relHum_in_internal(
          final quantity="1",
          min=0,
          max=1) "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput winSpe_in_internal(
          final quantity="Velocity",
          final unit="m/s") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput winDir_in_internal(
          final quantity="Angle",
          final unit="rad",
          displayUnit="deg") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput HGloHor_in_internal(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput HDifHor_in_internal(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput HDirNor_in_internal(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") "Needed to connect to conditional connector";
        Modelica.Blocks.Interfaces.RealInput HInfHor_in_internal(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") "Needed to connect to conditional connector";

        Modelica.Blocks.Math.UnitConversions.From_deg conWinDir
          "Convert the wind direction unit from [deg] to [rad]"
          annotation (Placement(transformation(extent={{120,-280},{140,-260}})));
        Modelica.Blocks.Math.UnitConversions.From_degC conTDryBul
          annotation (Placement(transformation(extent={{120,-200},{140,-180}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertRadiation
                                     conHorRad
          annotation (Placement(transformation(extent={{120,240},{140,260}})));
        Modelica.Blocks.Math.UnitConversions.From_degC conTDewPoi
          "Convert the dew point temperature form [degC] to [K]"
          annotation (Placement(transformation(extent={{120,-240},{140,-220}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertRadiation
                                     conDirNorRad
          annotation (Placement(transformation(extent={{120,200},{140,220}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertRadiation
                                     conGloHorRad
          annotation (Placement(transformation(extent={{122,160},{142,180}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.ConvertRadiation
                                     conDifHorRad
          annotation (Placement(transformation(extent={{120,120},{140,140}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckRelativeHumidity
                                          cheRelHum
          annotation (Placement(transformation(extent={{160,20},{180,40}})));
        Buildings.BoundaryConditions.SolarGeometry.BaseClasses.AltitudeAngle
                                                altAng "Solar altitude angle"
          annotation (Placement(transformation(extent={{-30,-280},{-10,-260}})));
         Buildings.BoundaryConditions.SolarGeometry.BaseClasses.ZenithAngle
                                               zenAng(
           final lat = lat) "Zenith angle"
          annotation (Placement(transformation(extent={{-80,-226},{-60,-206}})));
         Buildings.BoundaryConditions.SolarGeometry.BaseClasses.Declination
                                               decAng "Declination angle"
          annotation (Placement(transformation(extent={{-140,-220},{-120,-200}})));
         Buildings.BoundaryConditions.SolarGeometry.BaseClasses.SolarHourAngle
          solHouAng
          annotation (Placement(transformation(extent={{-140,-250},{-120,-230}})));
        Modelica.Blocks.Sources.Constant latitude(final k=lat) "Latitude"
          annotation (Placement(transformation(extent={{-180,-280},{-160,-260}})));
        Modelica.Blocks.Sources.Constant longitude(final k=lon) "Longitude"
          annotation (Placement(transformation(extent={{-140,-280},{-120,-260}})));

        //---------------------------------------------------------------------------
        // Optional instanciation of a block that computes the wet bulb temperature.
        // This block may be needed for evaporative cooling towers.
        // By default, it is enabled. This introduces a nonlinear equation, but
        // we have not observed an increase in computing time because of this equation.
        Buildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi tWetBul_TDryBulXi(
            redeclare package Medium = Buildings.Media.Air, TDryBul(displayUnit=
                "degC")) if computeWetBulbTemperature
          annotation (Placement(transformation(extent={{244,-66},{264,-46}})));

        //---------------------------------------------------------------------------
        // Conversion blocks for sky cover
        Modelica.Blocks.Math.Gain conTotSkyCov(final k=0.1) if totSkyCovSou ==
          Buildings.BoundaryConditions.Types.DataSource.File
          "Convert sky cover from [0...10] to [0...1]"
          annotation (Placement(transformation(extent={{120,-40},{140,-20}})));
        Modelica.Blocks.Math.Gain conOpaSkyCov(final k=0.1) if opaSkyCovSou ==
          Buildings.BoundaryConditions.Types.DataSource.File
          "Convert sky cover from [0...10] to [0...1]"
          annotation (Placement(transformation(extent={{120,-158},{140,-138}})));
      equation
        //---------------------------------------------------------------------------
        // Select atmospheric pressure connector
        if pAtmSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          pAtm_in_internal = pAtm;
        elseif pAtmSou == Buildings.BoundaryConditions.Types.DataSource.File then
          connect(datRea.y[4], pAtm_in_internal);
        else
          connect(pAtm_in, pAtm_in_internal);
        end if;
        connect(pAtm_in_internal, chePre.PIn);
        //---------------------------------------------------------------------------
        // Select ceiling height connector
        if ceiHeiSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          ceiHei_in_internal = ceiHei;
        elseif ceiHeiSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(ceiHei_in, ceiHei_in_internal);
        else
          connect(datRea.y[16], ceiHei_in_internal);
        end if;
         connect(ceiHei_in_internal, cheCeiHei.ceiHeiIn);

        //---------------------------------------------------------------------------
        // Select total sky cover connector
        if totSkyCovSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          totSkyCov_in_internal = totSkyCov;
        elseif totSkyCovSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(totSkyCov_in, totSkyCov_in_internal);
        else
          connect(conTotSkyCov.u, datRea.y[13]) annotation (Line(
            points={{118,-30},{-59,-30}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(conTotSkyCov.y, totSkyCov_in_internal);
        end if;
        connect(totSkyCov_in_internal, cheTotSkyCov.nIn);
        //---------------------------------------------------------------------------
        // Select opaque sky cover connector
        if opaSkyCovSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          opaSkyCov_in_internal = opaSkyCov;
        elseif opaSkyCovSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(opaSkyCov_in, opaSkyCov_in_internal);
        else
          connect(conOpaSkyCov.u, datRea.y[14]) annotation (Line(
            points={{118,-148},{30,-148},{30,-29.92},{-59,-29.92}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(conOpaSkyCov.y, opaSkyCov_in_internal);
        end if;
        connect(opaSkyCov_in_internal, cheOpaSkyCov.nIn);

        //---------------------------------------------------------------------------
        // Select dew point temperature connector
        if TDewPoiSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          TDewPoi_in_internal = TDewPoi;
        elseif TDewPoiSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(TDewPoi_in, TDewPoi_in_internal);
        else
          connect(conTDewPoi.y, TDewPoi_in_internal);
        end if;
        connect(TDewPoi_in_internal, cheTemDewPoi.TIn);
        //---------------------------------------------------------------------------
        // Select dry bulb temperature connector
        if TDryBulSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          TDryBul_in_internal = TDryBul;
        elseif TDryBulSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(TDryBul_in, TDryBul_in_internal);
        else
          connect(conTDryBul.y, TDryBul_in_internal);
        end if;
        connect(TDryBul_in_internal, cheTemDryBul.TIn);
        //---------------------------------------------------------------------------
        // Select sky black body temperature connector
        if TBlaSkySou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          TBlaSky_in_internal = TBlaSky;
        elseif TBlaSkySou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(TBlaSky_in, TBlaSky_in_internal);
        else
          connect(TBlaSkyCom.TBlaSky, TBlaSky_in_internal);
        end if;
        connect(TBlaSky_in_internal, weaBus.TBlaSky);
        //---------------------------------------------------------------------------
        // Select relative humidity connector
        if relHumSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          relHum_in_internal = relHum;
        elseif relHumSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(relHum_in, relHum_in_internal);
        else
          connect(conRelHum.relHumOut, relHum_in_internal);
        end if;
        connect(relHum_in_internal, cheRelHum.relHumIn);
        //---------------------------------------------------------------------------
        // Select wind speed connector
        if winSpeSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          winSpe_in_internal = winSpe;
        elseif winSpeSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(winSpe_in, winSpe_in_internal);
        else
          connect(datRea.y[12], winSpe_in_internal);
        end if;
        connect(winSpe_in_internal, cheWinSpe.winSpeIn);
        //---------------------------------------------------------------------------
        // Select wind direction connector
        if winDirSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          winDir_in_internal = winDir;
        elseif winDirSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(winDir_in, winDir_in_internal);
        else
          connect(conWinDir.y, winDir_in_internal);
        end if;
        connect(winDir_in_internal, cheWinDir.nIn);
        //---------------------------------------------------------------------------
        // Select global horizontal radiation connector
        if HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HGloHor_HDifHor
             or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HGloHor then
          connect(HGloHor_in, HGloHor_in_internal)
            "Get HGloHor using user input file";
        elseif HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor then
           HDirNor_in_internal*cos(zenAng.zen)+HDifHor_in_internal = HGloHor_in_internal
            "Calculate the HGloHor using HDirNor and HDifHor according to (A.4.14) and (A.4.15)";
        else
          connect(conGloHorRad.HOut, HGloHor_in_internal)
            "Get HGloHor using weather data file";
        end if;
        connect(HGloHor_in_internal, cheGloHorRad.HIn);
        //---------------------------------------------------------------------------
        // Select diffuse horizontal radiation connector
        if HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HGloHor_HDifHor
             or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor
             or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor then
           connect(HDifHor_in, HDifHor_in_internal)
            "Get HDifHor using user input file";
        elseif HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HGloHor then
            HGloHor_in_internal - HDirNor_in_internal*cos(zenAng.zen) = HDifHor_in_internal
            "Calculate the HGloHor using HDirNor and HDifHor according to (A.4.14) and (A.4.15)";
        else
          connect(conDifHorRad.HOut, HDifHor_in_internal)
            "Get HDifHor using weather data file";
        end if;
        connect(HDifHor_in_internal, cheDifHorRad.HIn);
        //---------------------------------------------------------------------------
        // Select direct normal radiation connector
        if HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HGloHor
             or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor
             or HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HDirNor_HDifHor_HGloHor then
           connect(HDirNor_in, HDirNor_in_internal)
            "Get HDirNor using user input file";
        elseif HSou == GreenVillage.MicroGrid.Types.RadiationDataSource.Input_HGloHor_HDifHor then
          (HGloHor_in_internal - HDifHor_in_internal)/
            Buildings.Utilities.Math.Functions.smoothMax(
            x1=cos(zenAng.zen),
            x2=epsCos,
            deltaX=0.1*epsCos) = HDirNor_in_internal
            "Calculate the HDirNor using HGloHor and HDifHor according to (A.4.14) and (A.4.15)";
        else
          connect(conDirNorRad.HOut, HDirNor_in_internal)
            "Get HDirNor using weather data file";
        end if;
        connect(HDirNor_in_internal, cheDirNorRad.HIn);

        //---------------------------------------------------------------------------
        // Select infrared radiation connector
        if HInfHorSou == Buildings.BoundaryConditions.Types.DataSource.Parameter then
          HInfHor_in_internal = HInfHor;
        elseif HInfHorSou == Buildings.BoundaryConditions.Types.DataSource.Input then
          connect(HInfHor_in, HInfHor_in_internal);
        else
          connect(conHorRad.HOut, HInfHor_in_internal);
        end if;
        connect(HInfHor_in_internal, cheHorRad.HIn);

        connect(chePre.POut, weaBus.pAtm) annotation (Line(
            points={{181,70},{220,70},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheTotSkyCov.nOut, weaBus.nTot) annotation (Line(
            points={{181,-30},{220,-30},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheOpaSkyCov.nOut, weaBus.nOpa) annotation (Line(
            points={{183,-150},{220,-150},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheGloHorRad.HOut, weaBus.HGloHor) annotation (Line(
            points={{181,170},{220,170},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheDifHorRad.HOut, weaBus.HDifHor) annotation (Line(
            points={{181,130},{220,130},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheDirNorRad.HOut, weaBus.HDirNor) annotation (Line(
            points={{181,210},{220,210},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheCeiHei.ceiHeiOut, weaBus.celHei) annotation (Line(
            points={{181,-110},{220,-110},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheWinSpe.winSpeOut, weaBus.winSpe) annotation (Line(
            points={{181,-70},{220,-70},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheHorRad.HOut, weaBus.radHorIR) annotation (Line(
            points={{181,250},{220,250},{220,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheWinDir.nOut, weaBus.winDir) annotation (Line(
            points={{181,-270},{280,-270},{280,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheOpaSkyCov.nOut,TBlaSkyCom. nOpa) annotation (Line(
            points={{183,-150},{220,-150},{220,-213},{238,-213}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(cheHorRad.HOut,TBlaSkyCom. radHorIR) annotation (Line(
            points={{181,250},{220,250},{220,-218},{238,-218}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TBlaSkyCom.TBlaSky, weaBus.TBlaSky) annotation (Line(
            points={{261,-210},{280,-210},{280,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(modTim.y, weaBus.cloTim) annotation (Line(
            points={{-159,6.10623e-016},{34.75,6.10623e-016},{34.75,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(modTim.y, add.u2) annotation (Line(
            points={{-159,6.10623e-16},{-150,6.10623e-16},{-150,164},{-142,164}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(con30mins.y, add.u1) annotation (Line(
            points={{-159,202},{-150,202},{-150,176},{-142,176}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, conTim1.modTim) annotation (Line(
            points={{-119,170},{-112,170}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(conTim1.calTim, datRea1.u) annotation (Line(
            points={{-89,170},{-82,170}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(modTim.y, locTim.cloTim) annotation (Line(
            points={{-159,6.10623e-16},{-150,6.10623e-16},{-150,-150},{-122,-150}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(modTim.y, conTim.modTim) annotation (Line(
            points={{-159,6.10623e-16},{-150,6.10623e-16},{-150,-30},{-122,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(conTim.calTim, datRea.u) annotation (Line(
            points={{-99,-30},{-82,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(modTim.y, eqnTim.nDay) annotation (Line(
            points={{-159,6.10623e-16},{-150,6.10623e-16},{-150,-110},{-122,-110}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(eqnTim.eqnTim, solTim.equTim) annotation (Line(
            points={{-99,-110},{-88,-110},{-88,-124},{-82,-124}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(locTim.locTim, solTim.locTim) annotation (Line(
            points={{-99,-150},{-88,-150},{-88,-135.4},{-82,-135.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solTim.solTim, weaBus.solTim) annotation (Line(
            points={{-59,-130},{-20,-130},{-20,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(datRea.y[11], conWinDir.u) annotation (Line(
            points={{-59,-30.16},{20,-30.16},{20,-270},{118,-270}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(datRea1.y[1], conHorRad.HIn) annotation (Line(
            points={{-59,169.25},{20,169.25},{20,250},{118,250}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(cheTemDryBul.TOut,TBlaSkyCom. TDryBul) annotation (Line(
            points={{181,-190},{220,-190},{220,-202},{238,-202}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(datRea.y[1], conTDryBul.u) annotation (Line(
            points={{-59,-30.96},{20,-30.96},{20,-190},{118,-190}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(datRea.y[2], conTDewPoi.u) annotation (Line(
            points={{-59,-30.88},{20,-30.88},{20,-230},{118,-230}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(cheTemDewPoi.TOut, weaBus.TDewPoi) annotation (Line(
            points={{181,-230},{280,-230},{280,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(TBlaSkyCom.TDewPoi, cheTemDewPoi.TOut) annotation (Line(
            points={{238,-207},{220,-207},{220,-230},{181,-230}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(datRea1.y[3], conDirNorRad.HIn) annotation (Line(
            points={{-59,170.25},{20,170.25},{20,210},{118,210}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(datRea1.y[2], conGloHorRad.HIn) annotation (Line(
            points={{-59,169.75},{30,169.75},{30,170},{120,170}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(datRea1.y[4], conDifHorRad.HIn) annotation (Line(
            points={{-59,170.75},{20,170.75},{20,130},{118,130}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(conRelHum.relHumIn, datRea.y[3]) annotation (Line(
            points={{118,30},{20,30},{20,-30.8},{-59,-30.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(cheRelHum.relHumOut, weaBus.relHum) annotation (Line(
            points={{181,30},{280,30},{280,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheTemDryBul.TOut, weaBus.TDryBul) annotation (Line(
            points={{181,-190},{280,-190},{280,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(decAng.decAng, zenAng.decAng)
                                        annotation (Line(
            points={{-119,-210},{-82,-210},{-82,-210.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solHouAng.solHouAng, zenAng.solHouAng)                                              annotation (Line(
            points={{-119,-240},{-100,-240},{-100,-220.8},{-82,-220.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solHouAng.solTim, solTim.solTim) annotation (Line(
            points={{-142,-240},{-154,-240},{-154,-172},{-20,-172},{-20,-130},{-59,-130}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(decAng.nDay, modTim.y) annotation (Line(
            points={{-142,-210},{-150,-210},{-150,-180},{0,-180},{0,6.10623e-16},{
                -159,6.10623e-16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(zenAng.zen, altAng.zen) annotation (Line(
            points={{-59,-216},{-40,-216},{-40,-270},{-32,-270}},
            color={0,0,127},
            smooth=Smooth.None));

        // Connectors for wet bulb temperature.
        // These are removed if computeWetBulbTemperature = false
        connect(chePre.POut, tWetBul_TDryBulXi.p) annotation (Line(
            points={{181,70},{220,70},{220,-64},{243,-64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tWetBul_TDryBulXi.TWetBul, weaBus.TWetBul) annotation (Line(
            points={{265,-56},{280,-56},{280,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(cheTemDryBul.TOut, tWetBul_TDryBulXi.TDryBul) annotation (Line(
            points={{181,-190},{220,-190},{220,-48},{243,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(cheRelHum.relHumOut, tWetBul_TDryBulXi.phi) annotation (Line(
            points={{181,30},{208,30},{208,-56},{243,-56}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(altAng.alt, weaBus.solAlt) annotation (Line(
            points={{-9,-270},{8,-270},{8,-290},{290,-290},{290,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(zenAng.zen, weaBus.solZen) annotation (Line(
            points={{-59,-216},{-40,-216},{-40,-290},{290,-290},{290,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(decAng.decAng, weaBus.solDec) annotation (Line(
            points={{-119,-210},{-110,-210},{-110,-208},{-100,-208},{-100,-290},{290,
                -290},{290,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solHouAng.solHouAng, weaBus.solHouAng) annotation (Line(
            points={{-119,-240},{-108,-240},{-108,-238},{-100,-238},{-100,-290},{290,
                -290},{290,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(longitude.y, weaBus.lon) annotation (Line(
            points={{-119,-270},{-100,-270},{-100,-290},{290,-290},{290,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(latitude.y, weaBus.lat) annotation (Line(
            points={{-159,-270},{-150,-270},{-150,-290},{290,-290},{290,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          defaultComponentName="weaDat",
          Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-200,-200},{200,200}},
              initialScale=0.05), graphics={
              Rectangle(
                extent={{-200,200},{200,-200}},
                lineColor={124,142,255},
                fillColor={124,142,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-162,270},{138,230}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                visible=(pAtmSou == Buildings.BoundaryConditions.Types.DataSource.Input),
                extent={{-190,216},{-164,184}},
                lineColor={0,0,127},
                textString="p"),
              Text(
                visible=(TDryBulSou == Buildings.BoundaryConditions.Types.DataSource.Input),
                extent={{-194,162},{-118,118}},
                lineColor={0,0,127},
                textString="TDryBul"),
              Text(
                visible=(relHumSou == Buildings.BoundaryConditions.Types.DataSource.Input),
                extent={{-190,92},{-104,66}},
                lineColor={0,0,127},
                textString="relHum"),
              Text(
              visible=(winSpeSou == Buildings.BoundaryConditions.Types.DataSource.Input),
                extent={{-196,44},{-110,2}},
                lineColor={0,0,127},
                textString="winSpe"),
              Text(
                visible=(winDirSou == Buildings.BoundaryConditions.Types.DataSource.Input),
                extent={{-192,-18},{-106,-60}},
                lineColor={0,0,127},
                textString="winDir"),
              Text(
              visible=(HSou ==  Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor or HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HGloHor),
              extent={{-202,-88},{-112,-108}},
                lineColor={0,0,127},
                textString="HGloHor"),
              Text(visible=(HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor or HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HDifHor),
              extent={{-202,-142},{-116,-164}},
                lineColor={0,0,127},
                textString="HDifHor"),
              Text(
              visible=(HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HGloHor or HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HDifHor),
              extent={{-200,-186},{-126,-214}},
                lineColor={0,0,127},
                textString="HDirNor"),
              Ellipse(
                extent={{-146,154},{28,-20}},
                lineColor={255,220,220},
                lineThickness=1,
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,0}),
              Polygon(
                points={{104,76},{87.9727,12.9844},{88,12},{120,22},{148,20},{174,8},
                    {192,-58},{148,-132},{20,-140},{-130,-136},{-156,-60},{-140,-6},{
                    -92,-4},{-68.2109,-21.8418},{-68,-22},{-82,40},{-48,90},{44,110},
                    {104,76}},
                lineColor={220,220,220},
                lineThickness=0.1,
                fillPattern=FillPattern.Sphere,
                smooth=Smooth.Bezier,
                fillColor={230,230,230})}),
          Documentation(info="<html>
<p>
This component reads TMY3 weather data (Wilcox and Marion, 2008) or user specified weather data.
The weather data format is the Typical Meteorological Year (TMY3)
as obtained from the EnergyPlus web site at
<a href=\"http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\">
http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm</a>. These
data, which are in the EnergyPlus format, need to be converted as described
in the next paragraph.
</p>
<!-- ============================================== -->
<h4>Adding new weather data</h4>
<p>
To add new weather data, proceed as follows:
</p>
<ol>
<li>
Download the weather data file with the <code>epw</code> extension from
<a href=\"http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\">
http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm</a>.
</li>
<li>
Add the file to <code>Buildings/Resources/weatherdata</code> (or to any directory
for which you have write permission).
</li>
<li>
On a console window, type<pre>
  cd Buildings/Resources/weatherdata
  java -jar ../bin/ConvertWeatherData.jar inputFile.epw
</pre>
This will generate the weather data file <code>inputFile.mos</code>, which can be read
by the model
<a href=\"modelica://Buildings.BoundaryConditions.WeatherData.ReaderTMY3\">
Buildings.BoundaryConditions.WeatherData.ReaderTMY3</a>.
</li>
</ol>
<!-- ============================================== -->
<h4>Location data that are read automatically from the weather data file</h4>
<p>
The following location data are automatically read from the weather file:
</p>
<ul>
<li>
The latitude of the weather station, <code>lat</code>,
</li>
<li>
the longitude of the weather station, <code>lon</code>, and
</li>
<li>
the time zone relative to Greenwich Mean Time, <code>timZone</code>.
</li>
</ul>
<!-- ============================================== -->
<h4>Wet bulb temperature</h4>
<p>
By default, the data bus contains the wet bulb temperature.
This introduces a nonlinear equation.
However, we have not observed an increase in computing time because
of this equation.
To disable the computation of the wet bulb temperature, set
<code>computeWetBulbTemperature=false</code>.
</p>
<!-- ============================================== -->
<h4>Using constant or user-defined input signals for weather data</h4>
<p>
This model has the option of using a constant value, using the data from the weather file,
or using data from an input connector for the following variables:
</p>
<ul>
<li>
The atmospheric pressure,
</li>
<li>
the ceiling height,
</li>
<li>
the total sky cover pressure,
</li>
<li>
the opaque sky cover pressure,
</li>
<li>
the dry bulb temperature,
</li>
<li>
the dew point temperature,
</li>
<li>
the sky black body temperature,
</li>
<li>
the relative humidity,
</li>
<li>
the wind direction,
</li>
<li>
the wind speed,
</li>
<li>
the global horizontal radiation, direct normal and diffuse horizontal radiation,
and
</li>
<li>
the infrared horizontal radiation.
</li>
</ul>
<p>
By default, all data are obtained from the weather data file,
except for the atmospheric pressure, which is set to the
parameter <code>pAtm=101325</code> Pascals.
</p>
<p>
The parameter <code>*Sou</code> configures the source of the data.
For the atmospheric pressure, temperatures, relative humidity, wind speed and wind direction,
the enumeration
<a href=\"modelica://Buildings.BoundaryConditions.Types.DataSource\">
Buildings.BoundaryConditions.Types.DataSource</a>
is used as follows:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<!-- ============================================== -->
<tr>
  <th>Parameter <code>*Sou</code>
  </th>
  <th>Data used to compute weather data.
  </th>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    File
  </td>
  <td>
    Use data from file.
  </td>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    Parameter
  </td>
  <td>
    Use value specified by the parameter.
  </td>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    Input
  </td>
  <td>
    Use value from the input connector.
  </td>
</tr>
</table>
<p>
Because global, diffuse and direct radiation are related to each other, the parameter
<code>HSou</code> is treated differently.
It is set to a value of the enumeration
<a href=\"modelica://Buildings.BoundaryConditions.Types.RadiationDataSource\">
Buildings.BoundaryConditions.Types.RadiationDataSource</a>,
and allows the following configurations:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<!-- ============================================== -->
<tr>
  <th>Parameter <code>HSou</code>
  </th>
  <th>Data used to compute weather data.
  </th>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    File
  </td>
  <td>
    Use data from file.
  </td>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    Input_HGloHor_HDifHor
  </td>
  <td>
    Use global horizontal and diffuse horizontal radiation from input connector.
  </td>
</tr>
<tr>
  <td>
    Input_HDirNor_HDifHor
  </td>
  <td>
    Use direct normal and diffuse horizontal radiation from input connector.
  </td>
</tr>
<tr>
  <td>
    Input_HDirNor_HGloHor
  </td>
  <td>
    Use direct normal and global horizontal radiation from input connector.
  </td>
</tr>
</table>
<p>
<b>Notes</b>
</p>
<ol>
<li>
<p>
In HVAC systems, when the fan is off, changes in atmospheric pressure can cause small air flow rates
in the duct system due to change in pressure and hence in the mass of air that is stored
in air volumes (such as in fluid junctions or in the room model).
This may increase computing time. Therefore, the default value for the atmospheric pressure is set to a constant.
Furthermore, if the initial pressure of air volumes are different
from the atmospheric pressure, then fast pressure transients can happen in the first few seconds of the simulation.
This can cause numerical problems for the solver. To avoid this problem, set the atmospheric pressure to the
same value as the medium default pressure, which is typically set to the parameter <code>Medium.p_default</code>.
For medium models for moist air and dry air, the default is
<code>Medium.p_default=101325</code> Pascals.
</p>
</li>
<li>
<p>
Different units apply depending on whether data are obtained from a file, or
from a parameter or an input connector:
</p>
<ul>
<li>
When using TMY3 data from a file (e.g. <code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos</code>), the units must be the same as the original TMY3 file used by EnergyPlus (e.g.
<code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw</code>).
The TMY3 data used by EnergyPlus are in both SI units and non-SI units.
If <code>Resources/bin/ConvertWeatherData.jar</code> is used to convert the <code>.epw</code> file to an <code>.mos</code> file, the units of the TMY3 data are preserved and the file can be directly
used by this data reader.
The data reader will automatically convert units to the SI units used by Modelica.
For example, the dry bulb temperature <code>TDryBul</code> in TMY3 is in degree Celsius.
The data reader will automatically convert the data to Kelvin.
The wind direction <code>winDir</code> in TMY3 is degrees and will be automatically converted to radians.
</li>
<li>
When using data from a parameter or from an input connector,
the data must be in the SI units used by Modelica.
For instance, the unit must be
<code>Pa</code> for pressure,
<code>K</code> for temperature,
<code>W/m2</code> for solar radiations and
<code>rad</code> for wind direction.
</li>
</ul>
</li>
<li>
The ReaderTMY3 should only be used with TMY3 data. It contains a time shift for solar radiation data
that is explained below. This time shift needs to be removed if the user may want to
use the ReaderTMY3 for other weather data types.
</li>
</ol>
<h4>Implementation</h4>
<h5>Start and end data for annual weather data files</h5>
<p>
The TMY3 weather data, as well as the EnergyPlus weather data, start at 1:00 AM
on January 1, and provide hourly data until midnight on December 31.
Thus, the first entry for temperatures, humidity, wind speed etc. are values
at 1:00 AM and not at midnight. Furthermore, the TMY3 weather data files can have
values at midnight of December 31 that may be significantly different from the values
at 1:00 AM on January 1.
Since annual simulations require weather data that start at 0:00 on January 1,
data need to be provided for this hour. Due to the possibly large change in
weatherdata between 1:00 AM on January 1 and midnight at December 31,
the weather data files in the Buildings library do not use the data entry from
midnight at December 31 as the value for <i>t=0</i>. Rather, the
value from 1:00 AM on January 1 is duplicated and used for 0:00 on January 1.
To maintain a data record with <i>8760</i> hours, the weather data record from
midnight at December 31 is deleted.
These changes in the weather data file are done in the Java program that converts
EnergyPlus weather data file to Modelica weather data files, and which is described
below.
</p>
<h5>Time shift for solar radiation data</h5>
<p>
To read weather data from the TMY3 weather data file, there are
two data readers in this model. One data reader obtains all data
except solar radiation, and the other data reader reads only the
solar radiation data, shifted by <i>30</i> minutes.
The reason for this time shift is as follows:
The TMY3 weather data file contains for solar radiation the
\"...radiation received
on a horizontal surface during
the 60-minute period ending at
the timestamp.\"

Thus, as the figure below shows, a more accurate interpolation is obtained if
time is shifted by <i>30</i> minutes prior to reading the weather data.
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://Buildings/Resources/Images/BoundaryConditions/WeatherData/RadiationTimeShift.png\"
border=\"1\" />
</p>
<h4>References</h4>
<ul>
<li>
Wilcox S. and W. Marion. <i>Users Manual for TMY3 Data Sets</i>.
Technical Report, NREL/TP-581-43156, revised May 2008.
</li>
</ul>
</html>",       revisions="<html>
<ul>
<li>
March 26, 2015, by Michael Wetter:<br/>
Added option to obtain the black body sky temperature
from a parameter or an input signal.
This is required for
<a href=\"modelica://Buildings.Rooms.Validation.MixedAirInitialization\">
Buildings.Rooms.Validation.MixedAirInitialization</a>.
</li>
<li>
October 17, 2014, by Michael Wetter:<br/>
Corrected error that led the total and opaque sky cover to be ten times
too low if its value was obtained from the parameter or the input connector.
For the standard configuration in which the sky cover is obtained from
the weather data file, the model was correct. This error only affected
the other two possible configurations.
</li>
<li>
September 12, 2014, by Michael Wetter:<br/>
Removed redundant connection <code>connect(conHorRad.HOut, cheHorRad.HIn);</code>.
</li>
<li>
May 30, 2014, by Michael Wetter:<br/>
Removed undesirable annotation <code>Evaluate=true</code>.
</li>
<li>
May 5, 2013, by Thierry S. Nouidui:<br/>
Added the option to use a constant, an input signal or the weather file as the source
for the ceiling height, the total sky cover, the opaque sky cover, the dew point temperature,
and the infrared horizontal radiation <code>HInfHor</code>.
</li>
<li>
October 8, 2013, by Michael Wetter:<br/>
Improved the algorithm that determines the absolute path of the file.
Now weather files are searched in the path specified, and if not found, the urls
<code>file://</code>, <code>modelica://</code> and <code>modelica://Buildings</code>
are added in this order to search for the weather file.
This allows using the data reader without having to specify an absolute path,
as long as the <code>Buildings</code> library
is on the <code>MODELICAPATH</code>.
This change was implemented in
<a href=\"modelica://Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\">
Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath</a>
and improves this weather data reader.
</li>
<li>
May 2, 2013, by Michael Wetter:<br/>
Added function call to <code>getAbsolutePath</code>.
</li>
<li>
October 16, 2012, by Michael Wetter:<br/>
Added computation of the wet bulb temperature.
Computing the wet bulb temperature introduces a nonlinear
equation. As we have not observed an increase in computing time
because of computing the wet bulb temperature, it is computed
by default. By setting the parameter
<code>computeWetBulbTemperature=false</code>, the computation of the
wet bulb temperature can be removed.
Revised documentation.
</li>
<li>
August 11, 2012, by Wangda Zuo:<br/>
Renamed <code>radHor</code> to <code>radHorIR</code> and
improved the optional inputs for radiation data.
</li>
<li>
July 24, 2012, by Wangda Zuo:<br/>
Corrected the notes of SI unit requirements for input files.
</li>
<li>
July 13, 2012, by Michael Wetter:<br/>
Removed assignment of <code>HGloHor_in</code> in its declaration,
because this gives an overdetermined system if the input connector
is used.
Removed non-required assignments of attribute <code>displayUnit</code>.
</li>
<li>
February 25, 2012, by Michael Wetter:<br/>
Added subbus for solar position, which is needed by irradition and
shading model.
</li>
<li>
November 29, 2011, by Michael Wetter:<br/>
Fixed wrong display unit for <code>pAtm_in_internal</code> and
made propagation of parameter final.
</li>
<li>
October 27, 2011, by Wangda Zuo:<br/>
<ol>
<li>
Added optional connectors for dry bulb temperature, relative humidity, wind speed, wind direction, global horizontal radiation, diffuse horizontal radiation.<br/>
</li>
<li>
Separate the unit convertion for TMY3 data and data validity check.
</li>
</ol>
</li>
<li>
October 3, 2011, by Michael Wetter:<br/>
Propagated value for sky temperature calculation to make it accessible as a parameter.
</li>
<li>
July 20, 2011, by Michael Wetter:<br/>
Added the option to use a constant, an input signal or the weather file as the source
for the atmospheric pressure.
</li><li>
March 15, 2011, by Wangda Zuo:<br/>
Delete the wet bulb temperature since it may cause numerical problem.
</li>
<li>
March 7, 2011, by Wangda Zuo:<br/>
Added wet bulb temperature. Changed reader to read only needed columns.
Added explanation for 30 minutes shift for radiation data.
</li>
<li>
March 5, 2011, by Michael Wetter:<br/>
Changed implementation to obtain longitude and time zone directly
from weather file.
</li>
<li>
June 25, 2010, by Wangda Zuo:<br/>
First implementation.
</li>
</ul>
</html>"),Diagram(coordinateSystem(preserveAspectRatio=false,
           extent={{-200,-300},{300,300}}),
              graphics));
      end ReaderTMY3;

      block ReaderSolarIn "Reader for TMY3 weather data"

        //--------------------------------------------------------------

        //--------------------------------------------------------------
        // Global horizontal radiation
        Modelica.Blocks.Interfaces.RealInput HGloHor_in(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") "Input global horizontal radiation"
          annotation (Placement(transformation(extent={{-240,-120},{-200,-80}}),
              iconTransformation(extent={{-240,-120},{-200,-80}})));
        //--------------------------------------------------------------
        // Diffuse horizontal radiation
        Modelica.Blocks.Interfaces.RealInput HDifHor_in(
          final quantity="RadiantEnergyFluenceRate",
          final unit="W/m2") "Input diffuse horizontal radiation"
          annotation (Placement(transformation(extent={{-240,-80},{-200,-40}}),
              iconTransformation(extent={{-240,-80},{-200,-40}})));
        //--------------------------------------------------------------
        // Direct normal radiation
        Modelica.Blocks.Interfaces.RealInput HDirNor_in(final quantity="RadiantEnergyFluenceRate",
            final unit="W/m2") "Input direct normal radiation"
          annotation (Placement(transformation(extent={{-240,-160},{-200,-120}}),
              iconTransformation(extent={{-240,-160},{-200,-120}})));

        //--------------------------------------------------------------
        parameter String filNam="" "Name of weather data file" annotation (Dialog(
              __Dymola_loadSelector(filter="Weather files (*.mos)", caption=
                  "Select weather file")));
        final parameter Modelica.SIunits.Angle lon(displayUnit="deg")=
          Buildings.BoundaryConditions.WeatherData.BaseClasses.getLongitudeTMY3(
          filNam) "Longitude";
        final parameter Modelica.SIunits.Angle lat(displayUnit="deg")=
          Buildings.BoundaryConditions.WeatherData.BaseClasses.getLatitudeTMY3(
          filNam) "Latitude";
        final parameter Modelica.SIunits.Time timZon(displayUnit="h")=
          Buildings.BoundaryConditions.WeatherData.BaseClasses.getTimeZoneTMY3(filNam)
          "Time zone";
        Buildings.BoundaryConditions.WeatherData.Bus
            weaBus "Weather data bus" annotation (Placement(transformation(extent={{
                  290,-10},{310,10}}), iconTransformation(extent={{190,-10},{210,10}})));

      protected
        Buildings.Utilities.Time.ModelTime
                                 modTim "Model time"
          annotation (Placement(transformation(extent={{-180,-10},{-160,10}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.LocalCivilTime locTim(final lon=
             lon, final timZon=timZon) "Local civil time"
          annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.EquationOfTime
                                   eqnTim "Equation of time"
          annotation (Placement(transformation(extent={{-120,-50},{-100,-30}})));
        Buildings.BoundaryConditions.WeatherData.BaseClasses.SolarTime
                              solTim "Solar time"
          annotation (Placement(transformation(extent={{-48,-70},{-28,-50}})));
        // Conditional connectors

        Buildings.BoundaryConditions.SolarGeometry.BaseClasses.AltitudeAngle
                                                altAng "Solar altitude angle"
          annotation (Placement(transformation(extent={{224,-130},{244,-110}})));
         Buildings.BoundaryConditions.SolarGeometry.BaseClasses.ZenithAngle
                                               zenAng(
           final lat = lat) "Zenith angle"
          annotation (Placement(transformation(extent={{140,-76},{160,-56}})));
         Buildings.BoundaryConditions.SolarGeometry.BaseClasses.Declination
                                               decAng "Declination angle"
          annotation (Placement(transformation(extent={{60,-70},{80,-50}})));
         Buildings.BoundaryConditions.SolarGeometry.BaseClasses.SolarHourAngle
          solHouAng
          annotation (Placement(transformation(extent={{60,-100},{80,-80}})));
        Modelica.Blocks.Sources.Constant latitude(final k=lat) "Latitude"
          annotation (Placement(transformation(extent={{-130,-150},{-110,-130}})));
        Modelica.Blocks.Sources.Constant longitude(final k=lon) "Longitude"
          annotation (Placement(transformation(extent={{-64,-130},{-44,-110}})));

        //---------------------------------------------------------------------------
        // Optional instanciation of a block that computes the wet bulb temperature.
        // This block may be needed for evaporative cooling towers.
        // By default, it is enabled. This introduces a nonlinear equation, but
        // we have not observed an increase in computing time because of this equation.

        //---------------------------------------------------------------------------
        // Conversion blocks for sky cover
      equation
        //---------------------------------------------------------------------------

        //---------------------------------------------------------------------------

        //---------------------------------------------------------------------------

        //---------------------------------------------------------------------------

        connect(modTim.y, weaBus.cloTim) annotation (Line(
            points={{-159,6.10623e-016},{34.75,6.10623e-016},{34.75,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(modTim.y, locTim.cloTim) annotation (Line(
            points={{-159,0},{-150,0},{-150,-80},{-122,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(modTim.y, eqnTim.nDay) annotation (Line(
            points={{-159,0},{-150,0},{-150,-40},{-122,-40}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(eqnTim.eqnTim, solTim.equTim) annotation (Line(
            points={{-99,-40},{-88,-40},{-88,-54},{-50,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(locTim.locTim, solTim.locTim) annotation (Line(
            points={{-99,-80},{-88,-80},{-88,-65.4},{-50,-65.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solTim.solTim, weaBus.solTim) annotation (Line(
            points={{-27,-60},{0,-60},{0,0},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(decAng.decAng, zenAng.decAng)
                                        annotation (Line(
            points={{81,-60},{138,-60},{138,-60.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solHouAng.solHouAng, zenAng.solHouAng)                                              annotation (Line(
            points={{81,-90},{118,-90},{118,-70.8},{138,-70.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solHouAng.solTim, solTim.solTim) annotation (Line(
            points={{58,-90},{0,-90},{0,-60},{-27,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(decAng.nDay, modTim.y) annotation (Line(
            points={{58,-60},{20,-60},{20,0},{-159,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(zenAng.zen, altAng.zen) annotation (Line(
            points={{161,-66},{170,-66},{170,-120},{222,-120}},
            color={0,0,127},
            smooth=Smooth.None));

        // Connectors for wet bulb temperature.
        // These are removed if computeWetBulbTemperature = false

        connect(altAng.alt, weaBus.solAlt) annotation (Line(
            points={{245,-120},{264,-120},{264,-140},{300,-140},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(zenAng.zen, weaBus.solZen) annotation (Line(
            points={{161,-66},{170,-66},{170,-140},{300,-140},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(decAng.decAng, weaBus.solDec) annotation (Line(
            points={{81,-60},{100,-60},{100,-140},{300,-140},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(solHouAng.solHouAng, weaBus.solHouAng) annotation (Line(
            points={{81,-90},{118,-90},{118,-140},{300,-140},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(longitude.y, weaBus.lon) annotation (Line(
            points={{-43,-120},{64,-120},{64,-140},{300,-140},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(latitude.y, weaBus.lat) annotation (Line(
            points={{-109,-140},{300,-140},{300,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HDifHor_in, weaBus.HDifHor) annotation (Line(
            points={{-220,-60},{-186,-60},{-186,60},{300,60},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(HGloHor_in, weaBus.HGloHor) annotation (Line(
            points={{-220,-100},{-186,-100},{-186,60},{300,60},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(HDirNor_in, weaBus.HDirNor) annotation (Line(
            points={{-220,-140},{-186,-140},{-186,60},{300,60},{300,0}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (
          defaultComponentName="weaDat",
          Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-200,-200},{200,200}},
              initialScale=0.05), graphics={
              Rectangle(
                extent={{-200,200},{200,-200}},
                lineColor={124,142,255},
                fillColor={124,142,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-162,270},{138,230}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
              visible=(HSou ==  Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor or HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HGloHor),
              extent={{-202,-88},{-112,-108}},
                lineColor={0,0,127},
                textString="HGloHor"),
              Text(visible=(HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor or HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HDifHor),
              extent={{-202,-142},{-116,-164}},
                lineColor={0,0,127},
                textString="HDifHor"),
              Text(
              visible=(HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HGloHor or HSou == Buildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HDifHor),
              extent={{-200,-186},{-126,-214}},
                lineColor={0,0,127},
                textString="HDirNor"),
              Ellipse(
                extent={{-146,154},{28,-20}},
                lineColor={255,220,220},
                lineThickness=1,
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,0}),
              Polygon(
                points={{104,76},{87.9727,12.9844},{88,12},{120,22},{148,20},{174,8},
                    {192,-58},{148,-132},{20,-140},{-130,-136},{-156,-60},{-140,-6},{
                    -92,-4},{-68.2109,-21.8418},{-68,-22},{-82,40},{-48,90},{44,110},
                    {104,76}},
                lineColor={220,220,220},
                lineThickness=0.1,
                fillPattern=FillPattern.Sphere,
                smooth=Smooth.Bezier,
                fillColor={230,230,230})}),
          Documentation(info="<html>
<p>
This component reads TMY3 weather data (Wilcox and Marion, 2008) or user specified weather data.
The weather data format is the Typical Meteorological Year (TMY3)
as obtained from the EnergyPlus web site at
<a href=\"http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\">
http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm</a>. These
data, which are in the EnergyPlus format, need to be converted as described
in the next paragraph.
</p>
<!-- ============================================== -->
<h4>Adding new weather data</h4>
<p>
To add new weather data, proceed as follows:
</p>
<ol>
<li>
Download the weather data file with the <code>epw</code> extension from
<a href=\"http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\">
http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm</a>.
</li>
<li>
Add the file to <code>Buildings/Resources/weatherdata</code> (or to any directory
for which you have write permission).
</li>
<li>
On a console window, type<pre>
  cd Buildings/Resources/weatherdata
  java -jar ../bin/ConvertWeatherData.jar inputFile.epw
</pre>
This will generate the weather data file <code>inputFile.mos</code>, which can be read
by the model
<a href=\"modelica://Buildings.BoundaryConditions.WeatherData.ReaderTMY3\">
Buildings.BoundaryConditions.WeatherData.ReaderTMY3</a>.
</li>
</ol>
<!-- ============================================== -->
<h4>Location data that are read automatically from the weather data file</h4>
<p>
The following location data are automatically read from the weather file:
</p>
<ul>
<li>
The latitude of the weather station, <code>lat</code>,
</li>
<li>
the longitude of the weather station, <code>lon</code>, and
</li>
<li>
the time zone relative to Greenwich Mean Time, <code>timZone</code>.
</li>
</ul>
<!-- ============================================== -->
<h4>Wet bulb temperature</h4>
<p>
By default, the data bus contains the wet bulb temperature.
This introduces a nonlinear equation.
However, we have not observed an increase in computing time because
of this equation.
To disable the computation of the wet bulb temperature, set
<code>computeWetBulbTemperature=false</code>.
</p>
<!-- ============================================== -->
<h4>Using constant or user-defined input signals for weather data</h4>
<p>
This model has the option of using a constant value, using the data from the weather file,
or using data from an input connector for the following variables:
</p>
<ul>
<li>
The atmospheric pressure,
</li>
<li>
the ceiling height,
</li>
<li>
the total sky cover pressure,
</li>
<li>
the opaque sky cover pressure,
</li>
<li>
the dry bulb temperature,
</li>
<li>
the dew point temperature,
</li>
<li>
the sky black body temperature,
</li>
<li>
the relative humidity,
</li>
<li>
the wind direction,
</li>
<li>
the wind speed,
</li>
<li>
the global horizontal radiation, direct normal and diffuse horizontal radiation,
and
</li>
<li>
the infrared horizontal radiation.
</li>
</ul>
<p>
By default, all data are obtained from the weather data file,
except for the atmospheric pressure, which is set to the
parameter <code>pAtm=101325</code> Pascals.
</p>
<p>
The parameter <code>*Sou</code> configures the source of the data.
For the atmospheric pressure, temperatures, relative humidity, wind speed and wind direction,
the enumeration
<a href=\"modelica://Buildings.BoundaryConditions.Types.DataSource\">
Buildings.BoundaryConditions.Types.DataSource</a>
is used as follows:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<!-- ============================================== -->
<tr>
  <th>Parameter <code>*Sou</code>
  </th>
  <th>Data used to compute weather data.
  </th>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    File
  </td>
  <td>
    Use data from file.
  </td>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    Parameter
  </td>
  <td>
    Use value specified by the parameter.
  </td>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    Input
  </td>
  <td>
    Use value from the input connector.
  </td>
</tr>
</table>
<p>
Because global, diffuse and direct radiation are related to each other, the parameter
<code>HSou</code> is treated differently.
It is set to a value of the enumeration
<a href=\"modelica://Buildings.BoundaryConditions.Types.RadiationDataSource\">
Buildings.BoundaryConditions.Types.RadiationDataSource</a>,
and allows the following configurations:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<!-- ============================================== -->
<tr>
  <th>Parameter <code>HSou</code>
  </th>
  <th>Data used to compute weather data.
  </th>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    File
  </td>
  <td>
    Use data from file.
  </td>
</tr>
<!-- ============================================== -->
<tr>
  <td>
    Input_HGloHor_HDifHor
  </td>
  <td>
    Use global horizontal and diffuse horizontal radiation from input connector.
  </td>
</tr>
<tr>
  <td>
    Input_HDirNor_HDifHor
  </td>
  <td>
    Use direct normal and diffuse horizontal radiation from input connector.
  </td>
</tr>
<tr>
  <td>
    Input_HDirNor_HGloHor
  </td>
  <td>
    Use direct normal and global horizontal radiation from input connector.
  </td>
</tr>
</table>
<p>
<b>Notes</b>
</p>
<ol>
<li>
<p>
In HVAC systems, when the fan is off, changes in atmospheric pressure can cause small air flow rates
in the duct system due to change in pressure and hence in the mass of air that is stored
in air volumes (such as in fluid junctions or in the room model).
This may increase computing time. Therefore, the default value for the atmospheric pressure is set to a constant.
Furthermore, if the initial pressure of air volumes are different
from the atmospheric pressure, then fast pressure transients can happen in the first few seconds of the simulation.
This can cause numerical problems for the solver. To avoid this problem, set the atmospheric pressure to the
same value as the medium default pressure, which is typically set to the parameter <code>Medium.p_default</code>.
For medium models for moist air and dry air, the default is
<code>Medium.p_default=101325</code> Pascals.
</p>
</li>
<li>
<p>
Different units apply depending on whether data are obtained from a file, or
from a parameter or an input connector:
</p>
<ul>
<li>
When using TMY3 data from a file (e.g. <code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos</code>), the units must be the same as the original TMY3 file used by EnergyPlus (e.g.
<code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw</code>).
The TMY3 data used by EnergyPlus are in both SI units and non-SI units.
If <code>Resources/bin/ConvertWeatherData.jar</code> is used to convert the <code>.epw</code> file to an <code>.mos</code> file, the units of the TMY3 data are preserved and the file can be directly
used by this data reader.
The data reader will automatically convert units to the SI units used by Modelica.
For example, the dry bulb temperature <code>TDryBul</code> in TMY3 is in degree Celsius.
The data reader will automatically convert the data to Kelvin.
The wind direction <code>winDir</code> in TMY3 is degrees and will be automatically converted to radians.
</li>
<li>
When using data from a parameter or from an input connector,
the data must be in the SI units used by Modelica.
For instance, the unit must be
<code>Pa</code> for pressure,
<code>K</code> for temperature,
<code>W/m2</code> for solar radiations and
<code>rad</code> for wind direction.
</li>
</ul>
</li>
<li>
The ReaderTMY3 should only be used with TMY3 data. It contains a time shift for solar radiation data
that is explained below. This time shift needs to be removed if the user may want to
use the ReaderTMY3 for other weather data types.
</li>
</ol>
<h4>Implementation</h4>
<h5>Start and end data for annual weather data files</h5>
<p>
The TMY3 weather data, as well as the EnergyPlus weather data, start at 1:00 AM
on January 1, and provide hourly data until midnight on December 31.
Thus, the first entry for temperatures, humidity, wind speed etc. are values
at 1:00 AM and not at midnight. Furthermore, the TMY3 weather data files can have
values at midnight of December 31 that may be significantly different from the values
at 1:00 AM on January 1.
Since annual simulations require weather data that start at 0:00 on January 1,
data need to be provided for this hour. Due to the possibly large change in
weatherdata between 1:00 AM on January 1 and midnight at December 31,
the weather data files in the Buildings library do not use the data entry from
midnight at December 31 as the value for <i>t=0</i>. Rather, the
value from 1:00 AM on January 1 is duplicated and used for 0:00 on January 1.
To maintain a data record with <i>8760</i> hours, the weather data record from
midnight at December 31 is deleted.
These changes in the weather data file are done in the Java program that converts
EnergyPlus weather data file to Modelica weather data files, and which is described
below.
</p>
<h5>Time shift for solar radiation data</h5>
<p>
To read weather data from the TMY3 weather data file, there are
two data readers in this model. One data reader obtains all data
except solar radiation, and the other data reader reads only the
solar radiation data, shifted by <i>30</i> minutes.
The reason for this time shift is as follows:
The TMY3 weather data file contains for solar radiation the
\"...radiation received
on a horizontal surface during
the 60-minute period ending at
the timestamp.\"

Thus, as the figure below shows, a more accurate interpolation is obtained if
time is shifted by <i>30</i> minutes prior to reading the weather data.
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://Buildings/Resources/Images/BoundaryConditions/WeatherData/RadiationTimeShift.png\"
border=\"1\" />
</p>
<h4>References</h4>
<ul>
<li>
Wilcox S. and W. Marion. <i>Users Manual for TMY3 Data Sets</i>.
Technical Report, NREL/TP-581-43156, revised May 2008.
</li>
</ul>
</html>",       revisions="<html>
<ul>
<li>
March 26, 2015, by Michael Wetter:<br/>
Added option to obtain the black body sky temperature
from a parameter or an input signal.
This is required for
<a href=\"modelica://Buildings.Rooms.Validation.MixedAirInitialization\">
Buildings.Rooms.Validation.MixedAirInitialization</a>.
</li>
<li>
October 17, 2014, by Michael Wetter:<br/>
Corrected error that led the total and opaque sky cover to be ten times
too low if its value was obtained from the parameter or the input connector.
For the standard configuration in which the sky cover is obtained from
the weather data file, the model was correct. This error only affected
the other two possible configurations.
</li>
<li>
September 12, 2014, by Michael Wetter:<br/>
Removed redundant connection <code>connect(conHorRad.HOut, cheHorRad.HIn);</code>.
</li>
<li>
May 30, 2014, by Michael Wetter:<br/>
Removed undesirable annotation <code>Evaluate=true</code>.
</li>
<li>
May 5, 2013, by Thierry S. Nouidui:<br/>
Added the option to use a constant, an input signal or the weather file as the source
for the ceiling height, the total sky cover, the opaque sky cover, the dew point temperature,
and the infrared horizontal radiation <code>HInfHor</code>.
</li>
<li>
October 8, 2013, by Michael Wetter:<br/>
Improved the algorithm that determines the absolute path of the file.
Now weather files are searched in the path specified, and if not found, the urls
<code>file://</code>, <code>modelica://</code> and <code>modelica://Buildings</code>
are added in this order to search for the weather file.
This allows using the data reader without having to specify an absolute path,
as long as the <code>Buildings</code> library
is on the <code>MODELICAPATH</code>.
This change was implemented in
<a href=\"modelica://Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\">
Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath</a>
and improves this weather data reader.
</li>
<li>
May 2, 2013, by Michael Wetter:<br/>
Added function call to <code>getAbsolutePath</code>.
</li>
<li>
October 16, 2012, by Michael Wetter:<br/>
Added computation of the wet bulb temperature.
Computing the wet bulb temperature introduces a nonlinear
equation. As we have not observed an increase in computing time
because of computing the wet bulb temperature, it is computed
by default. By setting the parameter
<code>computeWetBulbTemperature=false</code>, the computation of the
wet bulb temperature can be removed.
Revised documentation.
</li>
<li>
August 11, 2012, by Wangda Zuo:<br/>
Renamed <code>radHor</code> to <code>radHorIR</code> and
improved the optional inputs for radiation data.
</li>
<li>
July 24, 2012, by Wangda Zuo:<br/>
Corrected the notes of SI unit requirements for input files.
</li>
<li>
July 13, 2012, by Michael Wetter:<br/>
Removed assignment of <code>HGloHor_in</code> in its declaration,
because this gives an overdetermined system if the input connector
is used.
Removed non-required assignments of attribute <code>displayUnit</code>.
</li>
<li>
February 25, 2012, by Michael Wetter:<br/>
Added subbus for solar position, which is needed by irradition and
shading model.
</li>
<li>
November 29, 2011, by Michael Wetter:<br/>
Fixed wrong display unit for <code>pAtm_in_internal</code> and
made propagation of parameter final.
</li>
<li>
October 27, 2011, by Wangda Zuo:<br/>
<ol>
<li>
Added optional connectors for dry bulb temperature, relative humidity, wind speed, wind direction, global horizontal radiation, diffuse horizontal radiation.<br/>
</li>
<li>
Separate the unit convertion for TMY3 data and data validity check.
</li>
</ol>
</li>
<li>
October 3, 2011, by Michael Wetter:<br/>
Propagated value for sky temperature calculation to make it accessible as a parameter.
</li>
<li>
July 20, 2011, by Michael Wetter:<br/>
Added the option to use a constant, an input signal or the weather file as the source
for the atmospheric pressure.
</li><li>
March 15, 2011, by Wangda Zuo:<br/>
Delete the wet bulb temperature since it may cause numerical problem.
</li>
<li>
March 7, 2011, by Wangda Zuo:<br/>
Added wet bulb temperature. Changed reader to read only needed columns.
Added explanation for 30 minutes shift for radiation data.
</li>
<li>
March 5, 2011, by Michael Wetter:<br/>
Changed implementation to obtain longitude and time zone directly
from weather file.
</li>
<li>
June 25, 2010, by Wangda Zuo:<br/>
First implementation.
</li>
</ul>
</html>"),Diagram(coordinateSystem(preserveAspectRatio=false,
           extent={{-200,-300},{300,300}}),
              graphics));
      end ReaderSolarIn;
    end basemodel;
  end PV;

  package Types "Package with type definitions"
   extends Modelica.Icons.TypesPackage;

    type DataSource = enumeration(
        File "Use data from file",
        Parameter "Use parameter",
        Input "Use input connector") "Enumeration to define data source"
          annotation(Documentation(info="<html>
<p>
Enumeration to define the data source used in the weather data reader.
</p>
</html>",   revisions=
            "<html>
<ul>
<li>
July 20, 2011, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
    type RadiationDataSource = enumeration(
        File "Use data from file",
        Input_HGloHor_HDifHor
          "Global horizontal and diffuse horizontal radiation from connector",
        Input_HDirNor_HDifHor
          "Direct normal and diffuse horizontal radiation from connector",
        Input_HDirNor_HGloHor
          "Direct normal and global horizontal radiation from connector",
        Input_HDirNor_HDifHor_HGloHor
          "Direct normal, global horizontal and diffuse horizontal radiation from connector")
      "Enumeration to define solar radiation data source"
          annotation(Documentation(info="<html>
<p>
Enumeration to define the data source used in the weather data reader.
</p>
</html>",   revisions=
            "<html>
<ul>
<li>
August 13, 2012, by Wangda Zuo:<br/>
First implementation.
</li>
</ul>
</html>"));
    type SkyTemperatureCalculation = enumeration(
        HorizontalRadiation "Use horizontal irradiation",
        TemperaturesAndSkyCover
          "Use dry-bulb and dew-point temperatures and sky cover")
      "Enumeration for computation of sky temperature" annotation (Documentation(
          info =                "<html>
<p>
Enumeration to define the method used to compute the sky temperature.
</p>
</html>",   revisions=
            "<html>
<ul>
<li>
October 3, 2011, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
  annotation (preferredView="info", Documentation(info="<html>
This package contains type definitions.
</html>"));
  end Types;

  package baseclass
  end baseclass;
end MicroGrid;
